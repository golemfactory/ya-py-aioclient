Only in src/ya_payment: .DS_Store
diff -r -c target/ya_payment/__init__.py src/ya_payment/__init__.py
*** target/ya_payment/__init__.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_payment/__init__.py	2020-07-21 16:04:51.000000000 +0200
***************
*** 12,19 ****
  """
  
  
- from __future__ import absolute_import
- 
  __version__ = ""
  
  # import apis into sdk package
--- 12,17 ----
***************
*** 28,33 ****
--- 26,32 ----
  from ya_payment.exceptions import ApiValueError
  from ya_payment.exceptions import ApiKeyError
  from ya_payment.exceptions import ApiException
+ 
  # import models into sdk package
  from ya_payment.models.acceptance import Acceptance
  from ya_payment.models.activity_payment import ActivityPayment
***************
*** 43,46 ****
  from ya_payment.models.payment import Payment
  from ya_payment.models.rejection import Rejection
  from ya_payment.models.rejection_reason import RejectionReason
- 
--- 42,44 ----
diff -r -c target/ya_payment/api/__init__.py src/ya_payment/api/__init__.py
*** target/ya_payment/api/__init__.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_payment/api/__init__.py	2020-07-21 16:04:51.000000000 +0200
***************
*** 1,5 ****
- from __future__ import absolute_import
- 
  # flake8: noqa
  
  # import apis into api package
--- 1,3 ----
diff -r -c target/ya_payment/api/provider_api.py src/ya_payment/api/provider_api.py
*** target/ya_payment/api/provider_api.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_payment/api/provider_api.py	2020-07-21 16:04:54.000000000 +0200
***************
*** 10,27 ****
  """
  
  
- from __future__ import absolute_import
- 
  import re  # noqa: F401
  
  # python 2 and python 3 compatibility library
! import six
  
  from ya_payment.api_client import ApiClient
! from ya_payment.exceptions import (  # noqa: F401
!     ApiTypeError,
!     ApiValueError
! )
  
  
  class ProviderApi(object):
--- 10,22 ----
  """
  
  
  import re  # noqa: F401
  
  # python 2 and python 3 compatibility library
! 
  
  from ya_payment.api_client import ApiClient
! from ya_payment.exceptions import ApiTypeError, ApiValueError  # noqa: F401
  
  
  class ProviderApi(object):
***************
*** 59,66 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.cancel_debit_note_with_http_info(debit_node_id, **kwargs)  # noqa: E501
  
      def cancel_debit_note_with_http_info(self, debit_node_id, **kwargs):  # noqa: E501
          """Cancel Debit Note.  # noqa: E501
--- 54,63 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.cancel_debit_note_with_http_info(
!             debit_node_id, **kwargs
!         )  # noqa: E501
  
      def cancel_debit_note_with_http_info(self, debit_node_id, **kwargs):  # noqa: E501
          """Cancel Debit Note.  # noqa: E501
***************
*** 90,132 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'debit_node_id',
!             'timeout'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method cancel_debit_note" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'debit_node_id' is set
!         if self.api_client.client_side_validation and ('debit_node_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['debit_node_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `debit_node_id` when calling `cancel_debit_note`")  # noqa: E501
! 
!         if self.api_client.client_side_validation and 'timeout' in local_var_params and local_var_params['timeout'] < 0:  # noqa: E501
!             raise ApiValueError("Invalid value for parameter `timeout` when calling `cancel_debit_note`, must be a value greater than or equal to `0`")  # noqa: E501
          collection_formats = {}
  
          path_params = {}
!         if 'debit_node_id' in local_var_params:
!             path_params['debitNodeId'] = local_var_params['debit_node_id']  # noqa: E501
  
          query_params = []
!         if 'timeout' in local_var_params and local_var_params['timeout'] is not None:  # noqa: E501
!             query_params.append(('timeout', local_var_params['timeout']))  # noqa: E501
  
          header_params = {}
  
--- 87,138 ----
  
          local_var_params = locals()
  
!         all_params = ["debit_node_id", "timeout"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method cancel_debit_note" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'debit_node_id' is set
!         if self.api_client.client_side_validation and (
!             "debit_node_id" not in local_var_params
!             or local_var_params["debit_node_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `debit_node_id` when calling `cancel_debit_note`"
!             )  # noqa: E501
! 
!         if (
!             self.api_client.client_side_validation
!             and "timeout" in local_var_params
!             and local_var_params["timeout"] < 0
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Invalid value for parameter `timeout` when calling `cancel_debit_note`, must be a value greater than or equal to `0`"
!             )  # noqa: E501
          collection_formats = {}
  
          path_params = {}
!         if "debit_node_id" in local_var_params:
!             path_params["debitNodeId"] = local_var_params["debit_node_id"]  # noqa: E501
  
          query_params = []
!         if (
!             "timeout" in local_var_params and local_var_params["timeout"] is not None
!         ):  # noqa: E501
!             query_params.append(("timeout", local_var_params["timeout"]))  # noqa: E501
  
          header_params = {}
  
***************
*** 135,148 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/provider/debitNotes/{debitNodeId}/cancel', 'POST',
              path_params,
              query_params,
              header_params,
--- 141,156 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/provider/debitNotes/{debitNodeId}/cancel",
!             "POST",
              path_params,
              query_params,
              header_params,
***************
*** 151,161 ****
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def cancel_invoice(self, invoice_id, **kwargs):  # noqa: E501
          """Cancel Invoice.  # noqa: E501
--- 159,172 ----
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def cancel_invoice(self, invoice_id, **kwargs):  # noqa: E501
          """Cancel Invoice.  # noqa: E501
***************
*** 180,186 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
          return self.cancel_invoice_with_http_info(invoice_id, **kwargs)  # noqa: E501
  
      def cancel_invoice_with_http_info(self, invoice_id, **kwargs):  # noqa: E501
--- 191,197 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
          return self.cancel_invoice_with_http_info(invoice_id, **kwargs)  # noqa: E501
  
      def cancel_invoice_with_http_info(self, invoice_id, **kwargs):  # noqa: E501
***************
*** 211,253 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'invoice_id',
!             'timeout'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method cancel_invoice" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'invoice_id' is set
!         if self.api_client.client_side_validation and ('invoice_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['invoice_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `invoice_id` when calling `cancel_invoice`")  # noqa: E501
! 
!         if self.api_client.client_side_validation and 'timeout' in local_var_params and local_var_params['timeout'] < 0:  # noqa: E501
!             raise ApiValueError("Invalid value for parameter `timeout` when calling `cancel_invoice`, must be a value greater than or equal to `0`")  # noqa: E501
          collection_formats = {}
  
          path_params = {}
!         if 'invoice_id' in local_var_params:
!             path_params['invoiceId'] = local_var_params['invoice_id']  # noqa: E501
  
          query_params = []
!         if 'timeout' in local_var_params and local_var_params['timeout'] is not None:  # noqa: E501
!             query_params.append(('timeout', local_var_params['timeout']))  # noqa: E501
  
          header_params = {}
  
--- 222,273 ----
  
          local_var_params = locals()
  
!         all_params = ["invoice_id", "timeout"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method cancel_invoice" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'invoice_id' is set
!         if self.api_client.client_side_validation and (
!             "invoice_id" not in local_var_params
!             or local_var_params["invoice_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `invoice_id` when calling `cancel_invoice`"
!             )  # noqa: E501
! 
!         if (
!             self.api_client.client_side_validation
!             and "timeout" in local_var_params
!             and local_var_params["timeout"] < 0
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Invalid value for parameter `timeout` when calling `cancel_invoice`, must be a value greater than or equal to `0`"
!             )  # noqa: E501
          collection_formats = {}
  
          path_params = {}
!         if "invoice_id" in local_var_params:
!             path_params["invoiceId"] = local_var_params["invoice_id"]  # noqa: E501
  
          query_params = []
!         if (
!             "timeout" in local_var_params and local_var_params["timeout"] is not None
!         ):  # noqa: E501
!             query_params.append(("timeout", local_var_params["timeout"]))  # noqa: E501
  
          header_params = {}
  
***************
*** 256,269 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/provider/invoices/{invoiceId}/cancel', 'POST',
              path_params,
              query_params,
              header_params,
--- 276,291 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/provider/invoices/{invoiceId}/cancel",
!             "POST",
              path_params,
              query_params,
              header_params,
***************
*** 272,282 ****
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_incoming_payment(self, payment_id, **kwargs):  # noqa: E501
          """Get incoming Payment.  # noqa: E501
--- 294,307 ----
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_incoming_payment(self, payment_id, **kwargs):  # noqa: E501
          """Get incoming Payment.  # noqa: E501
***************
*** 299,306 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.get_incoming_payment_with_http_info(payment_id, **kwargs)  # noqa: E501
  
      def get_incoming_payment_with_http_info(self, payment_id, **kwargs):  # noqa: E501
          """Get incoming Payment.  # noqa: E501
--- 324,333 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.get_incoming_payment_with_http_info(
!             payment_id, **kwargs
!         )  # noqa: E501
  
      def get_incoming_payment_with_http_info(self, payment_id, **kwargs):  # noqa: E501
          """Get incoming Payment.  # noqa: E501
***************
*** 328,363 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'payment_id'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_incoming_payment" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'payment_id' is set
!         if self.api_client.client_side_validation and ('payment_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['payment_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `payment_id` when calling `get_incoming_payment`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'payment_id' in local_var_params:
!             path_params['paymentId'] = local_var_params['payment_id']  # noqa: E501
  
          query_params = []
  
--- 355,392 ----
  
          local_var_params = locals()
  
!         all_params = ["payment_id"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_incoming_payment" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'payment_id' is set
!         if self.api_client.client_side_validation and (
!             "payment_id" not in local_var_params
!             or local_var_params["payment_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `payment_id` when calling `get_incoming_payment`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "payment_id" in local_var_params:
!             path_params["paymentId"] = local_var_params["payment_id"]  # noqa: E501
  
          query_params = []
  
***************
*** 368,394 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/provider/payments/{paymentId}', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='Allocation',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_incoming_payments(self, **kwargs):  # noqa: E501
          """Get incoming Payments.  # noqa: E501
--- 397,428 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/provider/payments/{paymentId}",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="Allocation",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_incoming_payments(self, **kwargs):  # noqa: E501
          """Get incoming Payments.  # noqa: E501
***************
*** 413,419 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
          return self.get_incoming_payments_with_http_info(**kwargs)  # noqa: E501
  
      def get_incoming_payments_with_http_info(self, **kwargs):  # noqa: E501
--- 447,453 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
          return self.get_incoming_payments_with_http_info(**kwargs)  # noqa: E501
  
      def get_incoming_payments_with_http_info(self, **kwargs):  # noqa: E501
***************
*** 444,482 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'timeout',
!             'later_than'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_incoming_payments" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
  
!         if self.api_client.client_side_validation and 'timeout' in local_var_params and local_var_params['timeout'] < 0:  # noqa: E501
!             raise ApiValueError("Invalid value for parameter `timeout` when calling `get_incoming_payments`, must be a value greater than or equal to `0`")  # noqa: E501
          collection_formats = {}
  
          path_params = {}
  
          query_params = []
!         if 'timeout' in local_var_params and local_var_params['timeout'] is not None:  # noqa: E501
!             query_params.append(('timeout', local_var_params['timeout']))  # noqa: E501
!         if 'later_than' in local_var_params and local_var_params['later_than'] is not None:  # noqa: E501
!             query_params.append(('laterThan', local_var_params['later_than']))  # noqa: E501
  
          header_params = {}
  
--- 478,526 ----
  
          local_var_params = locals()
  
!         all_params = ["timeout", "later_than"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_incoming_payments" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
  
!         if (
!             self.api_client.client_side_validation
!             and "timeout" in local_var_params
!             and local_var_params["timeout"] < 0
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Invalid value for parameter `timeout` when calling `get_incoming_payments`, must be a value greater than or equal to `0`"
!             )  # noqa: E501
          collection_formats = {}
  
          path_params = {}
  
          query_params = []
!         if (
!             "timeout" in local_var_params and local_var_params["timeout"] is not None
!         ):  # noqa: E501
!             query_params.append(("timeout", local_var_params["timeout"]))  # noqa: E501
!         if (
!             "later_than" in local_var_params
!             and local_var_params["later_than"] is not None
!         ):  # noqa: E501
!             query_params.append(
!                 ("laterThan", local_var_params["later_than"])
!             )  # noqa: E501
  
          header_params = {}
  
***************
*** 485,511 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/provider/payments', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='list[Payment]',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_issued_debit_note(self, debit_node_id, **kwargs):  # noqa: E501
          """Get Debit Note.  # noqa: E501
--- 529,560 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/provider/payments",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="list[Payment]",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_issued_debit_note(self, debit_node_id, **kwargs):  # noqa: E501
          """Get Debit Note.  # noqa: E501
***************
*** 528,537 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.get_issued_debit_note_with_http_info(debit_node_id, **kwargs)  # noqa: E501
! 
!     def get_issued_debit_note_with_http_info(self, debit_node_id, **kwargs):  # noqa: E501
          """Get Debit Note.  # noqa: E501
  
          This method makes a synchronous HTTP request by default. To make an
--- 577,590 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.get_issued_debit_note_with_http_info(
!             debit_node_id, **kwargs
!         )  # noqa: E501
! 
!     def get_issued_debit_note_with_http_info(
!         self, debit_node_id, **kwargs
!     ):  # noqa: E501
          """Get Debit Note.  # noqa: E501
  
          This method makes a synchronous HTTP request by default. To make an
***************
*** 557,592 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'debit_node_id'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_issued_debit_note" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'debit_node_id' is set
!         if self.api_client.client_side_validation and ('debit_node_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['debit_node_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `debit_node_id` when calling `get_issued_debit_note`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'debit_node_id' in local_var_params:
!             path_params['debitNodeId'] = local_var_params['debit_node_id']  # noqa: E501
  
          query_params = []
  
--- 610,647 ----
  
          local_var_params = locals()
  
!         all_params = ["debit_node_id"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_issued_debit_note" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'debit_node_id' is set
!         if self.api_client.client_side_validation and (
!             "debit_node_id" not in local_var_params
!             or local_var_params["debit_node_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `debit_node_id` when calling `get_issued_debit_note`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "debit_node_id" in local_var_params:
!             path_params["debitNodeId"] = local_var_params["debit_node_id"]  # noqa: E501
  
          query_params = []
  
***************
*** 597,623 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/provider/debitNotes/{debitNodeId}', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='DebitNote',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_issued_debit_notes(self, **kwargs):  # noqa: E501
          """Get Debit Notes issued by this Provider.  # noqa: E501
--- 652,683 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/provider/debitNotes/{debitNodeId}",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="DebitNote",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_issued_debit_notes(self, **kwargs):  # noqa: E501
          """Get Debit Notes issued by this Provider.  # noqa: E501
***************
*** 639,645 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
          return self.get_issued_debit_notes_with_http_info(**kwargs)  # noqa: E501
  
      def get_issued_debit_notes_with_http_info(self, **kwargs):  # noqa: E501
--- 699,705 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
          return self.get_issued_debit_notes_with_http_info(**kwargs)  # noqa: E501
  
      def get_issued_debit_notes_with_http_info(self, **kwargs):  # noqa: E501
***************
*** 667,691 ****
  
          local_var_params = locals()
  
!         all_params = [
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_issued_debit_notes" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
  
          collection_formats = {}
  
--- 727,750 ----
  
          local_var_params = locals()
  
!         all_params = []
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_issued_debit_notes" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
  
          collection_formats = {}
  
***************
*** 700,726 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/provider/debitNotes', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='list[DebitNote]',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_issued_invoice(self, invoice_id, **kwargs):  # noqa: E501
          """Get Invoice.  # noqa: E501
--- 759,790 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/provider/debitNotes",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="list[DebitNote]",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_issued_invoice(self, invoice_id, **kwargs):  # noqa: E501
          """Get Invoice.  # noqa: E501
***************
*** 743,750 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.get_issued_invoice_with_http_info(invoice_id, **kwargs)  # noqa: E501
  
      def get_issued_invoice_with_http_info(self, invoice_id, **kwargs):  # noqa: E501
          """Get Invoice.  # noqa: E501
--- 807,816 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.get_issued_invoice_with_http_info(
!             invoice_id, **kwargs
!         )  # noqa: E501
  
      def get_issued_invoice_with_http_info(self, invoice_id, **kwargs):  # noqa: E501
          """Get Invoice.  # noqa: E501
***************
*** 772,807 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'invoice_id'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_issued_invoice" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'invoice_id' is set
!         if self.api_client.client_side_validation and ('invoice_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['invoice_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `invoice_id` when calling `get_issued_invoice`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'invoice_id' in local_var_params:
!             path_params['invoiceId'] = local_var_params['invoice_id']  # noqa: E501
  
          query_params = []
  
--- 838,875 ----
  
          local_var_params = locals()
  
!         all_params = ["invoice_id"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_issued_invoice" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'invoice_id' is set
!         if self.api_client.client_side_validation and (
!             "invoice_id" not in local_var_params
!             or local_var_params["invoice_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `invoice_id` when calling `get_issued_invoice`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "invoice_id" in local_var_params:
!             path_params["invoiceId"] = local_var_params["invoice_id"]  # noqa: E501
  
          query_params = []
  
***************
*** 812,838 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/provider/invoices/{invoiceId}', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='Invoice',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_issued_invoices(self, **kwargs):  # noqa: E501
          """Get Invoices issued by this Provider.  # noqa: E501
--- 880,911 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/provider/invoices/{invoiceId}",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="Invoice",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_issued_invoices(self, **kwargs):  # noqa: E501
          """Get Invoices issued by this Provider.  # noqa: E501
***************
*** 854,860 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
          return self.get_issued_invoices_with_http_info(**kwargs)  # noqa: E501
  
      def get_issued_invoices_with_http_info(self, **kwargs):  # noqa: E501
--- 927,933 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
          return self.get_issued_invoices_with_http_info(**kwargs)  # noqa: E501
  
      def get_issued_invoices_with_http_info(self, **kwargs):  # noqa: E501
***************
*** 882,906 ****
  
          local_var_params = locals()
  
!         all_params = [
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_issued_invoices" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
  
          collection_formats = {}
  
--- 955,978 ----
  
          local_var_params = locals()
  
!         all_params = []
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_issued_invoices" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
  
          collection_formats = {}
  
***************
*** 915,941 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/provider/invoices', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='list[Invoice]',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_payments_for_issued_debit_note(self, debit_node_id, **kwargs):  # noqa: E501
          """Get Payments for Debit Note.  # noqa: E501
--- 987,1018 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/provider/invoices",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="list[Invoice]",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_payments_for_issued_debit_note(self, debit_node_id, **kwargs):  # noqa: E501
          """Get Payments for Debit Note.  # noqa: E501
***************
*** 958,967 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.get_payments_for_issued_debit_note_with_http_info(debit_node_id, **kwargs)  # noqa: E501
! 
!     def get_payments_for_issued_debit_note_with_http_info(self, debit_node_id, **kwargs):  # noqa: E501
          """Get Payments for Debit Note.  # noqa: E501
  
          This method makes a synchronous HTTP request by default. To make an
--- 1035,1048 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.get_payments_for_issued_debit_note_with_http_info(
!             debit_node_id, **kwargs
!         )  # noqa: E501
! 
!     def get_payments_for_issued_debit_note_with_http_info(
!         self, debit_node_id, **kwargs
!     ):  # noqa: E501
          """Get Payments for Debit Note.  # noqa: E501
  
          This method makes a synchronous HTTP request by default. To make an
***************
*** 987,1022 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'debit_node_id'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_payments_for_issued_debit_note" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'debit_node_id' is set
!         if self.api_client.client_side_validation and ('debit_node_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['debit_node_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `debit_node_id` when calling `get_payments_for_issued_debit_note`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'debit_node_id' in local_var_params:
!             path_params['debitNodeId'] = local_var_params['debit_node_id']  # noqa: E501
  
          query_params = []
  
--- 1068,1105 ----
  
          local_var_params = locals()
  
!         all_params = ["debit_node_id"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_payments_for_issued_debit_note" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'debit_node_id' is set
!         if self.api_client.client_side_validation and (
!             "debit_node_id" not in local_var_params
!             or local_var_params["debit_node_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `debit_node_id` when calling `get_payments_for_issued_debit_note`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "debit_node_id" in local_var_params:
!             path_params["debitNodeId"] = local_var_params["debit_node_id"]  # noqa: E501
  
          query_params = []
  
***************
*** 1027,1053 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/provider/debitNotes/{debitNodeId}/payments', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='list[Payment]',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_payments_for_issued_invoice(self, invoice_id, **kwargs):  # noqa: E501
          """Get Payments for issued Invoice.  # noqa: E501
--- 1110,1141 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/provider/debitNotes/{debitNodeId}/payments",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="list[Payment]",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_payments_for_issued_invoice(self, invoice_id, **kwargs):  # noqa: E501
          """Get Payments for issued Invoice.  # noqa: E501
***************
*** 1070,1079 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.get_payments_for_issued_invoice_with_http_info(invoice_id, **kwargs)  # noqa: E501
! 
!     def get_payments_for_issued_invoice_with_http_info(self, invoice_id, **kwargs):  # noqa: E501
          """Get Payments for issued Invoice.  # noqa: E501
  
          This method makes a synchronous HTTP request by default. To make an
--- 1158,1171 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.get_payments_for_issued_invoice_with_http_info(
!             invoice_id, **kwargs
!         )  # noqa: E501
! 
!     def get_payments_for_issued_invoice_with_http_info(
!         self, invoice_id, **kwargs
!     ):  # noqa: E501
          """Get Payments for issued Invoice.  # noqa: E501
  
          This method makes a synchronous HTTP request by default. To make an
***************
*** 1099,1134 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'invoice_id'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_payments_for_issued_invoice" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'invoice_id' is set
!         if self.api_client.client_side_validation and ('invoice_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['invoice_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `invoice_id` when calling `get_payments_for_issued_invoice`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'invoice_id' in local_var_params:
!             path_params['invoiceId'] = local_var_params['invoice_id']  # noqa: E501
  
          query_params = []
  
--- 1191,1228 ----
  
          local_var_params = locals()
  
!         all_params = ["invoice_id"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_payments_for_issued_invoice" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'invoice_id' is set
!         if self.api_client.client_side_validation and (
!             "invoice_id" not in local_var_params
!             or local_var_params["invoice_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `invoice_id` when calling `get_payments_for_issued_invoice`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "invoice_id" in local_var_params:
!             path_params["invoiceId"] = local_var_params["invoice_id"]  # noqa: E501
  
          query_params = []
  
***************
*** 1139,1165 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/provider/invoices/{invoiceId}/payments', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='list[Payment]',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_provider_debit_note_events(self, **kwargs):  # noqa: E501
          """Get Debit Note events.  # noqa: E501
--- 1233,1264 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/provider/invoices/{invoiceId}/payments",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="list[Payment]",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_provider_debit_note_events(self, **kwargs):  # noqa: E501
          """Get Debit Note events.  # noqa: E501
***************
*** 1184,1191 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.get_provider_debit_note_events_with_http_info(**kwargs)  # noqa: E501
  
      def get_provider_debit_note_events_with_http_info(self, **kwargs):  # noqa: E501
          """Get Debit Note events.  # noqa: E501
--- 1283,1292 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.get_provider_debit_note_events_with_http_info(
!             **kwargs
!         )  # noqa: E501
  
      def get_provider_debit_note_events_with_http_info(self, **kwargs):  # noqa: E501
          """Get Debit Note events.  # noqa: E501
***************
*** 1215,1253 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'timeout',
!             'later_than'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_provider_debit_note_events" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
  
!         if self.api_client.client_side_validation and 'timeout' in local_var_params and local_var_params['timeout'] < 0:  # noqa: E501
!             raise ApiValueError("Invalid value for parameter `timeout` when calling `get_provider_debit_note_events`, must be a value greater than or equal to `0`")  # noqa: E501
          collection_formats = {}
  
          path_params = {}
  
          query_params = []
!         if 'timeout' in local_var_params and local_var_params['timeout'] is not None:  # noqa: E501
!             query_params.append(('timeout', local_var_params['timeout']))  # noqa: E501
!         if 'later_than' in local_var_params and local_var_params['later_than'] is not None:  # noqa: E501
!             query_params.append(('laterThan', local_var_params['later_than']))  # noqa: E501
  
          header_params = {}
  
--- 1316,1364 ----
  
          local_var_params = locals()
  
!         all_params = ["timeout", "later_than"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_provider_debit_note_events" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
  
!         if (
!             self.api_client.client_side_validation
!             and "timeout" in local_var_params
!             and local_var_params["timeout"] < 0
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Invalid value for parameter `timeout` when calling `get_provider_debit_note_events`, must be a value greater than or equal to `0`"
!             )  # noqa: E501
          collection_formats = {}
  
          path_params = {}
  
          query_params = []
!         if (
!             "timeout" in local_var_params and local_var_params["timeout"] is not None
!         ):  # noqa: E501
!             query_params.append(("timeout", local_var_params["timeout"]))  # noqa: E501
!         if (
!             "later_than" in local_var_params
!             and local_var_params["later_than"] is not None
!         ):  # noqa: E501
!             query_params.append(
!                 ("laterThan", local_var_params["later_than"])
!             )  # noqa: E501
  
          header_params = {}
  
***************
*** 1256,1282 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/provider/debitNoteEvents', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='list[InvoiceEvent]',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_provider_invoice_events(self, **kwargs):  # noqa: E501
          """Get Invoice events.  # noqa: E501
--- 1367,1398 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/provider/debitNoteEvents",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="list[InvoiceEvent]",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_provider_invoice_events(self, **kwargs):  # noqa: E501
          """Get Invoice events.  # noqa: E501
***************
*** 1301,1307 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
          return self.get_provider_invoice_events_with_http_info(**kwargs)  # noqa: E501
  
      def get_provider_invoice_events_with_http_info(self, **kwargs):  # noqa: E501
--- 1417,1423 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
          return self.get_provider_invoice_events_with_http_info(**kwargs)  # noqa: E501
  
      def get_provider_invoice_events_with_http_info(self, **kwargs):  # noqa: E501
***************
*** 1332,1370 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'timeout',
!             'later_than'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_provider_invoice_events" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
  
!         if self.api_client.client_side_validation and 'timeout' in local_var_params and local_var_params['timeout'] < 0:  # noqa: E501
!             raise ApiValueError("Invalid value for parameter `timeout` when calling `get_provider_invoice_events`, must be a value greater than or equal to `0`")  # noqa: E501
          collection_formats = {}
  
          path_params = {}
  
          query_params = []
!         if 'timeout' in local_var_params and local_var_params['timeout'] is not None:  # noqa: E501
!             query_params.append(('timeout', local_var_params['timeout']))  # noqa: E501
!         if 'later_than' in local_var_params and local_var_params['later_than'] is not None:  # noqa: E501
!             query_params.append(('laterThan', local_var_params['later_than']))  # noqa: E501
  
          header_params = {}
  
--- 1448,1496 ----
  
          local_var_params = locals()
  
!         all_params = ["timeout", "later_than"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_provider_invoice_events" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
  
!         if (
!             self.api_client.client_side_validation
!             and "timeout" in local_var_params
!             and local_var_params["timeout"] < 0
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Invalid value for parameter `timeout` when calling `get_provider_invoice_events`, must be a value greater than or equal to `0`"
!             )  # noqa: E501
          collection_formats = {}
  
          path_params = {}
  
          query_params = []
!         if (
!             "timeout" in local_var_params and local_var_params["timeout"] is not None
!         ):  # noqa: E501
!             query_params.append(("timeout", local_var_params["timeout"]))  # noqa: E501
!         if (
!             "later_than" in local_var_params
!             and local_var_params["later_than"] is not None
!         ):  # noqa: E501
!             query_params.append(
!                 ("laterThan", local_var_params["later_than"])
!             )  # noqa: E501
  
          header_params = {}
  
***************
*** 1373,1399 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/provider/invoiceEvents', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='list[InvoiceEvent]',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def issue_debit_note(self, debit_note, **kwargs):  # noqa: E501
          """Issue a Debit Note.  # noqa: E501
--- 1499,1530 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/provider/invoiceEvents",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="list[InvoiceEvent]",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def issue_debit_note(self, debit_note, **kwargs):  # noqa: E501
          """Issue a Debit Note.  # noqa: E501
***************
*** 1416,1422 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
          return self.issue_debit_note_with_http_info(debit_note, **kwargs)  # noqa: E501
  
      def issue_debit_note_with_http_info(self, debit_note, **kwargs):  # noqa: E501
--- 1547,1553 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
          return self.issue_debit_note_with_http_info(debit_note, **kwargs)  # noqa: E501
  
      def issue_debit_note_with_http_info(self, debit_note, **kwargs):  # noqa: E501
***************
*** 1445,1474 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'debit_note'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method issue_debit_note" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'debit_note' is set
!         if self.api_client.client_side_validation and ('debit_note' not in local_var_params or  # noqa: E501
!                                                         local_var_params['debit_note'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `debit_note` when calling `issue_debit_note`")  # noqa: E501
  
          collection_formats = {}
  
--- 1576,1607 ----
  
          local_var_params = locals()
  
!         all_params = ["debit_note"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method issue_debit_note" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'debit_note' is set
!         if self.api_client.client_side_validation and (
!             "debit_note" not in local_var_params
!             or local_var_params["debit_note"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `debit_note` when calling `issue_debit_note`"
!             )  # noqa: E501
  
          collection_formats = {}
  
***************
*** 1482,1515 ****
          local_var_files = {}
  
          body_params = None
!         if 'debit_note' in local_var_params:
!             body_params = local_var_params['debit_note']
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # HTTP header `Content-Type`
!         header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/provider/debitNotes', 'POST',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='DebitNote',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def issue_invoice(self, invoice, **kwargs):  # noqa: E501
          """Issue an Invoice.  # noqa: E501
--- 1615,1656 ----
          local_var_files = {}
  
          body_params = None
!         if "debit_note" in local_var_params:
!             body_params = local_var_params["debit_note"]
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # HTTP header `Content-Type`
!         header_params[
!             "Content-Type"
!         ] = self.api_client.select_header_content_type(  # noqa: E501
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/provider/debitNotes",
!             "POST",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="DebitNote",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def issue_invoice(self, invoice, **kwargs):  # noqa: E501
          """Issue an Invoice.  # noqa: E501
***************
*** 1532,1538 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
          return self.issue_invoice_with_http_info(invoice, **kwargs)  # noqa: E501
  
      def issue_invoice_with_http_info(self, invoice, **kwargs):  # noqa: E501
--- 1673,1679 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
          return self.issue_invoice_with_http_info(invoice, **kwargs)  # noqa: E501
  
      def issue_invoice_with_http_info(self, invoice, **kwargs):  # noqa: E501
***************
*** 1561,1590 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'invoice'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method issue_invoice" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'invoice' is set
!         if self.api_client.client_side_validation and ('invoice' not in local_var_params or  # noqa: E501
!                                                         local_var_params['invoice'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `invoice` when calling `issue_invoice`")  # noqa: E501
  
          collection_formats = {}
  
--- 1702,1733 ----
  
          local_var_params = locals()
  
!         all_params = ["invoice"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method issue_invoice" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'invoice' is set
!         if self.api_client.client_side_validation and (
!             "invoice" not in local_var_params
!             or local_var_params["invoice"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `invoice` when calling `issue_invoice`"
!             )  # noqa: E501
  
          collection_formats = {}
  
***************
*** 1598,1631 ****
          local_var_files = {}
  
          body_params = None
!         if 'invoice' in local_var_params:
!             body_params = local_var_params['invoice']
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # HTTP header `Content-Type`
!         header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/provider/invoices', 'POST',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='Invoice',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def send_debit_note(self, debit_node_id, **kwargs):  # noqa: E501
          """Send Debit Note to Requestor.  # noqa: E501
--- 1741,1782 ----
          local_var_files = {}
  
          body_params = None
!         if "invoice" in local_var_params:
!             body_params = local_var_params["invoice"]
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # HTTP header `Content-Type`
!         header_params[
!             "Content-Type"
!         ] = self.api_client.select_header_content_type(  # noqa: E501
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/provider/invoices",
!             "POST",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="Invoice",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def send_debit_note(self, debit_node_id, **kwargs):  # noqa: E501
          """Send Debit Note to Requestor.  # noqa: E501
***************
*** 1650,1657 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.send_debit_note_with_http_info(debit_node_id, **kwargs)  # noqa: E501
  
      def send_debit_note_with_http_info(self, debit_node_id, **kwargs):  # noqa: E501
          """Send Debit Note to Requestor.  # noqa: E501
--- 1801,1810 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.send_debit_note_with_http_info(
!             debit_node_id, **kwargs
!         )  # noqa: E501
  
      def send_debit_note_with_http_info(self, debit_node_id, **kwargs):  # noqa: E501
          """Send Debit Note to Requestor.  # noqa: E501
***************
*** 1681,1723 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'debit_node_id',
!             'timeout'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method send_debit_note" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'debit_node_id' is set
!         if self.api_client.client_side_validation and ('debit_node_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['debit_node_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `debit_node_id` when calling `send_debit_note`")  # noqa: E501
! 
!         if self.api_client.client_side_validation and 'timeout' in local_var_params and local_var_params['timeout'] < 0:  # noqa: E501
!             raise ApiValueError("Invalid value for parameter `timeout` when calling `send_debit_note`, must be a value greater than or equal to `0`")  # noqa: E501
          collection_formats = {}
  
          path_params = {}
!         if 'debit_node_id' in local_var_params:
!             path_params['debitNodeId'] = local_var_params['debit_node_id']  # noqa: E501
  
          query_params = []
!         if 'timeout' in local_var_params and local_var_params['timeout'] is not None:  # noqa: E501
!             query_params.append(('timeout', local_var_params['timeout']))  # noqa: E501
  
          header_params = {}
  
--- 1834,1885 ----
  
          local_var_params = locals()
  
!         all_params = ["debit_node_id", "timeout"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method send_debit_note" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'debit_node_id' is set
!         if self.api_client.client_side_validation and (
!             "debit_node_id" not in local_var_params
!             or local_var_params["debit_node_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `debit_node_id` when calling `send_debit_note`"
!             )  # noqa: E501
! 
!         if (
!             self.api_client.client_side_validation
!             and "timeout" in local_var_params
!             and local_var_params["timeout"] < 0
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Invalid value for parameter `timeout` when calling `send_debit_note`, must be a value greater than or equal to `0`"
!             )  # noqa: E501
          collection_formats = {}
  
          path_params = {}
!         if "debit_node_id" in local_var_params:
!             path_params["debitNodeId"] = local_var_params["debit_node_id"]  # noqa: E501
  
          query_params = []
!         if (
!             "timeout" in local_var_params and local_var_params["timeout"] is not None
!         ):  # noqa: E501
!             query_params.append(("timeout", local_var_params["timeout"]))  # noqa: E501
  
          header_params = {}
  
***************
*** 1726,1739 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/provider/debitNotes/{debitNodeId}/send', 'POST',
              path_params,
              query_params,
              header_params,
--- 1888,1903 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/provider/debitNotes/{debitNodeId}/send",
!             "POST",
              path_params,
              query_params,
              header_params,
***************
*** 1742,1752 ****
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def send_invoice(self, invoice_id, **kwargs):  # noqa: E501
          """Send Invoice to Requestor.  # noqa: E501
--- 1906,1919 ----
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def send_invoice(self, invoice_id, **kwargs):  # noqa: E501
          """Send Invoice to Requestor.  # noqa: E501
***************
*** 1771,1777 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
          return self.send_invoice_with_http_info(invoice_id, **kwargs)  # noqa: E501
  
      def send_invoice_with_http_info(self, invoice_id, **kwargs):  # noqa: E501
--- 1938,1944 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
          return self.send_invoice_with_http_info(invoice_id, **kwargs)  # noqa: E501
  
      def send_invoice_with_http_info(self, invoice_id, **kwargs):  # noqa: E501
***************
*** 1802,1844 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'invoice_id',
!             'timeout'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method send_invoice" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'invoice_id' is set
!         if self.api_client.client_side_validation and ('invoice_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['invoice_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `invoice_id` when calling `send_invoice`")  # noqa: E501
! 
!         if self.api_client.client_side_validation and 'timeout' in local_var_params and local_var_params['timeout'] < 0:  # noqa: E501
!             raise ApiValueError("Invalid value for parameter `timeout` when calling `send_invoice`, must be a value greater than or equal to `0`")  # noqa: E501
          collection_formats = {}
  
          path_params = {}
!         if 'invoice_id' in local_var_params:
!             path_params['invoiceId'] = local_var_params['invoice_id']  # noqa: E501
  
          query_params = []
!         if 'timeout' in local_var_params and local_var_params['timeout'] is not None:  # noqa: E501
!             query_params.append(('timeout', local_var_params['timeout']))  # noqa: E501
  
          header_params = {}
  
--- 1969,2020 ----
  
          local_var_params = locals()
  
!         all_params = ["invoice_id", "timeout"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method send_invoice" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'invoice_id' is set
!         if self.api_client.client_side_validation and (
!             "invoice_id" not in local_var_params
!             or local_var_params["invoice_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `invoice_id` when calling `send_invoice`"
!             )  # noqa: E501
! 
!         if (
!             self.api_client.client_side_validation
!             and "timeout" in local_var_params
!             and local_var_params["timeout"] < 0
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Invalid value for parameter `timeout` when calling `send_invoice`, must be a value greater than or equal to `0`"
!             )  # noqa: E501
          collection_formats = {}
  
          path_params = {}
!         if "invoice_id" in local_var_params:
!             path_params["invoiceId"] = local_var_params["invoice_id"]  # noqa: E501
  
          query_params = []
!         if (
!             "timeout" in local_var_params and local_var_params["timeout"] is not None
!         ):  # noqa: E501
!             query_params.append(("timeout", local_var_params["timeout"]))  # noqa: E501
  
          header_params = {}
  
***************
*** 1847,1860 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/provider/invoices/{invoiceId}/send', 'POST',
              path_params,
              query_params,
              header_params,
--- 2023,2038 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/provider/invoices/{invoiceId}/send",
!             "POST",
              path_params,
              query_params,
              header_params,
***************
*** 1863,1870 ****
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
--- 2041,2051 ----
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
diff -r -c target/ya_payment/api/requestor_api.py src/ya_payment/api/requestor_api.py
*** target/ya_payment/api/requestor_api.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_payment/api/requestor_api.py	2020-07-21 16:04:55.000000000 +0200
***************
*** 10,27 ****
  """
  
  
- from __future__ import absolute_import
- 
  import re  # noqa: F401
  
  # python 2 and python 3 compatibility library
! import six
  
  from ya_payment.api_client import ApiClient
! from ya_payment.exceptions import (  # noqa: F401
!     ApiTypeError,
!     ApiValueError
! )
  
  
  class RequestorApi(object):
--- 10,22 ----
  """
  
  
  import re  # noqa: F401
  
  # python 2 and python 3 compatibility library
! 
  
  from ya_payment.api_client import ApiClient
! from ya_payment.exceptions import ApiTypeError, ApiValueError  # noqa: F401
  
  
  class RequestorApi(object):
***************
*** 60,69 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.accept_debit_note_with_http_info(debit_node_id, acceptance, **kwargs)  # noqa: E501
! 
!     def accept_debit_note_with_http_info(self, debit_node_id, acceptance, **kwargs):  # noqa: E501
          """Accept received Debit Note.  # noqa: E501
  
          Send Debit Note Accepted message to Debit Note Issuer. Trigger payment orchestration for this Debit Note (using allocated lot identified by AllocationId if any).  This is a blocking operation. It will not return until the Requestor has acknowledged accepting the Invoice or timeout has passed.  NOTE: An Accepted Debit Note cannot be Rejected later.   # noqa: E501
--- 55,68 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.accept_debit_note_with_http_info(
!             debit_node_id, acceptance, **kwargs
!         )  # noqa: E501
! 
!     def accept_debit_note_with_http_info(
!         self, debit_node_id, acceptance, **kwargs
!     ):  # noqa: E501
          """Accept received Debit Note.  # noqa: E501
  
          Send Debit Note Accepted message to Debit Note Issuer. Trigger payment orchestration for this Debit Note (using allocated lot identified by AllocationId if any).  This is a blocking operation. It will not return until the Requestor has acknowledged accepting the Invoice or timeout has passed.  NOTE: An Accepted Debit Note cannot be Rejected later.   # noqa: E501
***************
*** 92,139 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'debit_node_id',
!             'acceptance',
!             'timeout'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method accept_debit_note" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'debit_node_id' is set
!         if self.api_client.client_side_validation and ('debit_node_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['debit_node_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `debit_node_id` when calling `accept_debit_note`")  # noqa: E501
          # verify the required parameter 'acceptance' is set
!         if self.api_client.client_side_validation and ('acceptance' not in local_var_params or  # noqa: E501
!                                                         local_var_params['acceptance'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `acceptance` when calling `accept_debit_note`")  # noqa: E501
! 
!         if self.api_client.client_side_validation and 'timeout' in local_var_params and local_var_params['timeout'] < 0:  # noqa: E501
!             raise ApiValueError("Invalid value for parameter `timeout` when calling `accept_debit_note`, must be a value greater than or equal to `0`")  # noqa: E501
          collection_formats = {}
  
          path_params = {}
!         if 'debit_node_id' in local_var_params:
!             path_params['debitNodeId'] = local_var_params['debit_node_id']  # noqa: E501
  
          query_params = []
!         if 'timeout' in local_var_params and local_var_params['timeout'] is not None:  # noqa: E501
!             query_params.append(('timeout', local_var_params['timeout']))  # noqa: E501
  
          header_params = {}
  
--- 91,150 ----
  
          local_var_params = locals()
  
!         all_params = ["debit_node_id", "acceptance", "timeout"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method accept_debit_note" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'debit_node_id' is set
!         if self.api_client.client_side_validation and (
!             "debit_node_id" not in local_var_params
!             or local_var_params["debit_node_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `debit_node_id` when calling `accept_debit_note`"
!             )  # noqa: E501
          # verify the required parameter 'acceptance' is set
!         if self.api_client.client_side_validation and (
!             "acceptance" not in local_var_params
!             or local_var_params["acceptance"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `acceptance` when calling `accept_debit_note`"
!             )  # noqa: E501
! 
!         if (
!             self.api_client.client_side_validation
!             and "timeout" in local_var_params
!             and local_var_params["timeout"] < 0
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Invalid value for parameter `timeout` when calling `accept_debit_note`, must be a value greater than or equal to `0`"
!             )  # noqa: E501
          collection_formats = {}
  
          path_params = {}
!         if "debit_node_id" in local_var_params:
!             path_params["debitNodeId"] = local_var_params["debit_node_id"]  # noqa: E501
  
          query_params = []
!         if (
!             "timeout" in local_var_params and local_var_params["timeout"] is not None
!         ):  # noqa: E501
!             query_params.append(("timeout", local_var_params["timeout"]))  # noqa: E501
  
          header_params = {}
  
***************
*** 141,161 ****
          local_var_files = {}
  
          body_params = None
!         if 'acceptance' in local_var_params:
!             body_params = local_var_params['acceptance']
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # HTTP header `Content-Type`
!         header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/requestor/debitNotes/{debitNodeId}/accept', 'POST',
              path_params,
              query_params,
              header_params,
--- 152,177 ----
          local_var_files = {}
  
          body_params = None
!         if "acceptance" in local_var_params:
!             body_params = local_var_params["acceptance"]
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # HTTP header `Content-Type`
!         header_params[
!             "Content-Type"
!         ] = self.api_client.select_header_content_type(  # noqa: E501
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/requestor/debitNotes/{debitNodeId}/accept",
!             "POST",
              path_params,
              query_params,
              header_params,
***************
*** 164,174 ****
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def accept_invoice(self, invoice_id, acceptance, **kwargs):  # noqa: E501
          """Accept received Invoice.  # noqa: E501
--- 180,193 ----
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def accept_invoice(self, invoice_id, acceptance, **kwargs):  # noqa: E501
          """Accept received Invoice.  # noqa: E501
***************
*** 194,203 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.accept_invoice_with_http_info(invoice_id, acceptance, **kwargs)  # noqa: E501
! 
!     def accept_invoice_with_http_info(self, invoice_id, acceptance, **kwargs):  # noqa: E501
          """Accept received Invoice.  # noqa: E501
  
          Send Invoice Accepted message to Invoice Issuer. Trigger payment orchestration for this Invoice (using allocated lot identified by AllocationId if any).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: An Accepted Invoice cannot be Rejected later.   # noqa: E501
--- 213,226 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.accept_invoice_with_http_info(
!             invoice_id, acceptance, **kwargs
!         )  # noqa: E501
! 
!     def accept_invoice_with_http_info(
!         self, invoice_id, acceptance, **kwargs
!     ):  # noqa: E501
          """Accept received Invoice.  # noqa: E501
  
          Send Invoice Accepted message to Invoice Issuer. Trigger payment orchestration for this Invoice (using allocated lot identified by AllocationId if any).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: An Accepted Invoice cannot be Rejected later.   # noqa: E501
***************
*** 226,273 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'invoice_id',
!             'acceptance',
!             'timeout'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method accept_invoice" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'invoice_id' is set
!         if self.api_client.client_side_validation and ('invoice_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['invoice_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `invoice_id` when calling `accept_invoice`")  # noqa: E501
          # verify the required parameter 'acceptance' is set
!         if self.api_client.client_side_validation and ('acceptance' not in local_var_params or  # noqa: E501
!                                                         local_var_params['acceptance'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `acceptance` when calling `accept_invoice`")  # noqa: E501
! 
!         if self.api_client.client_side_validation and 'timeout' in local_var_params and local_var_params['timeout'] < 0:  # noqa: E501
!             raise ApiValueError("Invalid value for parameter `timeout` when calling `accept_invoice`, must be a value greater than or equal to `0`")  # noqa: E501
          collection_formats = {}
  
          path_params = {}
!         if 'invoice_id' in local_var_params:
!             path_params['invoiceId'] = local_var_params['invoice_id']  # noqa: E501
  
          query_params = []
!         if 'timeout' in local_var_params and local_var_params['timeout'] is not None:  # noqa: E501
!             query_params.append(('timeout', local_var_params['timeout']))  # noqa: E501
  
          header_params = {}
  
--- 249,308 ----
  
          local_var_params = locals()
  
!         all_params = ["invoice_id", "acceptance", "timeout"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method accept_invoice" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'invoice_id' is set
!         if self.api_client.client_side_validation and (
!             "invoice_id" not in local_var_params
!             or local_var_params["invoice_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `invoice_id` when calling `accept_invoice`"
!             )  # noqa: E501
          # verify the required parameter 'acceptance' is set
!         if self.api_client.client_side_validation and (
!             "acceptance" not in local_var_params
!             or local_var_params["acceptance"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `acceptance` when calling `accept_invoice`"
!             )  # noqa: E501
! 
!         if (
!             self.api_client.client_side_validation
!             and "timeout" in local_var_params
!             and local_var_params["timeout"] < 0
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Invalid value for parameter `timeout` when calling `accept_invoice`, must be a value greater than or equal to `0`"
!             )  # noqa: E501
          collection_formats = {}
  
          path_params = {}
!         if "invoice_id" in local_var_params:
!             path_params["invoiceId"] = local_var_params["invoice_id"]  # noqa: E501
  
          query_params = []
!         if (
!             "timeout" in local_var_params and local_var_params["timeout"] is not None
!         ):  # noqa: E501
!             query_params.append(("timeout", local_var_params["timeout"]))  # noqa: E501
  
          header_params = {}
  
***************
*** 275,295 ****
          local_var_files = {}
  
          body_params = None
!         if 'acceptance' in local_var_params:
!             body_params = local_var_params['acceptance']
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # HTTP header `Content-Type`
!         header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/requestor/invoices/{invoiceId}/accept', 'POST',
              path_params,
              query_params,
              header_params,
--- 310,335 ----
          local_var_files = {}
  
          body_params = None
!         if "acceptance" in local_var_params:
!             body_params = local_var_params["acceptance"]
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # HTTP header `Content-Type`
!         header_params[
!             "Content-Type"
!         ] = self.api_client.select_header_content_type(  # noqa: E501
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/requestor/invoices/{invoiceId}/accept",
!             "POST",
              path_params,
              query_params,
              header_params,
***************
*** 298,308 ****
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def amend_allocation(self, allocation_id, allocation, **kwargs):  # noqa: E501
          """Amend Allocation.  # noqa: E501
--- 338,351 ----
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def amend_allocation(self, allocation_id, allocation, **kwargs):  # noqa: E501
          """Amend Allocation.  # noqa: E501
***************
*** 326,335 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.amend_allocation_with_http_info(allocation_id, allocation, **kwargs)  # noqa: E501
! 
!     def amend_allocation_with_http_info(self, allocation_id, allocation, **kwargs):  # noqa: E501
          """Amend Allocation.  # noqa: E501
  
          This method makes a synchronous HTTP request by default. To make an
--- 369,382 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.amend_allocation_with_http_info(
!             allocation_id, allocation, **kwargs
!         )  # noqa: E501
! 
!     def amend_allocation_with_http_info(
!         self, allocation_id, allocation, **kwargs
!     ):  # noqa: E501
          """Amend Allocation.  # noqa: E501
  
          This method makes a synchronous HTTP request by default. To make an
***************
*** 356,396 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'allocation_id',
!             'allocation'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method amend_allocation" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'allocation_id' is set
!         if self.api_client.client_side_validation and ('allocation_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['allocation_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `allocation_id` when calling `amend_allocation`")  # noqa: E501
          # verify the required parameter 'allocation' is set
!         if self.api_client.client_side_validation and ('allocation' not in local_var_params or  # noqa: E501
!                                                         local_var_params['allocation'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `allocation` when calling `amend_allocation`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'allocation_id' in local_var_params:
!             path_params['allocationId'] = local_var_params['allocation_id']  # noqa: E501
  
          query_params = []
  
--- 403,450 ----
  
          local_var_params = locals()
  
!         all_params = ["allocation_id", "allocation"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method amend_allocation" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'allocation_id' is set
!         if self.api_client.client_side_validation and (
!             "allocation_id" not in local_var_params
!             or local_var_params["allocation_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `allocation_id` when calling `amend_allocation`"
!             )  # noqa: E501
          # verify the required parameter 'allocation' is set
!         if self.api_client.client_side_validation and (
!             "allocation" not in local_var_params
!             or local_var_params["allocation"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `allocation` when calling `amend_allocation`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "allocation_id" in local_var_params:
!             path_params["allocationId"] = local_var_params[
!                 "allocation_id"
!             ]  # noqa: E501
  
          query_params = []
  
***************
*** 400,433 ****
          local_var_files = {}
  
          body_params = None
!         if 'allocation' in local_var_params:
!             body_params = local_var_params['allocation']
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # HTTP header `Content-Type`
!         header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/requestor/allocations/{allocationId}', 'PUT',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='Allocation',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def create_allocation(self, allocation, **kwargs):  # noqa: E501
          """Create Allocation.  # noqa: E501
--- 454,495 ----
          local_var_files = {}
  
          body_params = None
!         if "allocation" in local_var_params:
!             body_params = local_var_params["allocation"]
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # HTTP header `Content-Type`
!         header_params[
!             "Content-Type"
!         ] = self.api_client.select_header_content_type(  # noqa: E501
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/requestor/allocations/{allocationId}",
!             "PUT",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="Allocation",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def create_allocation(self, allocation, **kwargs):  # noqa: E501
          """Create Allocation.  # noqa: E501
***************
*** 451,457 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
          return self.create_allocation_with_http_info(allocation, **kwargs)  # noqa: E501
  
      def create_allocation_with_http_info(self, allocation, **kwargs):  # noqa: E501
--- 513,519 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
          return self.create_allocation_with_http_info(allocation, **kwargs)  # noqa: E501
  
      def create_allocation_with_http_info(self, allocation, **kwargs):  # noqa: E501
***************
*** 481,510 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'allocation'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method create_allocation" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'allocation' is set
!         if self.api_client.client_side_validation and ('allocation' not in local_var_params or  # noqa: E501
!                                                         local_var_params['allocation'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `allocation` when calling `create_allocation`")  # noqa: E501
  
          collection_formats = {}
  
--- 543,574 ----
  
          local_var_params = locals()
  
!         all_params = ["allocation"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method create_allocation" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'allocation' is set
!         if self.api_client.client_side_validation and (
!             "allocation" not in local_var_params
!             or local_var_params["allocation"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `allocation` when calling `create_allocation`"
!             )  # noqa: E501
  
          collection_formats = {}
  
***************
*** 518,551 ****
          local_var_files = {}
  
          body_params = None
!         if 'allocation' in local_var_params:
!             body_params = local_var_params['allocation']
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # HTTP header `Content-Type`
!         header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/requestor/allocations', 'POST',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='Allocation',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_allocation(self, allocation_id, **kwargs):  # noqa: E501
          """Get Allocation.  # noqa: E501
--- 582,623 ----
          local_var_files = {}
  
          body_params = None
!         if "allocation" in local_var_params:
!             body_params = local_var_params["allocation"]
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # HTTP header `Content-Type`
!         header_params[
!             "Content-Type"
!         ] = self.api_client.select_header_content_type(  # noqa: E501
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/requestor/allocations",
!             "POST",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="Allocation",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_allocation(self, allocation_id, **kwargs):  # noqa: E501
          """Get Allocation.  # noqa: E501
***************
*** 568,574 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
          return self.get_allocation_with_http_info(allocation_id, **kwargs)  # noqa: E501
  
      def get_allocation_with_http_info(self, allocation_id, **kwargs):  # noqa: E501
--- 640,646 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
          return self.get_allocation_with_http_info(allocation_id, **kwargs)  # noqa: E501
  
      def get_allocation_with_http_info(self, allocation_id, **kwargs):  # noqa: E501
***************
*** 597,632 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'allocation_id'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_allocation" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'allocation_id' is set
!         if self.api_client.client_side_validation and ('allocation_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['allocation_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `allocation_id` when calling `get_allocation`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'allocation_id' in local_var_params:
!             path_params['allocationId'] = local_var_params['allocation_id']  # noqa: E501
  
          query_params = []
  
--- 669,708 ----
  
          local_var_params = locals()
  
!         all_params = ["allocation_id"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_allocation" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'allocation_id' is set
!         if self.api_client.client_side_validation and (
!             "allocation_id" not in local_var_params
!             or local_var_params["allocation_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `allocation_id` when calling `get_allocation`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "allocation_id" in local_var_params:
!             path_params["allocationId"] = local_var_params[
!                 "allocation_id"
!             ]  # noqa: E501
  
          query_params = []
  
***************
*** 637,663 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/requestor/allocations/{allocationId}', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='Allocation',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_allocations(self, **kwargs):  # noqa: E501
          """Get Allocations.  # noqa: E501
--- 713,744 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/requestor/allocations/{allocationId}",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="Allocation",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_allocations(self, **kwargs):  # noqa: E501
          """Get Allocations.  # noqa: E501
***************
*** 679,685 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
          return self.get_allocations_with_http_info(**kwargs)  # noqa: E501
  
      def get_allocations_with_http_info(self, **kwargs):  # noqa: E501
--- 760,766 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
          return self.get_allocations_with_http_info(**kwargs)  # noqa: E501
  
      def get_allocations_with_http_info(self, **kwargs):  # noqa: E501
***************
*** 707,731 ****
  
          local_var_params = locals()
  
!         all_params = [
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_allocations" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
  
          collection_formats = {}
  
--- 788,811 ----
  
          local_var_params = locals()
  
!         all_params = []
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_allocations" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
  
          collection_formats = {}
  
***************
*** 740,766 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/requestor/allocations', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='list[Allocation]',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_outgoing_payment(self, payment_id, **kwargs):  # noqa: E501
          """Get outgoing Payment.  # noqa: E501
--- 820,851 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/requestor/allocations",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="list[Allocation]",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_outgoing_payment(self, payment_id, **kwargs):  # noqa: E501
          """Get outgoing Payment.  # noqa: E501
***************
*** 783,790 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.get_outgoing_payment_with_http_info(payment_id, **kwargs)  # noqa: E501
  
      def get_outgoing_payment_with_http_info(self, payment_id, **kwargs):  # noqa: E501
          """Get outgoing Payment.  # noqa: E501
--- 868,877 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.get_outgoing_payment_with_http_info(
!             payment_id, **kwargs
!         )  # noqa: E501
  
      def get_outgoing_payment_with_http_info(self, payment_id, **kwargs):  # noqa: E501
          """Get outgoing Payment.  # noqa: E501
***************
*** 812,847 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'payment_id'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_outgoing_payment" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'payment_id' is set
!         if self.api_client.client_side_validation and ('payment_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['payment_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `payment_id` when calling `get_outgoing_payment`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'payment_id' in local_var_params:
!             path_params['paymentId'] = local_var_params['payment_id']  # noqa: E501
  
          query_params = []
  
--- 899,936 ----
  
          local_var_params = locals()
  
!         all_params = ["payment_id"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_outgoing_payment" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'payment_id' is set
!         if self.api_client.client_side_validation and (
!             "payment_id" not in local_var_params
!             or local_var_params["payment_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `payment_id` when calling `get_outgoing_payment`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "payment_id" in local_var_params:
!             path_params["paymentId"] = local_var_params["payment_id"]  # noqa: E501
  
          query_params = []
  
***************
*** 852,878 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/requestor/payments/{paymentId}', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='Allocation',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_outgoing_payments(self, **kwargs):  # noqa: E501
          """Get outgoing Payments.  # noqa: E501
--- 941,972 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/requestor/payments/{paymentId}",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="Allocation",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_outgoing_payments(self, **kwargs):  # noqa: E501
          """Get outgoing Payments.  # noqa: E501
***************
*** 897,903 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
          return self.get_outgoing_payments_with_http_info(**kwargs)  # noqa: E501
  
      def get_outgoing_payments_with_http_info(self, **kwargs):  # noqa: E501
--- 991,997 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
          return self.get_outgoing_payments_with_http_info(**kwargs)  # noqa: E501
  
      def get_outgoing_payments_with_http_info(self, **kwargs):  # noqa: E501
***************
*** 928,966 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'timeout',
!             'later_than'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_outgoing_payments" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
  
!         if self.api_client.client_side_validation and 'timeout' in local_var_params and local_var_params['timeout'] < 0:  # noqa: E501
!             raise ApiValueError("Invalid value for parameter `timeout` when calling `get_outgoing_payments`, must be a value greater than or equal to `0`")  # noqa: E501
          collection_formats = {}
  
          path_params = {}
  
          query_params = []
!         if 'timeout' in local_var_params and local_var_params['timeout'] is not None:  # noqa: E501
!             query_params.append(('timeout', local_var_params['timeout']))  # noqa: E501
!         if 'later_than' in local_var_params and local_var_params['later_than'] is not None:  # noqa: E501
!             query_params.append(('laterThan', local_var_params['later_than']))  # noqa: E501
  
          header_params = {}
  
--- 1022,1070 ----
  
          local_var_params = locals()
  
!         all_params = ["timeout", "later_than"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_outgoing_payments" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
  
!         if (
!             self.api_client.client_side_validation
!             and "timeout" in local_var_params
!             and local_var_params["timeout"] < 0
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Invalid value for parameter `timeout` when calling `get_outgoing_payments`, must be a value greater than or equal to `0`"
!             )  # noqa: E501
          collection_formats = {}
  
          path_params = {}
  
          query_params = []
!         if (
!             "timeout" in local_var_params and local_var_params["timeout"] is not None
!         ):  # noqa: E501
!             query_params.append(("timeout", local_var_params["timeout"]))  # noqa: E501
!         if (
!             "later_than" in local_var_params
!             and local_var_params["later_than"] is not None
!         ):  # noqa: E501
!             query_params.append(
!                 ("laterThan", local_var_params["later_than"])
!             )  # noqa: E501
  
          header_params = {}
  
***************
*** 969,997 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/requestor/payments', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='list[Payment]',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
!     def get_payments_for_received_debit_note(self, debit_node_id, **kwargs):  # noqa: E501
          """Get Payments for Debit Note.  # noqa: E501
  
          This method makes a synchronous HTTP request by default. To make an
--- 1073,1108 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/requestor/payments",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="list[Payment]",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
!     def get_payments_for_received_debit_note(
!         self, debit_node_id, **kwargs
!     ):  # noqa: E501
          """Get Payments for Debit Note.  # noqa: E501
  
          This method makes a synchronous HTTP request by default. To make an
***************
*** 1012,1021 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.get_payments_for_received_debit_note_with_http_info(debit_node_id, **kwargs)  # noqa: E501
! 
!     def get_payments_for_received_debit_note_with_http_info(self, debit_node_id, **kwargs):  # noqa: E501
          """Get Payments for Debit Note.  # noqa: E501
  
          This method makes a synchronous HTTP request by default. To make an
--- 1123,1136 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.get_payments_for_received_debit_note_with_http_info(
!             debit_node_id, **kwargs
!         )  # noqa: E501
! 
!     def get_payments_for_received_debit_note_with_http_info(
!         self, debit_node_id, **kwargs
!     ):  # noqa: E501
          """Get Payments for Debit Note.  # noqa: E501
  
          This method makes a synchronous HTTP request by default. To make an
***************
*** 1041,1076 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'debit_node_id'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_payments_for_received_debit_note" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'debit_node_id' is set
!         if self.api_client.client_side_validation and ('debit_node_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['debit_node_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `debit_node_id` when calling `get_payments_for_received_debit_note`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'debit_node_id' in local_var_params:
!             path_params['debitNodeId'] = local_var_params['debit_node_id']  # noqa: E501
  
          query_params = []
  
--- 1156,1193 ----
  
          local_var_params = locals()
  
!         all_params = ["debit_node_id"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_payments_for_received_debit_note" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'debit_node_id' is set
!         if self.api_client.client_side_validation and (
!             "debit_node_id" not in local_var_params
!             or local_var_params["debit_node_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `debit_node_id` when calling `get_payments_for_received_debit_note`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "debit_node_id" in local_var_params:
!             path_params["debitNodeId"] = local_var_params["debit_node_id"]  # noqa: E501
  
          query_params = []
  
***************
*** 1081,1107 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/requestor/debitNotes/{debitNodeId}/payments', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='list[Payment]',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_payments_for_received_invoice(self, invoice_id, **kwargs):  # noqa: E501
          """Get Payments for received Invoice.  # noqa: E501
--- 1198,1229 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/requestor/debitNotes/{debitNodeId}/payments",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="list[Payment]",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_payments_for_received_invoice(self, invoice_id, **kwargs):  # noqa: E501
          """Get Payments for received Invoice.  # noqa: E501
***************
*** 1124,1133 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.get_payments_for_received_invoice_with_http_info(invoice_id, **kwargs)  # noqa: E501
! 
!     def get_payments_for_received_invoice_with_http_info(self, invoice_id, **kwargs):  # noqa: E501
          """Get Payments for received Invoice.  # noqa: E501
  
          This method makes a synchronous HTTP request by default. To make an
--- 1246,1259 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.get_payments_for_received_invoice_with_http_info(
!             invoice_id, **kwargs
!         )  # noqa: E501
! 
!     def get_payments_for_received_invoice_with_http_info(
!         self, invoice_id, **kwargs
!     ):  # noqa: E501
          """Get Payments for received Invoice.  # noqa: E501
  
          This method makes a synchronous HTTP request by default. To make an
***************
*** 1153,1188 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'invoice_id'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_payments_for_received_invoice" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'invoice_id' is set
!         if self.api_client.client_side_validation and ('invoice_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['invoice_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `invoice_id` when calling `get_payments_for_received_invoice`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'invoice_id' in local_var_params:
!             path_params['invoiceId'] = local_var_params['invoice_id']  # noqa: E501
  
          query_params = []
  
--- 1279,1316 ----
  
          local_var_params = locals()
  
!         all_params = ["invoice_id"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_payments_for_received_invoice" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'invoice_id' is set
!         if self.api_client.client_side_validation and (
!             "invoice_id" not in local_var_params
!             or local_var_params["invoice_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `invoice_id` when calling `get_payments_for_received_invoice`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "invoice_id" in local_var_params:
!             path_params["invoiceId"] = local_var_params["invoice_id"]  # noqa: E501
  
          query_params = []
  
***************
*** 1193,1219 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/requestor/invoices/{invoiceId}/payments', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='list[Payment]',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_received_debit_note(self, debit_node_id, **kwargs):  # noqa: E501
          """Get Debit Note.  # noqa: E501
--- 1321,1352 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/requestor/invoices/{invoiceId}/payments",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="list[Payment]",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_received_debit_note(self, debit_node_id, **kwargs):  # noqa: E501
          """Get Debit Note.  # noqa: E501
***************
*** 1236,1245 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.get_received_debit_note_with_http_info(debit_node_id, **kwargs)  # noqa: E501
! 
!     def get_received_debit_note_with_http_info(self, debit_node_id, **kwargs):  # noqa: E501
          """Get Debit Note.  # noqa: E501
  
          This method makes a synchronous HTTP request by default. To make an
--- 1369,1382 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.get_received_debit_note_with_http_info(
!             debit_node_id, **kwargs
!         )  # noqa: E501
! 
!     def get_received_debit_note_with_http_info(
!         self, debit_node_id, **kwargs
!     ):  # noqa: E501
          """Get Debit Note.  # noqa: E501
  
          This method makes a synchronous HTTP request by default. To make an
***************
*** 1265,1300 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'debit_node_id'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_received_debit_note" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'debit_node_id' is set
!         if self.api_client.client_side_validation and ('debit_node_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['debit_node_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `debit_node_id` when calling `get_received_debit_note`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'debit_node_id' in local_var_params:
!             path_params['debitNodeId'] = local_var_params['debit_node_id']  # noqa: E501
  
          query_params = []
  
--- 1402,1439 ----
  
          local_var_params = locals()
  
!         all_params = ["debit_node_id"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_received_debit_note" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'debit_node_id' is set
!         if self.api_client.client_side_validation and (
!             "debit_node_id" not in local_var_params
!             or local_var_params["debit_node_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `debit_node_id` when calling `get_received_debit_note`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "debit_node_id" in local_var_params:
!             path_params["debitNodeId"] = local_var_params["debit_node_id"]  # noqa: E501
  
          query_params = []
  
***************
*** 1305,1331 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/requestor/debitNotes/{debitNodeId}', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='DebitNote',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_received_debit_notes(self, **kwargs):  # noqa: E501
          """Get Debit Notes received by this Requestor.  # noqa: E501
--- 1444,1475 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/requestor/debitNotes/{debitNodeId}",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="DebitNote",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_received_debit_notes(self, **kwargs):  # noqa: E501
          """Get Debit Notes received by this Requestor.  # noqa: E501
***************
*** 1347,1353 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
          return self.get_received_debit_notes_with_http_info(**kwargs)  # noqa: E501
  
      def get_received_debit_notes_with_http_info(self, **kwargs):  # noqa: E501
--- 1491,1497 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
          return self.get_received_debit_notes_with_http_info(**kwargs)  # noqa: E501
  
      def get_received_debit_notes_with_http_info(self, **kwargs):  # noqa: E501
***************
*** 1375,1399 ****
  
          local_var_params = locals()
  
!         all_params = [
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_received_debit_notes" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
  
          collection_formats = {}
  
--- 1519,1542 ----
  
          local_var_params = locals()
  
!         all_params = []
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_received_debit_notes" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
  
          collection_formats = {}
  
***************
*** 1408,1434 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/requestor/debitNotes', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='list[DebitNote]',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_received_invoice(self, invoice_id, **kwargs):  # noqa: E501
          """Get Invoice.  # noqa: E501
--- 1551,1582 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/requestor/debitNotes",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="list[DebitNote]",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_received_invoice(self, invoice_id, **kwargs):  # noqa: E501
          """Get Invoice.  # noqa: E501
***************
*** 1451,1458 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.get_received_invoice_with_http_info(invoice_id, **kwargs)  # noqa: E501
  
      def get_received_invoice_with_http_info(self, invoice_id, **kwargs):  # noqa: E501
          """Get Invoice.  # noqa: E501
--- 1599,1608 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.get_received_invoice_with_http_info(
!             invoice_id, **kwargs
!         )  # noqa: E501
  
      def get_received_invoice_with_http_info(self, invoice_id, **kwargs):  # noqa: E501
          """Get Invoice.  # noqa: E501
***************
*** 1480,1515 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'invoice_id'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_received_invoice" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'invoice_id' is set
!         if self.api_client.client_side_validation and ('invoice_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['invoice_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `invoice_id` when calling `get_received_invoice`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'invoice_id' in local_var_params:
!             path_params['invoiceId'] = local_var_params['invoice_id']  # noqa: E501
  
          query_params = []
  
--- 1630,1667 ----
  
          local_var_params = locals()
  
!         all_params = ["invoice_id"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_received_invoice" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'invoice_id' is set
!         if self.api_client.client_side_validation and (
!             "invoice_id" not in local_var_params
!             or local_var_params["invoice_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `invoice_id` when calling `get_received_invoice`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "invoice_id" in local_var_params:
!             path_params["invoiceId"] = local_var_params["invoice_id"]  # noqa: E501
  
          query_params = []
  
***************
*** 1520,1546 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/requestor/invoices/{invoiceId}', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='Invoice',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_received_invoices(self, **kwargs):  # noqa: E501
          """Get Invoices received by this Requestor.  # noqa: E501
--- 1672,1703 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/requestor/invoices/{invoiceId}",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="Invoice",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_received_invoices(self, **kwargs):  # noqa: E501
          """Get Invoices received by this Requestor.  # noqa: E501
***************
*** 1562,1568 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
          return self.get_received_invoices_with_http_info(**kwargs)  # noqa: E501
  
      def get_received_invoices_with_http_info(self, **kwargs):  # noqa: E501
--- 1719,1725 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
          return self.get_received_invoices_with_http_info(**kwargs)  # noqa: E501
  
      def get_received_invoices_with_http_info(self, **kwargs):  # noqa: E501
***************
*** 1590,1614 ****
  
          local_var_params = locals()
  
!         all_params = [
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_received_invoices" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
  
          collection_formats = {}
  
--- 1747,1770 ----
  
          local_var_params = locals()
  
!         all_params = []
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_received_invoices" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
  
          collection_formats = {}
  
***************
*** 1623,1649 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/requestor/invoices', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='list[Invoice]',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_requestor_debit_note_events(self, **kwargs):  # noqa: E501
          """Get Debit Note events.  # noqa: E501
--- 1779,1810 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/requestor/invoices",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="list[Invoice]",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_requestor_debit_note_events(self, **kwargs):  # noqa: E501
          """Get Debit Note events.  # noqa: E501
***************
*** 1668,1675 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.get_requestor_debit_note_events_with_http_info(**kwargs)  # noqa: E501
  
      def get_requestor_debit_note_events_with_http_info(self, **kwargs):  # noqa: E501
          """Get Debit Note events.  # noqa: E501
--- 1829,1838 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.get_requestor_debit_note_events_with_http_info(
!             **kwargs
!         )  # noqa: E501
  
      def get_requestor_debit_note_events_with_http_info(self, **kwargs):  # noqa: E501
          """Get Debit Note events.  # noqa: E501
***************
*** 1699,1737 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'timeout',
!             'later_than'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_requestor_debit_note_events" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
  
!         if self.api_client.client_side_validation and 'timeout' in local_var_params and local_var_params['timeout'] < 0:  # noqa: E501
!             raise ApiValueError("Invalid value for parameter `timeout` when calling `get_requestor_debit_note_events`, must be a value greater than or equal to `0`")  # noqa: E501
          collection_formats = {}
  
          path_params = {}
  
          query_params = []
!         if 'timeout' in local_var_params and local_var_params['timeout'] is not None:  # noqa: E501
!             query_params.append(('timeout', local_var_params['timeout']))  # noqa: E501
!         if 'later_than' in local_var_params and local_var_params['later_than'] is not None:  # noqa: E501
!             query_params.append(('laterThan', local_var_params['later_than']))  # noqa: E501
  
          header_params = {}
  
--- 1862,1910 ----
  
          local_var_params = locals()
  
!         all_params = ["timeout", "later_than"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_requestor_debit_note_events" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
  
!         if (
!             self.api_client.client_side_validation
!             and "timeout" in local_var_params
!             and local_var_params["timeout"] < 0
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Invalid value for parameter `timeout` when calling `get_requestor_debit_note_events`, must be a value greater than or equal to `0`"
!             )  # noqa: E501
          collection_formats = {}
  
          path_params = {}
  
          query_params = []
!         if (
!             "timeout" in local_var_params and local_var_params["timeout"] is not None
!         ):  # noqa: E501
!             query_params.append(("timeout", local_var_params["timeout"]))  # noqa: E501
!         if (
!             "later_than" in local_var_params
!             and local_var_params["later_than"] is not None
!         ):  # noqa: E501
!             query_params.append(
!                 ("laterThan", local_var_params["later_than"])
!             )  # noqa: E501
  
          header_params = {}
  
***************
*** 1740,1766 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/requestor/debitNoteEvents', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='list[DebitNoteEvent]',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_requestor_invoice_events(self, **kwargs):  # noqa: E501
          """Get Invoice events.  # noqa: E501
--- 1913,1944 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/requestor/debitNoteEvents",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="list[DebitNoteEvent]",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_requestor_invoice_events(self, **kwargs):  # noqa: E501
          """Get Invoice events.  # noqa: E501
***************
*** 1785,1791 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
          return self.get_requestor_invoice_events_with_http_info(**kwargs)  # noqa: E501
  
      def get_requestor_invoice_events_with_http_info(self, **kwargs):  # noqa: E501
--- 1963,1969 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
          return self.get_requestor_invoice_events_with_http_info(**kwargs)  # noqa: E501
  
      def get_requestor_invoice_events_with_http_info(self, **kwargs):  # noqa: E501
***************
*** 1816,1854 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'timeout',
!             'later_than'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_requestor_invoice_events" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
  
!         if self.api_client.client_side_validation and 'timeout' in local_var_params and local_var_params['timeout'] < 0:  # noqa: E501
!             raise ApiValueError("Invalid value for parameter `timeout` when calling `get_requestor_invoice_events`, must be a value greater than or equal to `0`")  # noqa: E501
          collection_formats = {}
  
          path_params = {}
  
          query_params = []
!         if 'timeout' in local_var_params and local_var_params['timeout'] is not None:  # noqa: E501
!             query_params.append(('timeout', local_var_params['timeout']))  # noqa: E501
!         if 'later_than' in local_var_params and local_var_params['later_than'] is not None:  # noqa: E501
!             query_params.append(('laterThan', local_var_params['later_than']))  # noqa: E501
  
          header_params = {}
  
--- 1994,2042 ----
  
          local_var_params = locals()
  
!         all_params = ["timeout", "later_than"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_requestor_invoice_events" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
  
!         if (
!             self.api_client.client_side_validation
!             and "timeout" in local_var_params
!             and local_var_params["timeout"] < 0
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Invalid value for parameter `timeout` when calling `get_requestor_invoice_events`, must be a value greater than or equal to `0`"
!             )  # noqa: E501
          collection_formats = {}
  
          path_params = {}
  
          query_params = []
!         if (
!             "timeout" in local_var_params and local_var_params["timeout"] is not None
!         ):  # noqa: E501
!             query_params.append(("timeout", local_var_params["timeout"]))  # noqa: E501
!         if (
!             "later_than" in local_var_params
!             and local_var_params["later_than"] is not None
!         ):  # noqa: E501
!             query_params.append(
!                 ("laterThan", local_var_params["later_than"])
!             )  # noqa: E501
  
          header_params = {}
  
***************
*** 1857,1883 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/requestor/invoiceEvents', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='list[InvoiceEvent]',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def reject_debit_note(self, debit_node_id, rejection, **kwargs):  # noqa: E501
          """Reject received Debit Note.  # noqa: E501
--- 2045,2076 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/requestor/invoiceEvents",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="list[InvoiceEvent]",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def reject_debit_note(self, debit_node_id, rejection, **kwargs):  # noqa: E501
          """Reject received Debit Note.  # noqa: E501
***************
*** 1903,1912 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.reject_debit_note_with_http_info(debit_node_id, rejection, **kwargs)  # noqa: E501
! 
!     def reject_debit_note_with_http_info(self, debit_node_id, rejection, **kwargs):  # noqa: E501
          """Reject received Debit Note.  # noqa: E501
  
          Send Debit Note Rejected message to Invoice Issuer. Notification of rejection is signalling that Requestor does not accept the Debit Note (for some reason).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: A Rejected Debit Note can be Accepted subsequently (e.g. as a result of some arbitrage).   # noqa: E501
--- 2096,2109 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.reject_debit_note_with_http_info(
!             debit_node_id, rejection, **kwargs
!         )  # noqa: E501
! 
!     def reject_debit_note_with_http_info(
!         self, debit_node_id, rejection, **kwargs
!     ):  # noqa: E501
          """Reject received Debit Note.  # noqa: E501
  
          Send Debit Note Rejected message to Invoice Issuer. Notification of rejection is signalling that Requestor does not accept the Debit Note (for some reason).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: A Rejected Debit Note can be Accepted subsequently (e.g. as a result of some arbitrage).   # noqa: E501
***************
*** 1935,1982 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'debit_node_id',
!             'rejection',
!             'timeout'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method reject_debit_note" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'debit_node_id' is set
!         if self.api_client.client_side_validation and ('debit_node_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['debit_node_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `debit_node_id` when calling `reject_debit_note`")  # noqa: E501
          # verify the required parameter 'rejection' is set
!         if self.api_client.client_side_validation and ('rejection' not in local_var_params or  # noqa: E501
!                                                         local_var_params['rejection'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `rejection` when calling `reject_debit_note`")  # noqa: E501
! 
!         if self.api_client.client_side_validation and 'timeout' in local_var_params and local_var_params['timeout'] < 0:  # noqa: E501
!             raise ApiValueError("Invalid value for parameter `timeout` when calling `reject_debit_note`, must be a value greater than or equal to `0`")  # noqa: E501
          collection_formats = {}
  
          path_params = {}
!         if 'debit_node_id' in local_var_params:
!             path_params['debitNodeId'] = local_var_params['debit_node_id']  # noqa: E501
  
          query_params = []
!         if 'timeout' in local_var_params and local_var_params['timeout'] is not None:  # noqa: E501
!             query_params.append(('timeout', local_var_params['timeout']))  # noqa: E501
  
          header_params = {}
  
--- 2132,2191 ----
  
          local_var_params = locals()
  
!         all_params = ["debit_node_id", "rejection", "timeout"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method reject_debit_note" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'debit_node_id' is set
!         if self.api_client.client_side_validation and (
!             "debit_node_id" not in local_var_params
!             or local_var_params["debit_node_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `debit_node_id` when calling `reject_debit_note`"
!             )  # noqa: E501
          # verify the required parameter 'rejection' is set
!         if self.api_client.client_side_validation and (
!             "rejection" not in local_var_params
!             or local_var_params["rejection"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `rejection` when calling `reject_debit_note`"
!             )  # noqa: E501
! 
!         if (
!             self.api_client.client_side_validation
!             and "timeout" in local_var_params
!             and local_var_params["timeout"] < 0
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Invalid value for parameter `timeout` when calling `reject_debit_note`, must be a value greater than or equal to `0`"
!             )  # noqa: E501
          collection_formats = {}
  
          path_params = {}
!         if "debit_node_id" in local_var_params:
!             path_params["debitNodeId"] = local_var_params["debit_node_id"]  # noqa: E501
  
          query_params = []
!         if (
!             "timeout" in local_var_params and local_var_params["timeout"] is not None
!         ):  # noqa: E501
!             query_params.append(("timeout", local_var_params["timeout"]))  # noqa: E501
  
          header_params = {}
  
***************
*** 1984,2004 ****
          local_var_files = {}
  
          body_params = None
!         if 'rejection' in local_var_params:
!             body_params = local_var_params['rejection']
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # HTTP header `Content-Type`
!         header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/requestor/debitNotes/{debitNodeId}/reject', 'POST',
              path_params,
              query_params,
              header_params,
--- 2193,2218 ----
          local_var_files = {}
  
          body_params = None
!         if "rejection" in local_var_params:
!             body_params = local_var_params["rejection"]
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # HTTP header `Content-Type`
!         header_params[
!             "Content-Type"
!         ] = self.api_client.select_header_content_type(  # noqa: E501
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/requestor/debitNotes/{debitNodeId}/reject",
!             "POST",
              path_params,
              query_params,
              header_params,
***************
*** 2007,2017 ****
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def reject_invoice(self, invoice_id, rejection, **kwargs):  # noqa: E501
          """Reject received Invoice.  # noqa: E501
--- 2221,2234 ----
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def reject_invoice(self, invoice_id, rejection, **kwargs):  # noqa: E501
          """Reject received Invoice.  # noqa: E501
***************
*** 2037,2046 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.reject_invoice_with_http_info(invoice_id, rejection, **kwargs)  # noqa: E501
! 
!     def reject_invoice_with_http_info(self, invoice_id, rejection, **kwargs):  # noqa: E501
          """Reject received Invoice.  # noqa: E501
  
          Send Invoice Rejected message to Invoice Issuer. Notification of rejection is signalling that Requestor does not accept Invoice (for some reason).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: A Rejected Invoice can be Accepted subsequently (e.g. as a result of some arbitrage).   # noqa: E501
--- 2254,2267 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.reject_invoice_with_http_info(
!             invoice_id, rejection, **kwargs
!         )  # noqa: E501
! 
!     def reject_invoice_with_http_info(
!         self, invoice_id, rejection, **kwargs
!     ):  # noqa: E501
          """Reject received Invoice.  # noqa: E501
  
          Send Invoice Rejected message to Invoice Issuer. Notification of rejection is signalling that Requestor does not accept Invoice (for some reason).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: A Rejected Invoice can be Accepted subsequently (e.g. as a result of some arbitrage).   # noqa: E501
***************
*** 2069,2116 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'invoice_id',
!             'rejection',
!             'timeout'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method reject_invoice" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'invoice_id' is set
!         if self.api_client.client_side_validation and ('invoice_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['invoice_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `invoice_id` when calling `reject_invoice`")  # noqa: E501
          # verify the required parameter 'rejection' is set
!         if self.api_client.client_side_validation and ('rejection' not in local_var_params or  # noqa: E501
!                                                         local_var_params['rejection'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `rejection` when calling `reject_invoice`")  # noqa: E501
! 
!         if self.api_client.client_side_validation and 'timeout' in local_var_params and local_var_params['timeout'] < 0:  # noqa: E501
!             raise ApiValueError("Invalid value for parameter `timeout` when calling `reject_invoice`, must be a value greater than or equal to `0`")  # noqa: E501
          collection_formats = {}
  
          path_params = {}
!         if 'invoice_id' in local_var_params:
!             path_params['invoiceId'] = local_var_params['invoice_id']  # noqa: E501
  
          query_params = []
!         if 'timeout' in local_var_params and local_var_params['timeout'] is not None:  # noqa: E501
!             query_params.append(('timeout', local_var_params['timeout']))  # noqa: E501
  
          header_params = {}
  
--- 2290,2349 ----
  
          local_var_params = locals()
  
!         all_params = ["invoice_id", "rejection", "timeout"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method reject_invoice" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'invoice_id' is set
!         if self.api_client.client_side_validation and (
!             "invoice_id" not in local_var_params
!             or local_var_params["invoice_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `invoice_id` when calling `reject_invoice`"
!             )  # noqa: E501
          # verify the required parameter 'rejection' is set
!         if self.api_client.client_side_validation and (
!             "rejection" not in local_var_params
!             or local_var_params["rejection"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `rejection` when calling `reject_invoice`"
!             )  # noqa: E501
! 
!         if (
!             self.api_client.client_side_validation
!             and "timeout" in local_var_params
!             and local_var_params["timeout"] < 0
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Invalid value for parameter `timeout` when calling `reject_invoice`, must be a value greater than or equal to `0`"
!             )  # noqa: E501
          collection_formats = {}
  
          path_params = {}
!         if "invoice_id" in local_var_params:
!             path_params["invoiceId"] = local_var_params["invoice_id"]  # noqa: E501
  
          query_params = []
!         if (
!             "timeout" in local_var_params and local_var_params["timeout"] is not None
!         ):  # noqa: E501
!             query_params.append(("timeout", local_var_params["timeout"]))  # noqa: E501
  
          header_params = {}
  
***************
*** 2118,2138 ****
          local_var_files = {}
  
          body_params = None
!         if 'rejection' in local_var_params:
!             body_params = local_var_params['rejection']
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # HTTP header `Content-Type`
!         header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/requestor/invoices/{invoiceId}/reject', 'POST',
              path_params,
              query_params,
              header_params,
--- 2351,2376 ----
          local_var_files = {}
  
          body_params = None
!         if "rejection" in local_var_params:
!             body_params = local_var_params["rejection"]
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # HTTP header `Content-Type`
!         header_params[
!             "Content-Type"
!         ] = self.api_client.select_header_content_type(  # noqa: E501
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/requestor/invoices/{invoiceId}/reject",
!             "POST",
              path_params,
              query_params,
              header_params,
***************
*** 2141,2151 ****
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def release_allocation(self, allocation_id, **kwargs):  # noqa: E501
          """Release Allocation.  # noqa: E501
--- 2379,2392 ----
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def release_allocation(self, allocation_id, **kwargs):  # noqa: E501
          """Release Allocation.  # noqa: E501
***************
*** 2169,2176 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.release_allocation_with_http_info(allocation_id, **kwargs)  # noqa: E501
  
      def release_allocation_with_http_info(self, allocation_id, **kwargs):  # noqa: E501
          """Release Allocation.  # noqa: E501
--- 2410,2419 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.release_allocation_with_http_info(
!             allocation_id, **kwargs
!         )  # noqa: E501
  
      def release_allocation_with_http_info(self, allocation_id, **kwargs):  # noqa: E501
          """Release Allocation.  # noqa: E501
***************
*** 2199,2234 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'allocation_id'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method release_allocation" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'allocation_id' is set
!         if self.api_client.client_side_validation and ('allocation_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['allocation_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `allocation_id` when calling `release_allocation`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'allocation_id' in local_var_params:
!             path_params['allocationId'] = local_var_params['allocation_id']  # noqa: E501
  
          query_params = []
  
--- 2442,2481 ----
  
          local_var_params = locals()
  
!         all_params = ["allocation_id"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method release_allocation" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'allocation_id' is set
!         if self.api_client.client_side_validation and (
!             "allocation_id" not in local_var_params
!             or local_var_params["allocation_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `allocation_id` when calling `release_allocation`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "allocation_id" in local_var_params:
!             path_params["allocationId"] = local_var_params[
!                 "allocation_id"
!             ]  # noqa: E501
  
          query_params = []
  
***************
*** 2239,2252 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/requestor/allocations/{allocationId}', 'DELETE',
              path_params,
              query_params,
              header_params,
--- 2486,2501 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/requestor/allocations/{allocationId}",
!             "DELETE",
              path_params,
              query_params,
              header_params,
***************
*** 2255,2262 ****
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
--- 2504,2514 ----
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
diff -r -c target/ya_payment/api_client.py src/ya_payment/api_client.py
*** target/ya_payment/api_client.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_payment/api_client.py	2020-07-21 16:38:29.000000000 +0200
***************
*** 8,14 ****
      Generated by: https://openapi-generator.tech
  """
  
- from __future__ import absolute_import
  
  import atexit
  import datetime
--- 8,13 ----
***************
*** 20,28 ****
  import re
  import tempfile
  
! # python 2 and python 3 compatibility library
! import six
! from six.moves.urllib.parse import quote
  
  from ya_payment.configuration import Configuration
  import ya_payment.models
--- 19,25 ----
  import re
  import tempfile
  
! from urllib.parse import quote
  
  from ya_payment.configuration import Configuration
  import ya_payment.models
***************
*** 52,72 ****
          to the API. More threads means more concurrent API requests.
      """
  
!     PRIMITIVE_TYPES = (float, bool, bytes, six.text_type) + six.integer_types
      NATIVE_TYPES_MAPPING = {
!         'int': int,
!         'long': int, 
!         'float': float,
!         'str': str,
!         'bool': bool,
!         'date': datetime.date,
!         'datetime': datetime.datetime,
!         'object': object,
      }
      _pool = None
  
!     def __init__(self, configuration=None, header_name=None, header_value=None,
!                  cookie=None, pool_threads=1):
          if configuration is None:
              configuration = Configuration.get_default_copy()
          self.configuration = configuration
--- 49,75 ----
          to the API. More threads means more concurrent API requests.
      """
  
!     PRIMITIVE_TYPES = (float, bool, bytes, str, int)
      NATIVE_TYPES_MAPPING = {
!         "int": int,
!         "long": int,
!         "float": float,
!         "str": str,
!         "bool": bool,
!         "date": datetime.date,
!         "datetime": datetime.datetime,
!         "object": object,
      }
      _pool = None
  
!     def __init__(
!         self,
!         configuration=None,
!         header_name=None,
!         header_value=None,
!         cookie=None,
!         pool_threads=1,
!     ):
          if configuration is None:
              configuration = Configuration.get_default_copy()
          self.configuration = configuration
***************
*** 78,84 ****
              self.default_headers[header_name] = header_value
          self.cookie = cookie
          # Set default User-Agent.
!         self.user_agent = 'OpenAPI-Generator//python'
          self.client_side_validation = configuration.client_side_validation
  
      async def __aenter__(self):
--- 81,87 ----
              self.default_headers[header_name] = header_value
          self.cookie = cookie
          # Set default User-Agent.
!         self.user_agent = "OpenAPI-Generator//python"
          self.client_side_validation = configuration.client_side_validation
  
      async def __aenter__(self):
***************
*** 93,99 ****
              self._pool.close()
              self._pool.join()
              self._pool = None
!             if hasattr(atexit, 'unregister'):
                  atexit.unregister(self.close)
  
      @property
--- 96,102 ----
              self._pool.close()
              self._pool.join()
              self._pool = None
!             if hasattr(atexit, "unregister"):
                  atexit.unregister(self.close)
  
      @property
***************
*** 109,129 ****
      @property
      def user_agent(self):
          """User agent for this API client"""
!         return self.default_headers['User-Agent']
  
      @user_agent.setter
      def user_agent(self, value):
!         self.default_headers['User-Agent'] = value
  
      def set_default_header(self, header_name, header_value):
          self.default_headers[header_name] = header_value
  
      async def __call_api(
!             self, resource_path, method, path_params=None,
!             query_params=None, header_params=None, body=None, post_params=None,
!             files=None, response_type=None, auth_settings=None,
!             _return_http_data_only=None, collection_formats=None,
!             _preload_content=True, _request_timeout=None, _host=None):
  
          config = self.configuration
  
--- 112,144 ----
      @property
      def user_agent(self):
          """User agent for this API client"""
!         return self.default_headers["User-Agent"]
  
      @user_agent.setter
      def user_agent(self, value):
!         self.default_headers["User-Agent"] = value
  
      def set_default_header(self, header_name, header_value):
          self.default_headers[header_name] = header_value
  
      async def __call_api(
!         self,
!         resource_path,
!         method,
!         path_params=None,
!         query_params=None,
!         header_params=None,
!         body=None,
!         post_params=None,
!         files=None,
!         response_type=None,
!         auth_settings=None,
!         _return_http_data_only=None,
!         collection_formats=None,
!         _preload_content=True,
!         _request_timeout=None,
!         _host=None,
!     ):
  
          config = self.configuration
  
***************
*** 131,166 ****
          header_params = header_params or {}
          header_params.update(self.default_headers)
          if self.cookie:
!             header_params['Cookie'] = self.cookie
          if header_params:
              header_params = self.sanitize_for_serialization(header_params)
!             header_params = dict(self.parameters_to_tuples(header_params,
!                                                            collection_formats))
  
          # path parameters
          if path_params:
              path_params = self.sanitize_for_serialization(path_params)
!             path_params = self.parameters_to_tuples(path_params,
!                                                     collection_formats)
              for k, v in path_params:
                  # specified safe chars, encode everything
                  resource_path = resource_path.replace(
!                     '{%s}' % k,
!                     quote(str(v), safe=config.safe_chars_for_path_param)
                  )
  
          # query parameters
          if query_params:
              query_params = self.sanitize_for_serialization(query_params)
!             query_params = self.parameters_to_tuples(query_params,
!                                                      collection_formats)
  
          # post parameters
          if post_params or files:
              post_params = post_params if post_params else []
              post_params = self.sanitize_for_serialization(post_params)
!             post_params = self.parameters_to_tuples(post_params,
!                                                     collection_formats)
              post_params.extend(self.files_parameters(files))
  
          # auth setting
--- 146,178 ----
          header_params = header_params or {}
          header_params.update(self.default_headers)
          if self.cookie:
!             header_params["Cookie"] = self.cookie
          if header_params:
              header_params = self.sanitize_for_serialization(header_params)
!             header_params = dict(
!                 self.parameters_to_tuples(header_params, collection_formats)
!             )
  
          # path parameters
          if path_params:
              path_params = self.sanitize_for_serialization(path_params)
!             path_params = self.parameters_to_tuples(path_params, collection_formats)
              for k, v in path_params:
                  # specified safe chars, encode everything
                  resource_path = resource_path.replace(
!                     "{%s}" % k, quote(str(v), safe=config.safe_chars_for_path_param)
                  )
  
          # query parameters
          if query_params:
              query_params = self.sanitize_for_serialization(query_params)
!             query_params = self.parameters_to_tuples(query_params, collection_formats)
  
          # post parameters
          if post_params or files:
              post_params = post_params if post_params else []
              post_params = self.sanitize_for_serialization(post_params)
!             post_params = self.parameters_to_tuples(post_params, collection_formats)
              post_params.extend(self.files_parameters(files))
  
          # auth setting
***************
*** 180,194 ****
          try:
              # perform request and return response
              response_data = await self.request(
!                 method, url, query_params=query_params, headers=header_params,
!                 post_params=post_params, body=body,
                  _preload_content=_preload_content,
!                 _request_timeout=_request_timeout)
          except ApiException as e:
!             e.body = e.body.decode('utf-8') if six.PY3 else e.body
              raise e
  
!         content_type = response_data.getheader('content-type')
  
          self.last_response = response_data
  
--- 192,211 ----
          try:
              # perform request and return response
              response_data = await self.request(
!                 method,
!                 url,
!                 query_params=query_params,
!                 headers=header_params,
!                 post_params=post_params,
!                 body=body,
                  _preload_content=_preload_content,
!                 _request_timeout=_request_timeout,
!             )
          except ApiException as e:
!             e.body = e.body.decode("utf-8")
              raise e
  
!         content_type = response_data.getheader("content-type")
  
          self.last_response = response_data
  
***************
*** 197,203 ****
          if not _preload_content:
              return return_data
  
!         if six.PY3 and response_type not in ["file", "bytes"]:
              match = None
              if content_type is not None:
                  match = re.search(r"charset=([a-zA-Z\-\d]+)[\s\;]?", content_type)
--- 214,220 ----
          if not _preload_content:
              return return_data
  
!         if response_type not in ["file", "bytes"]:
              match = None
              if content_type is not None:
                  match = re.search(r"charset=([a-zA-Z\-\d]+)[\s\;]?", content_type)
***************
*** 211,220 ****
              return_data = None
  
          if _return_http_data_only:
!             return (return_data)
          else:
!             return (return_data, response_data.status,
!                     response_data.getheaders())
  
      def sanitize_for_serialization(self, obj):
          """Builds a JSON POST object.
--- 228,236 ----
              return_data = None
  
          if _return_http_data_only:
!             return return_data
          else:
!             return (return_data, response_data.status, response_data.getheaders())
  
      def sanitize_for_serialization(self, obj):
          """Builds a JSON POST object.
***************
*** 235,245 ****
          elif isinstance(obj, self.PRIMITIVE_TYPES):
              return obj
          elif isinstance(obj, list):
!             return [self.sanitize_for_serialization(sub_obj)
!                     for sub_obj in obj]
          elif isinstance(obj, tuple):
!             return tuple(self.sanitize_for_serialization(sub_obj)
!                          for sub_obj in obj)
          elif isinstance(obj, (datetime.datetime, datetime.date)):
              return obj.isoformat()
  
--- 251,259 ----
          elif isinstance(obj, self.PRIMITIVE_TYPES):
              return obj
          elif isinstance(obj, list):
!             return [self.sanitize_for_serialization(sub_obj) for sub_obj in obj]
          elif isinstance(obj, tuple):
!             return tuple(self.sanitize_for_serialization(sub_obj) for sub_obj in obj)
          elif isinstance(obj, (datetime.datetime, datetime.date)):
              return obj.isoformat()
  
***************
*** 251,262 ****
              # and attributes which value is not None.
              # Convert attribute name to json key in
              # model definition for request.
!             obj_dict = {obj.attribute_map[attr]: getattr(obj, attr)
!                         for attr, _ in six.iteritems(obj.openapi_types)
!                         if getattr(obj, attr) is not None}
! 
!         return {key: self.sanitize_for_serialization(val)
!                 for key, val in six.iteritems(obj_dict)}
  
      def deserialize(self, response, response_type):
          """Deserializes response into an object.
--- 265,279 ----
              # and attributes which value is not None.
              # Convert attribute name to json key in
              # model definition for request.
!             obj_dict = {
!                 obj.attribute_map[attr]: getattr(obj, attr)
!                 for attr, _ in obj.openapi_types.items()
!                 if getattr(obj, attr) is not None
!             }
! 
!         return {
!             key: self.sanitize_for_serialization(val) for key, val in obj_dict.items()
!         }
  
      def deserialize(self, response, response_type):
          """Deserializes response into an object.
***************
*** 292,306 ****
              return None
  
          if type(klass) == str:
!             if klass.startswith('list['):
!                 sub_kls = re.match(r'list\[(.*)\]', klass).group(1)
!                 return [self.__deserialize(sub_data, sub_kls)
!                         for sub_data in data]
! 
!             if klass.startswith('dict('):
!                 sub_kls = re.match(r'dict\(([^,]*), (.*)\)', klass).group(2)
!                 return {k: self.__deserialize(v, sub_kls)
!                         for k, v in six.iteritems(data)}
  
              # convert str to class
              if klass in self.NATIVE_TYPES_MAPPING:
--- 309,321 ----
              return None
  
          if type(klass) == str:
!             if klass.startswith("list["):
!                 sub_kls = re.match(r"list\[(.*)\]", klass).group(1)
!                 return [self.__deserialize(sub_data, sub_kls) for sub_data in data]
! 
!             if klass.startswith("dict("):
!                 sub_kls = re.match(r"dict\(([^,]*), (.*)\)", klass).group(2)
!                 return {k: self.__deserialize(v, sub_kls) for k, v in data.items()}
  
              # convert str to class
              if klass in self.NATIVE_TYPES_MAPPING:
***************
*** 319,330 ****
          else:
              return self.__deserialize_model(data, klass)
  
!     def call_api(self, resource_path, method,
!                  path_params=None, query_params=None, header_params=None,
!                  body=None, post_params=None, files=None,
!                  response_type=None, auth_settings=None, async_req=None,
!                  _return_http_data_only=None, collection_formats=None,
!                  _preload_content=True, _request_timeout=None, _host=None):
          """Makes the HTTP request (synchronous) and returns deserialized data.
  
          To make an async_req request, set the async_req parameter.
--- 334,358 ----
          else:
              return self.__deserialize_model(data, klass)
  
!     def call_api(
!         self,
!         resource_path,
!         method,
!         path_params=None,
!         query_params=None,
!         header_params=None,
!         body=None,
!         post_params=None,
!         files=None,
!         response_type=None,
!         auth_settings=None,
!         async_req=None,
!         _return_http_data_only=None,
!         collection_formats=None,
!         _preload_content=True,
!         _request_timeout=None,
!         _host=None,
!     ):
          """Makes the HTTP request (synchronous) and returns deserialized data.
  
          To make an async_req request, set the async_req parameter.
***************
*** 362,440 ****
              then the method will return the response directly.
          """
          if not async_req:
!             return self.__call_api(resource_path, method,
!                                    path_params, query_params, header_params,
!                                    body, post_params, files,
!                                    response_type, auth_settings,
!                                    _return_http_data_only, collection_formats,
!                                    _preload_content, _request_timeout, _host)
! 
!         return self.pool.apply_async(self.__call_api, (resource_path,
!                                                        method, path_params,
!                                                        query_params,
!                                                        header_params, body,
!                                                        post_params, files,
!                                                        response_type,
!                                                        auth_settings,
!                                                        _return_http_data_only,
!                                                        collection_formats,
!                                                        _preload_content,
!                                                        _request_timeout,
!                                                        _host))
! 
!     def request(self, method, url, query_params=None, headers=None,
!                 post_params=None, body=None, _preload_content=True,
!                 _request_timeout=None):
          """Makes the HTTP request using RESTClient."""
          if method == "GET":
!             return self.rest_client.GET(url,
!                                         query_params=query_params,
!                                         _preload_content=_preload_content,
!                                         _request_timeout=_request_timeout,
!                                         headers=headers)
          elif method == "HEAD":
!             return self.rest_client.HEAD(url,
!                                          query_params=query_params,
!                                          _preload_content=_preload_content,
!                                          _request_timeout=_request_timeout,
!                                          headers=headers)
          elif method == "OPTIONS":
!             return self.rest_client.OPTIONS(url,
!                                             query_params=query_params,
!                                             headers=headers,
!                                             _preload_content=_preload_content,
!                                             _request_timeout=_request_timeout)
          elif method == "POST":
!             return self.rest_client.POST(url,
!                                          query_params=query_params,
!                                          headers=headers,
!                                          post_params=post_params,
!                                          _preload_content=_preload_content,
!                                          _request_timeout=_request_timeout,
!                                          body=body)
          elif method == "PUT":
!             return self.rest_client.PUT(url,
!                                         query_params=query_params,
!                                         headers=headers,
!                                         post_params=post_params,
!                                         _preload_content=_preload_content,
!                                         _request_timeout=_request_timeout,
!                                         body=body)
          elif method == "PATCH":
!             return self.rest_client.PATCH(url,
!                                           query_params=query_params,
!                                           headers=headers,
!                                           post_params=post_params,
!                                           _preload_content=_preload_content,
!                                           _request_timeout=_request_timeout,
!                                           body=body)
          elif method == "DELETE":
!             return self.rest_client.DELETE(url,
!                                            query_params=query_params,
!                                            headers=headers,
!                                            _preload_content=_preload_content,
!                                            _request_timeout=_request_timeout,
!                                            body=body)
          else:
              raise ApiValueError(
                  "http method must be `GET`, `HEAD`, `OPTIONS`,"
--- 390,509 ----
              then the method will return the response directly.
          """
          if not async_req:
!             return self.__call_api(
!                 resource_path,
!                 method,
!                 path_params,
!                 query_params,
!                 header_params,
!                 body,
!                 post_params,
!                 files,
!                 response_type,
!                 auth_settings,
!                 _return_http_data_only,
!                 collection_formats,
!                 _preload_content,
!                 _request_timeout,
!                 _host,
!             )
! 
!         return self.pool.apply_async(
!             self.__call_api,
!             (
!                 resource_path,
!                 method,
!                 path_params,
!                 query_params,
!                 header_params,
!                 body,
!                 post_params,
!                 files,
!                 response_type,
!                 auth_settings,
!                 _return_http_data_only,
!                 collection_formats,
!                 _preload_content,
!                 _request_timeout,
!                 _host,
!             ),
!         )
! 
!     def request(
!         self,
!         method,
!         url,
!         query_params=None,
!         headers=None,
!         post_params=None,
!         body=None,
!         _preload_content=True,
!         _request_timeout=None,
!     ):
          """Makes the HTTP request using RESTClient."""
          if method == "GET":
!             return self.rest_client.GET(
!                 url,
!                 query_params=query_params,
!                 _preload_content=_preload_content,
!                 _request_timeout=_request_timeout,
!                 headers=headers,
!             )
          elif method == "HEAD":
!             return self.rest_client.HEAD(
!                 url,
!                 query_params=query_params,
!                 _preload_content=_preload_content,
!                 _request_timeout=_request_timeout,
!                 headers=headers,
!             )
          elif method == "OPTIONS":
!             return self.rest_client.OPTIONS(
!                 url,
!                 query_params=query_params,
!                 headers=headers,
!                 _preload_content=_preload_content,
!                 _request_timeout=_request_timeout,
!             )
          elif method == "POST":
!             return self.rest_client.POST(
!                 url,
!                 query_params=query_params,
!                 headers=headers,
!                 post_params=post_params,
!                 _preload_content=_preload_content,
!                 _request_timeout=_request_timeout,
!                 body=body,
!             )
          elif method == "PUT":
!             return self.rest_client.PUT(
!                 url,
!                 query_params=query_params,
!                 headers=headers,
!                 post_params=post_params,
!                 _preload_content=_preload_content,
!                 _request_timeout=_request_timeout,
!                 body=body,
!             )
          elif method == "PATCH":
!             return self.rest_client.PATCH(
!                 url,
!                 query_params=query_params,
!                 headers=headers,
!                 post_params=post_params,
!                 _preload_content=_preload_content,
!                 _request_timeout=_request_timeout,
!                 body=body,
!             )
          elif method == "DELETE":
!             return self.rest_client.DELETE(
!                 url,
!                 query_params=query_params,
!                 headers=headers,
!                 _preload_content=_preload_content,
!                 _request_timeout=_request_timeout,
!                 body=body,
!             )
          else:
              raise ApiValueError(
                  "http method must be `GET`, `HEAD`, `OPTIONS`,"
***************
*** 451,472 ****
          new_params = []
          if collection_formats is None:
              collection_formats = {}
!         for k, v in six.iteritems(params) if isinstance(params, dict) else params:  # noqa: E501
              if k in collection_formats:
                  collection_format = collection_formats[k]
!                 if collection_format == 'multi':
                      new_params.extend((k, value) for value in v)
                  else:
!                     if collection_format == 'ssv':
!                         delimiter = ' '
!                     elif collection_format == 'tsv':
!                         delimiter = '\t'
!                     elif collection_format == 'pipes':
!                         delimiter = '|'
                      else:  # csv is the default
!                         delimiter = ','
!                     new_params.append(
!                         (k, delimiter.join(str(value) for value in v)))
              else:
                  new_params.append((k, v))
          return new_params
--- 520,542 ----
          new_params = []
          if collection_formats is None:
              collection_formats = {}
!         for k, v in (
!             params.items() if isinstance(params, dict) else params
!         ):  # noqa: E501
              if k in collection_formats:
                  collection_format = collection_formats[k]
!                 if collection_format == "multi":
                      new_params.extend((k, value) for value in v)
                  else:
!                     if collection_format == "ssv":
!                         delimiter = " "
!                     elif collection_format == "tsv":
!                         delimiter = "\t"
!                     elif collection_format == "pipes":
!                         delimiter = "|"
                      else:  # csv is the default
!                         delimiter = ","
!                     new_params.append((k, delimiter.join(str(value) for value in v)))
              else:
                  new_params.append((k, v))
          return new_params
***************
*** 480,497 ****
          params = []
  
          if files:
!             for k, v in six.iteritems(files):
                  if not v:
                      continue
                  file_names = v if type(v) is list else [v]
                  for n in file_names:
!                     with open(n, 'rb') as f:
                          filename = os.path.basename(f.name)
                          filedata = f.read()
!                         mimetype = (mimetypes.guess_type(filename)[0] or
!                                     'application/octet-stream')
!                         params.append(
!                             tuple([k, tuple([filename, filedata, mimetype])]))
  
          return params
  
--- 550,568 ----
          params = []
  
          if files:
!             for k, v in files.items():
                  if not v:
                      continue
                  file_names = v if type(v) is list else [v]
                  for n in file_names:
!                     with open(n, "rb") as f:
                          filename = os.path.basename(f.name)
                          filedata = f.read()
!                         mimetype = (
!                             mimetypes.guess_type(filename)[0]
!                             or "application/octet-stream"
!                         )
!                         params.append(tuple([k, tuple([filename, filedata, mimetype])]))
  
          return params
  
***************
*** 506,515 ****
  
          accepts = [x.lower() for x in accepts]
  
!         if 'application/json' in accepts:
!             return 'application/json'
          else:
!             return ', '.join(accepts)
  
      def select_header_content_type(self, content_types):
          """Returns `Content-Type` based on an array of content_types provided.
--- 577,586 ----
  
          accepts = [x.lower() for x in accepts]
  
!         if "application/json" in accepts:
!             return "application/json"
          else:
!             return ", ".join(accepts)
  
      def select_header_content_type(self, content_types):
          """Returns `Content-Type` based on an array of content_types provided.
***************
*** 518,529 ****
          :return: Content-Type (e.g. application/json).
          """
          if not content_types:
!             return 'application/json'
  
          content_types = [x.lower() for x in content_types]
  
!         if 'application/json' in content_types or '*/*' in content_types:
!             return 'application/json'
          else:
              return content_types[0]
  
--- 589,600 ----
          :return: Content-Type (e.g. application/json).
          """
          if not content_types:
!             return "application/json"
  
          content_types = [x.lower() for x in content_types]
  
!         if "application/json" in content_types or "*/*" in content_types:
!             return "application/json"
          else:
              return content_types[0]
  
***************
*** 540,554 ****
          for auth in auth_settings:
              auth_setting = self.configuration.auth_settings().get(auth)
              if auth_setting:
!                 if auth_setting['in'] == 'cookie':
!                     headers['Cookie'] = auth_setting['value']
!                 elif auth_setting['in'] == 'header':
!                     headers[auth_setting['key']] = auth_setting['value']
!                 elif auth_setting['in'] == 'query':
!                     querys.append((auth_setting['key'], auth_setting['value']))
                  else:
                      raise ApiValueError(
!                         'Authentication token must be in `query` or `header`'
                      )
  
      def __deserialize_file(self, response):
--- 611,625 ----
          for auth in auth_settings:
              auth_setting = self.configuration.auth_settings().get(auth)
              if auth_setting:
!                 if auth_setting["in"] == "cookie":
!                     headers["Cookie"] = auth_setting["value"]
!                 elif auth_setting["in"] == "header":
!                     headers[auth_setting["key"]] = auth_setting["value"]
!                 elif auth_setting["in"] == "query":
!                     querys.append((auth_setting["key"], auth_setting["value"]))
                  else:
                      raise ApiValueError(
!                         "Authentication token must be in `query` or `header`"
                      )
  
      def __deserialize_file(self, response):
***************
*** 566,573 ****
  
          content_disposition = response.getheader("Content-Disposition")
          if content_disposition:
!             filename = re.search(r'filename=[\'"]?([^\'"\s]+)[\'"]?',
!                                  content_disposition).group(1)
              path = os.path.join(os.path.dirname(path), filename)
  
          with open(path, "wb") as f:
--- 637,645 ----
  
          content_disposition = response.getheader("Content-Disposition")
          if content_disposition:
!             filename = re.search(
!                 r'filename=[\'"]?([^\'"\s]+)[\'"]?', content_disposition
!             ).group(1)
              path = os.path.join(os.path.dirname(path), filename)
  
          with open(path, "wb") as f:
***************
*** 586,592 ****
          try:
              return klass(data)
          except UnicodeEncodeError:
!             return six.text_type(data)
          except TypeError:
              return data
  
--- 658,664 ----
          try:
              return klass(data)
          except UnicodeEncodeError:
!             return str(data)
          except TypeError:
              return data
  
***************
*** 609,616 ****
              return string
          except ValueError:
              raise rest.ApiException(
!                 status=0,
!                 reason="Failed to parse `{0}` as date object".format(string)
              )
  
      def __deserialize_datetime(self, string):
--- 681,687 ----
              return string
          except ValueError:
              raise rest.ApiException(
!                 status=0, reason="Failed to parse `{0}` as date object".format(string)
              )
  
      def __deserialize_datetime(self, string):
***************
*** 628,637 ****
          except ValueError:
              raise rest.ApiException(
                  status=0,
!                 reason=(
!                     "Failed to parse `{0}` as datetime object"
!                     .format(string)
!                 )
              )
  
      def __deserialize_model(self, data, klass):
--- 699,705 ----
          except ValueError:
              raise rest.ApiException(
                  status=0,
!                 reason=("Failed to parse `{0}` as datetime object".format(string)),
              )
  
      def __deserialize_model(self, data, klass):
***************
*** 642,659 ****
          :return: model object.
          """
          has_discriminator = False
!         if (hasattr(klass, 'get_real_child_model')
!                 and klass.discriminator_value_class_map):
              has_discriminator = True
  
          if not klass.openapi_types and has_discriminator is False:
              return data
  
          kwargs = {}
!         if (data is not None and
!                 klass.openapi_types is not None and
!                 isinstance(data, (list, dict))):
!             for attr, attr_type in six.iteritems(klass.openapi_types):
                  if klass.attribute_map[attr] in data:
                      value = data[klass.attribute_map[attr]]
                      kwargs[attr] = self.__deserialize(value, attr_type)
--- 710,731 ----
          :return: model object.
          """
          has_discriminator = False
!         if (
!             hasattr(klass, "get_real_child_model")
!             and klass.discriminator_value_class_map
!         ):
              has_discriminator = True
  
          if not klass.openapi_types and has_discriminator is False:
              return data
  
          kwargs = {}
!         if (
!             data is not None
!             and klass.openapi_types is not None
!             and isinstance(data, (list, dict))
!         ):
!             for attr, attr_type in klass.openapi_types.items():
                  if klass.attribute_map[attr] in data:
                      value = data[klass.attribute_map[attr]]
                      kwargs[attr] = self.__deserialize(value, attr_type)
diff -r -c target/ya_payment/configuration.py src/ya_payment/configuration.py
*** target/ya_payment/configuration.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_payment/configuration.py	2020-07-21 16:04:52.000000000 +0200
***************
*** 9,20 ****
      Generated by: https://openapi-generator.tech
  """
  
! 
! from __future__ import absolute_import
! 
  import copy
  import logging
  import sys
  
  
  class Configuration(object):
--- 9,19 ----
      Generated by: https://openapi-generator.tech
  """
  
! import base64
  import copy
  import logging
  import sys
+ from typing import Callable, Optional
  
  
  class Configuration(object):
***************
*** 50,60 ****
  
      _default = None
  
!     def __init__(self, host="http://localhost/payment-api/v1",
!                  api_key=None, api_key_prefix=None,
!                  username=None, password=None,
!                  discard_unknown_keys=False,
!                  ):
          """Constructor
          """
          self.host = host
--- 49,63 ----
  
      _default = None
  
!     def __init__(
!         self,
!         host="http://localhost/payment-api/v1",
!         api_key=None,
!         api_key_prefix=None,
!         username=None,
!         password=None,
!         discard_unknown_keys=False,
!     ):
          """Constructor
          """
          self.host = host
***************
*** 74,80 ****
              self.api_key_prefix = api_key_prefix
          """dict to store API prefix (e.g. Bearer)
          """
!         self.refresh_api_key_hook = None
          """function hook to refresh API key if expired
          """
          self.username = username
--- 77,83 ----
              self.api_key_prefix = api_key_prefix
          """dict to store API prefix (e.g. Bearer)
          """
!         self.refresh_api_key_hook = Optional[Callable]
          """function hook to refresh API key if expired
          """
          self.username = username
***************
*** 92,98 ****
          """
          self.logger["package_logger"] = logging.getLogger("ya_payment")
          self.logger["urllib3_logger"] = logging.getLogger("urllib3")
!         self.logger_format = '%(asctime)s %(levelname)s %(message)s'
          """Log format
          """
          self.logger_stream_handler = None
--- 95,101 ----
          """
          self.logger["package_logger"] = logging.getLogger("ya_payment")
          self.logger["urllib3_logger"] = logging.getLogger("urllib3")
!         self.logger_format = "%(asctime)s %(levelname)s %(message)s"
          """Log format
          """
          self.logger_stream_handler = None
***************
*** 137,143 ****
          self.proxy_headers = None
          """Proxy headers
          """
!         self.safe_chars_for_path_param = ''
          """Safe chars for path_param
          """
          self.retries = None
--- 140,146 ----
          self.proxy_headers = None
          """Proxy headers
          """
!         self.safe_chars_for_path_param = ""
          """Safe chars for path_param
          """
          self.retries = None
***************
*** 151,157 ****
          result = cls.__new__(cls)
          memo[id(self)] = result
          for k, v in self.__dict__.items():
!             if k not in ('logger', 'logger_file_handler'):
                  setattr(result, k, copy.deepcopy(v, memo))
          # shallow copy of loggers
          result.logger = copy.copy(self.logger)
--- 154,160 ----
          result = cls.__new__(cls)
          memo[id(self)] = result
          for k, v in self.__dict__.items():
!             if k not in ("logger", "logger_file_handler"):
                  setattr(result, k, copy.deepcopy(v, memo))
          # shallow copy of loggers
          result.logger = copy.copy(self.logger)
***************
*** 216,222 ****
              # then add file handler and remove stream handler.
              self.logger_file_handler = logging.FileHandler(self.__logger_file)
              self.logger_file_handler.setFormatter(self.logger_formatter)
!             for _, logger in six.iteritems(self.logger):
                  logger.addHandler(self.logger_file_handler)
  
      @property
--- 219,225 ----
              # then add file handler and remove stream handler.
              self.logger_file_handler = logging.FileHandler(self.__logger_file)
              self.logger_file_handler.setFormatter(self.logger_formatter)
!             for _, logger in self.logger.items():
                  logger.addHandler(self.logger_file_handler)
  
      @property
***************
*** 269,277 ****
          password = ""
          if self.password is not None:
              password = self.password
!         return urllib3.util.make_headers(
!             basic_auth=username + ':' + password
!         ).get('authorization')
  
      def auth_settings(self):
          """Gets Auth Settings dict for api client.
--- 272,279 ----
          password = ""
          if self.password is not None:
              password = self.password
!         credentials = username + ":" + password
!         return base64.b64encode(credentials.encode()).decode()
  
      def auth_settings(self):
          """Gets Auth Settings dict for api client.
***************
*** 280,290 ****
          """
          auth = {}
          if self.access_token is not None:
!             auth['app_key'] = {
!                 'type': 'bearer',
!                 'in': 'header',
!                 'key': 'Authorization',
!                 'value': 'Bearer ' + self.access_token
              }
          return auth
  
--- 282,292 ----
          """
          auth = {}
          if self.access_token is not None:
!             auth["app_key"] = {
!                 "type": "bearer",
!                 "in": "header",
!                 "key": "Authorization",
!                 "value": "Bearer " + self.access_token,
              }
          return auth
  
***************
*** 293,316 ****
  
          :return: The report for debugging.
          """
!         return "Python SDK Debug Report:\n"\
!                "OS: {env}\n"\
!                "Python Version: {pyversion}\n"\
!                "Version of the API: 1.2.0\n"\
!                "SDK Package Version: ".\
!                format(env=sys.platform, pyversion=sys.version)
  
      def get_host_settings(self):
          """Gets an array of host settings
  
          :return: An array of host settings
          """
!         return [
!             {
!                 'url': "/payment-api/v1",
!                 'description': "No description provided",
!             }
!         ]
  
      def get_host_from_settings(self, index, variables=None):
          """Gets host URL based on the index and variables
--- 295,314 ----
  
          :return: The report for debugging.
          """
!         return (
!             "Python SDK Debug Report:\n"
!             "OS: {env}\n"
!             "Python Version: {pyversion}\n"
!             "Version of the API: 1.2.0\n"
!             "SDK Package Version: ".format(env=sys.platform, pyversion=sys.version)
!         )
  
      def get_host_settings(self):
          """Gets an array of host settings
  
          :return: An array of host settings
          """
!         return [{"url": "/payment-api/v1", "description": "No description provided",}]
  
      def get_host_from_settings(self, index, variables=None):
          """Gets host URL based on the index and variables
***************
*** 326,347 ****
          except IndexError:
              raise ValueError(
                  "Invalid index {0} when selecting the host settings. "
!                 "Must be less than {1}".format(index, len(servers)))
  
!         url = server['url']
  
          # go through variables and replace placeholders
!         for variable_name, variable in server['variables'].items():
!             used_value = variables.get(
!                 variable_name, variable['default_value'])
  
!             if 'enum_values' in variable \
!                     and used_value not in variable['enum_values']:
                  raise ValueError(
                      "The variable `{0}` in the host URL has invalid value "
                      "{1}. Must be {2}.".format(
!                         variable_name, variables[variable_name],
!                         variable['enum_values']))
  
              url = url.replace("{" + variable_name + "}", used_value)
  
--- 324,345 ----
          except IndexError:
              raise ValueError(
                  "Invalid index {0} when selecting the host settings. "
!                 "Must be less than {1}".format(index, len(servers))
!             )
  
!         url = server["url"]
  
          # go through variables and replace placeholders
!         for variable_name, variable in server["variables"].items():
!             used_value = variables.get(variable_name, variable["default_value"])
  
!             if "enum_values" in variable and used_value not in variable["enum_values"]:
                  raise ValueError(
                      "The variable `{0}` in the host URL has invalid value "
                      "{1}. Must be {2}.".format(
!                         variable_name, variables[variable_name], variable["enum_values"]
!                     )
!                 )
  
              url = url.replace("{" + variable_name + "}", used_value)
  
diff -r -c target/ya_payment/exceptions.py src/ya_payment/exceptions.py
*** target/ya_payment/exceptions.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_payment/exceptions.py	2020-07-21 16:04:52.000000000 +0200
***************
*** 10,25 ****
  """
  
  
- import six
- 
- 
  class OpenApiException(Exception):
      """The base exception class for all OpenAPIExceptions"""
  
  
  class ApiTypeError(OpenApiException, TypeError):
!     def __init__(self, msg, path_to_item=None, valid_classes=None,
!                  key_type=None):
          """ Raises an exception for TypeErrors
  
          Args:
--- 10,21 ----
  """
  
  
  class OpenApiException(Exception):
      """The base exception class for all OpenAPIExceptions"""
  
  
  class ApiTypeError(OpenApiException, TypeError):
!     def __init__(self, msg, path_to_item=None, valid_classes=None, key_type=None):
          """ Raises an exception for TypeErrors
  
          Args:
***************
*** 82,88 ****
  
  
  class ApiException(OpenApiException):
- 
      def __init__(self, status=None, reason=None, http_resp=None):
          if http_resp:
              self.status = http_resp.status
--- 78,83 ----
***************
*** 97,107 ****
  
      def __str__(self):
          """Custom error messages for exception"""
!         error_message = "({0})\n"\
!                         "Reason: {1}\n".format(self.status, self.reason)
          if self.headers:
!             error_message += "HTTP response headers: {0}\n".format(
!                 self.headers)
  
          if self.body:
              error_message += "HTTP response body: {0}\n".format(self.body)
--- 92,100 ----
  
      def __str__(self):
          """Custom error messages for exception"""
!         error_message = "({0})\n" "Reason: {1}\n".format(self.status, self.reason)
          if self.headers:
!             error_message += "HTTP response headers: {0}\n".format(self.headers)
  
          if self.body:
              error_message += "HTTP response body: {0}\n".format(self.body)
***************
*** 113,119 ****
      """Returns a string representation of a path"""
      result = ""
      for pth in path_to_item:
!         if isinstance(pth, six.integer_types):
              result += "[{0}]".format(pth)
          else:
              result += "['{0}']".format(pth)
--- 106,112 ----
      """Returns a string representation of a path"""
      result = ""
      for pth in path_to_item:
!         if isinstance(pth, int):
              result += "[{0}]".format(pth)
          else:
              result += "['{0}']".format(pth)
diff -r -c target/ya_payment/models/__init__.py src/ya_payment/models/__init__.py
*** target/ya_payment/models/__init__.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_payment/models/__init__.py	2020-07-21 16:04:52.000000000 +0200
***************
*** 11,18 ****
  """
  
  
- from __future__ import absolute_import
- 
  # import models into model package
  from ya_payment.models.acceptance import Acceptance
  from ya_payment.models.activity_payment import ActivityPayment
--- 11,16 ----
diff -r -c target/ya_payment/models/acceptance.py src/ya_payment/models/acceptance.py
*** target/ya_payment/models/acceptance.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_payment/models/acceptance.py	2020-07-21 16:04:52.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_payment.configuration import Configuration
  
--- 13,18 ----
***************
*** 32,48 ****
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {
!         'total_amount_accepted': 'str',
!         'allocation_id': 'str'
!     }
  
      attribute_map = {
!         'total_amount_accepted': 'totalAmountAccepted',
!         'allocation_id': 'allocationId'
      }
  
!     def __init__(self, total_amount_accepted=None, allocation_id=None, local_vars_configuration=None):  # noqa: E501
          """Acceptance - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
--- 31,49 ----
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {"total_amount_accepted": "str", "allocation_id": "str"}
  
      attribute_map = {
!         "total_amount_accepted": "totalAmountAccepted",
!         "allocation_id": "allocationId",
      }
  
!     def __init__(
!         self,
!         total_amount_accepted=None,
!         allocation_id=None,
!         local_vars_configuration=None,
!     ):  # noqa: E501
          """Acceptance - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
***************
*** 73,80 ****
          :param total_amount_accepted: The total_amount_accepted of this Acceptance.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and total_amount_accepted is None:  # noqa: E501
!             raise ValueError("Invalid value for `total_amount_accepted`, must not be `None`")  # noqa: E501
  
          self._total_amount_accepted = total_amount_accepted
  
--- 74,86 ----
          :param total_amount_accepted: The total_amount_accepted of this Acceptance.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation
!             and total_amount_accepted is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `total_amount_accepted`, must not be `None`"
!             )  # noqa: E501
  
          self._total_amount_accepted = total_amount_accepted
  
***************
*** 96,103 ****
          :param allocation_id: The allocation_id of this Acceptance.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and allocation_id is None:  # noqa: E501
!             raise ValueError("Invalid value for `allocation_id`, must not be `None`")  # noqa: E501
  
          self._allocation_id = allocation_id
  
--- 102,114 ----
          :param allocation_id: The allocation_id of this Acceptance.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation
!             and allocation_id is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `allocation_id`, must not be `None`"
!             )  # noqa: E501
  
          self._allocation_id = allocation_id
  
***************
*** 105,125 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 116,138 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_payment/models/activity_payment.py src/ya_payment/models/activity_payment.py
*** target/ya_payment/models/activity_payment.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_payment/models/activity_payment.py	2020-07-21 16:04:52.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_payment.configuration import Configuration
  
--- 13,18 ----
***************
*** 32,50 ****
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {
!         'activity_id': 'str',
!         'amount': 'str',
!         'allocation_id': 'str'
!     }
  
      attribute_map = {
!         'activity_id': 'activityId',
!         'amount': 'amount',
!         'allocation_id': 'allocationId'
      }
  
!     def __init__(self, activity_id=None, amount=None, allocation_id=None, local_vars_configuration=None):  # noqa: E501
          """ActivityPayment - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
--- 31,51 ----
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {"activity_id": "str", "amount": "str", "allocation_id": "str"}
  
      attribute_map = {
!         "activity_id": "activityId",
!         "amount": "amount",
!         "allocation_id": "allocationId",
      }
  
!     def __init__(
!         self,
!         activity_id=None,
!         amount=None,
!         allocation_id=None,
!         local_vars_configuration=None,
!     ):  # noqa: E501
          """ActivityPayment - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
***************
*** 78,85 ****
          :param activity_id: The activity_id of this ActivityPayment.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and activity_id is None:  # noqa: E501
!             raise ValueError("Invalid value for `activity_id`, must not be `None`")  # noqa: E501
  
          self._activity_id = activity_id
  
--- 79,90 ----
          :param activity_id: The activity_id of this ActivityPayment.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation and activity_id is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `activity_id`, must not be `None`"
!             )  # noqa: E501
  
          self._activity_id = activity_id
  
***************
*** 101,108 ****
          :param amount: The amount of this ActivityPayment.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and amount is None:  # noqa: E501
!             raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501
  
          self._amount = amount
  
--- 106,117 ----
          :param amount: The amount of this ActivityPayment.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation and amount is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `amount`, must not be `None`"
!             )  # noqa: E501
  
          self._amount = amount
  
***************
*** 131,151 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 140,162 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_payment/models/agreement_payment.py src/ya_payment/models/agreement_payment.py
*** target/ya_payment/models/agreement_payment.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_payment/models/agreement_payment.py	2020-07-21 16:04:53.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_payment.configuration import Configuration
  
--- 13,18 ----
***************
*** 32,50 ****
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {
!         'agreement_id': 'str',
!         'amount': 'str',
!         'allocation_id': 'str'
!     }
  
      attribute_map = {
!         'agreement_id': 'agreementId',
!         'amount': 'amount',
!         'allocation_id': 'allocationId'
      }
  
!     def __init__(self, agreement_id=None, amount=None, allocation_id=None, local_vars_configuration=None):  # noqa: E501
          """AgreementPayment - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
--- 31,51 ----
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {"agreement_id": "str", "amount": "str", "allocation_id": "str"}
  
      attribute_map = {
!         "agreement_id": "agreementId",
!         "amount": "amount",
!         "allocation_id": "allocationId",
      }
  
!     def __init__(
!         self,
!         agreement_id=None,
!         amount=None,
!         allocation_id=None,
!         local_vars_configuration=None,
!     ):  # noqa: E501
          """AgreementPayment - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
***************
*** 78,85 ****
          :param agreement_id: The agreement_id of this AgreementPayment.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and agreement_id is None:  # noqa: E501
!             raise ValueError("Invalid value for `agreement_id`, must not be `None`")  # noqa: E501
  
          self._agreement_id = agreement_id
  
--- 79,91 ----
          :param agreement_id: The agreement_id of this AgreementPayment.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation
!             and agreement_id is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `agreement_id`, must not be `None`"
!             )  # noqa: E501
  
          self._agreement_id = agreement_id
  
***************
*** 101,108 ****
          :param amount: The amount of this AgreementPayment.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and amount is None:  # noqa: E501
!             raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501
  
          self._amount = amount
  
--- 107,118 ----
          :param amount: The amount of this AgreementPayment.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation and amount is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `amount`, must not be `None`"
!             )  # noqa: E501
  
          self._amount = amount
  
***************
*** 131,151 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 141,163 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_payment/models/allocation.py src/ya_payment/models/allocation.py
*** target/ya_payment/models/allocation.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_payment/models/allocation.py	2020-07-21 16:04:53.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_payment.configuration import Configuration
  
--- 13,18 ----
***************
*** 33,60 ****
                              and the value is json key in definition.
      """
      openapi_types = {
!         'allocation_id': 'str',
!         'address': 'str',
!         'payment_platform': 'str',
!         'total_amount': 'str',
!         'spent_amount': 'str',
!         'remaining_amount': 'str',
!         'timeout': 'datetime',
!         'make_deposit': 'bool'
      }
  
      attribute_map = {
!         'allocation_id': 'allocationId',
!         'address': 'address',
!         'payment_platform': 'paymentPlatform',
!         'total_amount': 'totalAmount',
!         'spent_amount': 'spentAmount',
!         'remaining_amount': 'remainingAmount',
!         'timeout': 'timeout',
!         'make_deposit': 'makeDeposit'
      }
  
!     def __init__(self, allocation_id=None, address=None, payment_platform=None, total_amount=None, spent_amount=None, remaining_amount=None, timeout=None, make_deposit=None, local_vars_configuration=None):  # noqa: E501
          """Allocation - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
--- 32,70 ----
                              and the value is json key in definition.
      """
      openapi_types = {
!         "allocation_id": "str",
!         "address": "str",
!         "payment_platform": "str",
!         "total_amount": "str",
!         "spent_amount": "str",
!         "remaining_amount": "str",
!         "timeout": "datetime",
!         "make_deposit": "bool",
      }
  
      attribute_map = {
!         "allocation_id": "allocationId",
!         "address": "address",
!         "payment_platform": "paymentPlatform",
!         "total_amount": "totalAmount",
!         "spent_amount": "spentAmount",
!         "remaining_amount": "remainingAmount",
!         "timeout": "timeout",
!         "make_deposit": "makeDeposit",
      }
  
!     def __init__(
!         self,
!         allocation_id=None,
!         address=None,
!         payment_platform=None,
!         total_amount=None,
!         spent_amount=None,
!         remaining_amount=None,
!         timeout=None,
!         make_deposit=None,
!         local_vars_configuration=None,
!     ):  # noqa: E501
          """Allocation - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
***************
*** 100,107 ****
          :param allocation_id: The allocation_id of this Allocation.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and allocation_id is None:  # noqa: E501
!             raise ValueError("Invalid value for `allocation_id`, must not be `None`")  # noqa: E501
  
          self._allocation_id = allocation_id
  
--- 110,122 ----
          :param allocation_id: The allocation_id of this Allocation.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation
!             and allocation_id is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `allocation_id`, must not be `None`"
!             )  # noqa: E501
  
          self._allocation_id = allocation_id
  
***************
*** 165,172 ****
          :param total_amount: The total_amount of this Allocation.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and total_amount is None:  # noqa: E501
!             raise ValueError("Invalid value for `total_amount`, must not be `None`")  # noqa: E501
  
          self._total_amount = total_amount
  
--- 180,192 ----
          :param total_amount: The total_amount of this Allocation.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation
!             and total_amount is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `total_amount`, must not be `None`"
!             )  # noqa: E501
  
          self._total_amount = total_amount
  
***************
*** 188,195 ****
          :param spent_amount: The spent_amount of this Allocation.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and spent_amount is None:  # noqa: E501
!             raise ValueError("Invalid value for `spent_amount`, must not be `None`")  # noqa: E501
  
          self._spent_amount = spent_amount
  
--- 208,220 ----
          :param spent_amount: The spent_amount of this Allocation.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation
!             and spent_amount is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `spent_amount`, must not be `None`"
!             )  # noqa: E501
  
          self._spent_amount = spent_amount
  
***************
*** 211,218 ****
          :param remaining_amount: The remaining_amount of this Allocation.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and remaining_amount is None:  # noqa: E501
!             raise ValueError("Invalid value for `remaining_amount`, must not be `None`")  # noqa: E501
  
          self._remaining_amount = remaining_amount
  
--- 236,248 ----
          :param remaining_amount: The remaining_amount of this Allocation.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation
!             and remaining_amount is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `remaining_amount`, must not be `None`"
!             )  # noqa: E501
  
          self._remaining_amount = remaining_amount
  
***************
*** 255,262 ****
          :param make_deposit: The make_deposit of this Allocation.  # noqa: E501
          :type: bool
          """
!         if self.local_vars_configuration.client_side_validation and make_deposit is None:  # noqa: E501
!             raise ValueError("Invalid value for `make_deposit`, must not be `None`")  # noqa: E501
  
          self._make_deposit = make_deposit
  
--- 285,297 ----
          :param make_deposit: The make_deposit of this Allocation.  # noqa: E501
          :type: bool
          """
!         if (
!             self.local_vars_configuration.client_side_validation
!             and make_deposit is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `make_deposit`, must not be `None`"
!             )  # noqa: E501
  
          self._make_deposit = make_deposit
  
***************
*** 264,284 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 299,321 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_payment/models/debit_note.py src/ya_payment/models/debit_note.py
*** target/ya_payment/models/debit_note.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_payment/models/debit_note.py	2020-07-21 16:04:53.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_payment.configuration import Configuration
  
--- 13,18 ----
***************
*** 33,72 ****
                              and the value is json key in definition.
      """
      openapi_types = {
!         'debit_note_id': 'str',
!         'issuer_id': 'str',
!         'recipient_id': 'str',
!         'payee_addr': 'str',
!         'payer_addr': 'str',
!         'payment_platform': 'str',
!         'previous_debit_note_id': 'str',
!         'timestamp': 'datetime',
!         'agreement_id': 'str',
!         'activity_id': 'str',
!         'total_amount_due': 'str',
!         'usage_counter_vector': 'object',
!         'payment_due_date': 'datetime',
!         'status': 'InvoiceStatus'
      }
  
      attribute_map = {
!         'debit_note_id': 'debitNoteId',
!         'issuer_id': 'issuerId',
!         'recipient_id': 'recipientId',
!         'payee_addr': 'payeeAddr',
!         'payer_addr': 'payerAddr',
!         'payment_platform': 'paymentPlatform',
!         'previous_debit_note_id': 'previousDebitNoteId',
!         'timestamp': 'timestamp',
!         'agreement_id': 'agreementId',
!         'activity_id': 'activityId',
!         'total_amount_due': 'totalAmountDue',
!         'usage_counter_vector': 'usageCounterVector',
!         'payment_due_date': 'paymentDueDate',
!         'status': 'status'
      }
  
!     def __init__(self, debit_note_id=None, issuer_id=None, recipient_id=None, payee_addr=None, payer_addr=None, payment_platform=None, previous_debit_note_id=None, timestamp=None, agreement_id=None, activity_id=None, total_amount_due=None, usage_counter_vector=None, payment_due_date=None, status=None, local_vars_configuration=None):  # noqa: E501
          """DebitNote - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
--- 32,88 ----
                              and the value is json key in definition.
      """
      openapi_types = {
!         "debit_note_id": "str",
!         "issuer_id": "str",
!         "recipient_id": "str",
!         "payee_addr": "str",
!         "payer_addr": "str",
!         "payment_platform": "str",
!         "previous_debit_note_id": "str",
!         "timestamp": "datetime",
!         "agreement_id": "str",
!         "activity_id": "str",
!         "total_amount_due": "str",
!         "usage_counter_vector": "object",
!         "payment_due_date": "datetime",
!         "status": "InvoiceStatus",
      }
  
      attribute_map = {
!         "debit_note_id": "debitNoteId",
!         "issuer_id": "issuerId",
!         "recipient_id": "recipientId",
!         "payee_addr": "payeeAddr",
!         "payer_addr": "payerAddr",
!         "payment_platform": "paymentPlatform",
!         "previous_debit_note_id": "previousDebitNoteId",
!         "timestamp": "timestamp",
!         "agreement_id": "agreementId",
!         "activity_id": "activityId",
!         "total_amount_due": "totalAmountDue",
!         "usage_counter_vector": "usageCounterVector",
!         "payment_due_date": "paymentDueDate",
!         "status": "status",
      }
  
!     def __init__(
!         self,
!         debit_note_id=None,
!         issuer_id=None,
!         recipient_id=None,
!         payee_addr=None,
!         payer_addr=None,
!         payment_platform=None,
!         previous_debit_note_id=None,
!         timestamp=None,
!         agreement_id=None,
!         activity_id=None,
!         total_amount_due=None,
!         usage_counter_vector=None,
!         payment_due_date=None,
!         status=None,
!         local_vars_configuration=None,
!     ):  # noqa: E501
          """DebitNote - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
***************
*** 127,134 ****
          :param debit_note_id: The debit_note_id of this DebitNote.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and debit_note_id is None:  # noqa: E501
!             raise ValueError("Invalid value for `debit_note_id`, must not be `None`")  # noqa: E501
  
          self._debit_note_id = debit_note_id
  
--- 143,155 ----
          :param debit_note_id: The debit_note_id of this DebitNote.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation
!             and debit_note_id is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `debit_note_id`, must not be `None`"
!             )  # noqa: E501
  
          self._debit_note_id = debit_note_id
  
***************
*** 150,157 ****
          :param issuer_id: The issuer_id of this DebitNote.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and issuer_id is None:  # noqa: E501
!             raise ValueError("Invalid value for `issuer_id`, must not be `None`")  # noqa: E501
  
          self._issuer_id = issuer_id
  
--- 171,182 ----
          :param issuer_id: The issuer_id of this DebitNote.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation and issuer_id is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `issuer_id`, must not be `None`"
!             )  # noqa: E501
  
          self._issuer_id = issuer_id
  
***************
*** 173,180 ****
          :param recipient_id: The recipient_id of this DebitNote.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and recipient_id is None:  # noqa: E501
!             raise ValueError("Invalid value for `recipient_id`, must not be `None`")  # noqa: E501
  
          self._recipient_id = recipient_id
  
--- 198,210 ----
          :param recipient_id: The recipient_id of this DebitNote.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation
!             and recipient_id is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `recipient_id`, must not be `None`"
!             )  # noqa: E501
  
          self._recipient_id = recipient_id
  
***************
*** 280,287 ****
          :param timestamp: The timestamp of this DebitNote.  # noqa: E501
          :type: datetime
          """
!         if self.local_vars_configuration.client_side_validation and timestamp is None:  # noqa: E501
!             raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501
  
          self._timestamp = timestamp
  
--- 310,321 ----
          :param timestamp: The timestamp of this DebitNote.  # noqa: E501
          :type: datetime
          """
!         if (
!             self.local_vars_configuration.client_side_validation and timestamp is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `timestamp`, must not be `None`"
!             )  # noqa: E501
  
          self._timestamp = timestamp
  
***************
*** 303,310 ****
          :param agreement_id: The agreement_id of this DebitNote.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and agreement_id is None:  # noqa: E501
!             raise ValueError("Invalid value for `agreement_id`, must not be `None`")  # noqa: E501
  
          self._agreement_id = agreement_id
  
--- 337,349 ----
          :param agreement_id: The agreement_id of this DebitNote.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation
!             and agreement_id is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `agreement_id`, must not be `None`"
!             )  # noqa: E501
  
          self._agreement_id = agreement_id
  
***************
*** 326,333 ****
          :param activity_id: The activity_id of this DebitNote.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and activity_id is None:  # noqa: E501
!             raise ValueError("Invalid value for `activity_id`, must not be `None`")  # noqa: E501
  
          self._activity_id = activity_id
  
--- 365,376 ----
          :param activity_id: The activity_id of this DebitNote.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation and activity_id is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `activity_id`, must not be `None`"
!             )  # noqa: E501
  
          self._activity_id = activity_id
  
***************
*** 349,356 ****
          :param total_amount_due: The total_amount_due of this DebitNote.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and total_amount_due is None:  # noqa: E501
!             raise ValueError("Invalid value for `total_amount_due`, must not be `None`")  # noqa: E501
  
          self._total_amount_due = total_amount_due
  
--- 392,404 ----
          :param total_amount_due: The total_amount_due of this DebitNote.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation
!             and total_amount_due is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `total_amount_due`, must not be `None`"
!             )  # noqa: E501
  
          self._total_amount_due = total_amount_due
  
***************
*** 414,421 ****
          :param status: The status of this DebitNote.  # noqa: E501
          :type: InvoiceStatus
          """
!         if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
!             raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
  
          self._status = status
  
--- 462,473 ----
          :param status: The status of this DebitNote.  # noqa: E501
          :type: InvoiceStatus
          """
!         if (
!             self.local_vars_configuration.client_side_validation and status is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `status`, must not be `None`"
!             )  # noqa: E501
  
          self._status = status
  
***************
*** 423,443 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 475,497 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_payment/models/debit_note_event.py src/ya_payment/models/debit_note_event.py
*** target/ya_payment/models/debit_note_event.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_payment/models/debit_note_event.py	2020-07-21 16:04:53.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_payment.configuration import Configuration
  
--- 13,18 ----
***************
*** 33,52 ****
                              and the value is json key in definition.
      """
      openapi_types = {
!         'debit_note_id': 'str',
!         'timestamp': 'datetime',
!         'details': 'object',
!         'event_type': 'EventType'
      }
  
      attribute_map = {
!         'debit_note_id': 'debitNoteId',
!         'timestamp': 'timestamp',
!         'details': 'details',
!         'event_type': 'eventType'
      }
  
!     def __init__(self, debit_note_id=None, timestamp=None, details=None, event_type=None, local_vars_configuration=None):  # noqa: E501
          """DebitNoteEvent - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
--- 32,58 ----
                              and the value is json key in definition.
      """
      openapi_types = {
!         "debit_note_id": "str",
!         "timestamp": "datetime",
!         "details": "object",
!         "event_type": "EventType",
      }
  
      attribute_map = {
!         "debit_note_id": "debitNoteId",
!         "timestamp": "timestamp",
!         "details": "details",
!         "event_type": "eventType",
      }
  
!     def __init__(
!         self,
!         debit_note_id=None,
!         timestamp=None,
!         details=None,
!         event_type=None,
!         local_vars_configuration=None,
!     ):  # noqa: E501
          """DebitNoteEvent - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
***************
*** 82,89 ****
          :param debit_note_id: The debit_note_id of this DebitNoteEvent.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and debit_note_id is None:  # noqa: E501
!             raise ValueError("Invalid value for `debit_note_id`, must not be `None`")  # noqa: E501
  
          self._debit_note_id = debit_note_id
  
--- 88,100 ----
          :param debit_note_id: The debit_note_id of this DebitNoteEvent.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation
!             and debit_note_id is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `debit_note_id`, must not be `None`"
!             )  # noqa: E501
  
          self._debit_note_id = debit_note_id
  
***************
*** 105,112 ****
          :param timestamp: The timestamp of this DebitNoteEvent.  # noqa: E501
          :type: datetime
          """
!         if self.local_vars_configuration.client_side_validation and timestamp is None:  # noqa: E501
!             raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501
  
          self._timestamp = timestamp
  
--- 116,127 ----
          :param timestamp: The timestamp of this DebitNoteEvent.  # noqa: E501
          :type: datetime
          """
!         if (
!             self.local_vars_configuration.client_side_validation and timestamp is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `timestamp`, must not be `None`"
!             )  # noqa: E501
  
          self._timestamp = timestamp
  
***************
*** 149,156 ****
          :param event_type: The event_type of this DebitNoteEvent.  # noqa: E501
          :type: EventType
          """
!         if self.local_vars_configuration.client_side_validation and event_type is None:  # noqa: E501
!             raise ValueError("Invalid value for `event_type`, must not be `None`")  # noqa: E501
  
          self._event_type = event_type
  
--- 164,175 ----
          :param event_type: The event_type of this DebitNoteEvent.  # noqa: E501
          :type: EventType
          """
!         if (
!             self.local_vars_configuration.client_side_validation and event_type is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `event_type`, must not be `None`"
!             )  # noqa: E501
  
          self._event_type = event_type
  
***************
*** 158,178 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 177,199 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_payment/models/error_message.py src/ya_payment/models/error_message.py
*** target/ya_payment/models/error_message.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_payment/models/error_message.py	2020-07-21 16:04:53.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_payment.configuration import Configuration
  
--- 13,18 ----
***************
*** 32,44 ****
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {
!         'message': 'str'
!     }
! 
!     attribute_map = {
!         'message': 'message'
!     }
  
      def __init__(self, message=None, local_vars_configuration=None):  # noqa: E501
          """ErrorMessage - a model defined in OpenAPI"""  # noqa: E501
--- 31,39 ----
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {"message": "str"}
! 
!     attribute_map = {"message": "message"}
  
      def __init__(self, message=None, local_vars_configuration=None):  # noqa: E501
          """ErrorMessage - a model defined in OpenAPI"""  # noqa: E501
***************
*** 77,97 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 72,94 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_payment/models/event_type.py src/ya_payment/models/event_type.py
*** target/ya_payment/models/event_type.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_payment/models/event_type.py	2020-07-21 16:04:54.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_payment.configuration import Configuration
  
--- 13,18 ----
***************
*** 42,52 ****
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {
!     }
  
!     attribute_map = {
!     }
  
      def __init__(self, local_vars_configuration=None):  # noqa: E501
          """EventType - a model defined in OpenAPI"""  # noqa: E501
--- 41,49 ----
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {}
  
!     attribute_map = {}
  
      def __init__(self, local_vars_configuration=None):  # noqa: E501
          """EventType - a model defined in OpenAPI"""  # noqa: E501
***************
*** 59,79 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 56,78 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_payment/models/invoice.py src/ya_payment/models/invoice.py
*** target/ya_payment/models/invoice.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_payment/models/invoice.py	2020-07-21 16:04:54.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_payment.configuration import Configuration
  
--- 13,18 ----
***************
*** 33,70 ****
                              and the value is json key in definition.
      """
      openapi_types = {
!         'invoice_id': 'str',
!         'issuer_id': 'str',
!         'recipient_id': 'str',
!         'payee_addr': 'str',
!         'payer_addr': 'str',
!         'payment_platform': 'str',
!         'last_debit_note_id': 'str',
!         'timestamp': 'datetime',
!         'agreement_id': 'str',
!         'activity_ids': 'list[str]',
!         'amount': 'str',
!         'payment_due_date': 'datetime',
!         'status': 'InvoiceStatus'
      }
  
      attribute_map = {
!         'invoice_id': 'invoiceId',
!         'issuer_id': 'issuerId',
!         'recipient_id': 'recipientId',
!         'payee_addr': 'payeeAddr',
!         'payer_addr': 'payerAddr',
!         'payment_platform': 'paymentPlatform',
!         'last_debit_note_id': 'lastDebitNoteId',
!         'timestamp': 'timestamp',
!         'agreement_id': 'agreementId',
!         'activity_ids': 'activityIds',
!         'amount': 'amount',
!         'payment_due_date': 'paymentDueDate',
!         'status': 'status'
      }
  
!     def __init__(self, invoice_id=None, issuer_id=None, recipient_id=None, payee_addr=None, payer_addr=None, payment_platform=None, last_debit_note_id=None, timestamp=None, agreement_id=None, activity_ids=None, amount=None, payment_due_date=None, status=None, local_vars_configuration=None):  # noqa: E501
          """Invoice - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
--- 32,85 ----
                              and the value is json key in definition.
      """
      openapi_types = {
!         "invoice_id": "str",
!         "issuer_id": "str",
!         "recipient_id": "str",
!         "payee_addr": "str",
!         "payer_addr": "str",
!         "payment_platform": "str",
!         "last_debit_note_id": "str",
!         "timestamp": "datetime",
!         "agreement_id": "str",
!         "activity_ids": "list[str]",
!         "amount": "str",
!         "payment_due_date": "datetime",
!         "status": "InvoiceStatus",
      }
  
      attribute_map = {
!         "invoice_id": "invoiceId",
!         "issuer_id": "issuerId",
!         "recipient_id": "recipientId",
!         "payee_addr": "payeeAddr",
!         "payer_addr": "payerAddr",
!         "payment_platform": "paymentPlatform",
!         "last_debit_note_id": "lastDebitNoteId",
!         "timestamp": "timestamp",
!         "agreement_id": "agreementId",
!         "activity_ids": "activityIds",
!         "amount": "amount",
!         "payment_due_date": "paymentDueDate",
!         "status": "status",
      }
  
!     def __init__(
!         self,
!         invoice_id=None,
!         issuer_id=None,
!         recipient_id=None,
!         payee_addr=None,
!         payer_addr=None,
!         payment_platform=None,
!         last_debit_note_id=None,
!         timestamp=None,
!         agreement_id=None,
!         activity_ids=None,
!         amount=None,
!         payment_due_date=None,
!         status=None,
!         local_vars_configuration=None,
!     ):  # noqa: E501
          """Invoice - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
***************
*** 122,129 ****
          :param invoice_id: The invoice_id of this Invoice.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and invoice_id is None:  # noqa: E501
!             raise ValueError("Invalid value for `invoice_id`, must not be `None`")  # noqa: E501
  
          self._invoice_id = invoice_id
  
--- 137,148 ----
          :param invoice_id: The invoice_id of this Invoice.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation and invoice_id is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `invoice_id`, must not be `None`"
!             )  # noqa: E501
  
          self._invoice_id = invoice_id
  
***************
*** 145,152 ****
          :param issuer_id: The issuer_id of this Invoice.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and issuer_id is None:  # noqa: E501
!             raise ValueError("Invalid value for `issuer_id`, must not be `None`")  # noqa: E501
  
          self._issuer_id = issuer_id
  
--- 164,175 ----
          :param issuer_id: The issuer_id of this Invoice.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation and issuer_id is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `issuer_id`, must not be `None`"
!             )  # noqa: E501
  
          self._issuer_id = issuer_id
  
***************
*** 168,175 ****
          :param recipient_id: The recipient_id of this Invoice.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and recipient_id is None:  # noqa: E501
!             raise ValueError("Invalid value for `recipient_id`, must not be `None`")  # noqa: E501
  
          self._recipient_id = recipient_id
  
--- 191,203 ----
          :param recipient_id: The recipient_id of this Invoice.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation
!             and recipient_id is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `recipient_id`, must not be `None`"
!             )  # noqa: E501
  
          self._recipient_id = recipient_id
  
***************
*** 275,282 ****
          :param timestamp: The timestamp of this Invoice.  # noqa: E501
          :type: datetime
          """
!         if self.local_vars_configuration.client_side_validation and timestamp is None:  # noqa: E501
!             raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501
  
          self._timestamp = timestamp
  
--- 303,314 ----
          :param timestamp: The timestamp of this Invoice.  # noqa: E501
          :type: datetime
          """
!         if (
!             self.local_vars_configuration.client_side_validation and timestamp is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `timestamp`, must not be `None`"
!             )  # noqa: E501
  
          self._timestamp = timestamp
  
***************
*** 298,305 ****
          :param agreement_id: The agreement_id of this Invoice.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and agreement_id is None:  # noqa: E501
!             raise ValueError("Invalid value for `agreement_id`, must not be `None`")  # noqa: E501
  
          self._agreement_id = agreement_id
  
--- 330,342 ----
          :param agreement_id: The agreement_id of this Invoice.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation
!             and agreement_id is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `agreement_id`, must not be `None`"
!             )  # noqa: E501
  
          self._agreement_id = agreement_id
  
***************
*** 342,349 ****
          :param amount: The amount of this Invoice.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and amount is None:  # noqa: E501
!             raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501
  
          self._amount = amount
  
--- 379,390 ----
          :param amount: The amount of this Invoice.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation and amount is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `amount`, must not be `None`"
!             )  # noqa: E501
  
          self._amount = amount
  
***************
*** 365,372 ****
          :param payment_due_date: The payment_due_date of this Invoice.  # noqa: E501
          :type: datetime
          """
!         if self.local_vars_configuration.client_side_validation and payment_due_date is None:  # noqa: E501
!             raise ValueError("Invalid value for `payment_due_date`, must not be `None`")  # noqa: E501
  
          self._payment_due_date = payment_due_date
  
--- 406,418 ----
          :param payment_due_date: The payment_due_date of this Invoice.  # noqa: E501
          :type: datetime
          """
!         if (
!             self.local_vars_configuration.client_side_validation
!             and payment_due_date is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `payment_due_date`, must not be `None`"
!             )  # noqa: E501
  
          self._payment_due_date = payment_due_date
  
***************
*** 388,395 ****
          :param status: The status of this Invoice.  # noqa: E501
          :type: InvoiceStatus
          """
!         if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
!             raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
  
          self._status = status
  
--- 434,445 ----
          :param status: The status of this Invoice.  # noqa: E501
          :type: InvoiceStatus
          """
!         if (
!             self.local_vars_configuration.client_side_validation and status is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `status`, must not be `None`"
!             )  # noqa: E501
  
          self._status = status
  
***************
*** 397,417 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 447,469 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_payment/models/invoice_event.py src/ya_payment/models/invoice_event.py
*** target/ya_payment/models/invoice_event.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_payment/models/invoice_event.py	2020-07-21 16:04:54.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_payment.configuration import Configuration
  
--- 13,18 ----
***************
*** 33,52 ****
                              and the value is json key in definition.
      """
      openapi_types = {
!         'invoice_id': 'str',
!         'timestamp': 'datetime',
!         'details': 'object',
!         'event_type': 'EventType'
      }
  
      attribute_map = {
!         'invoice_id': 'invoiceId',
!         'timestamp': 'timestamp',
!         'details': 'details',
!         'event_type': 'eventType'
      }
  
!     def __init__(self, invoice_id=None, timestamp=None, details=None, event_type=None, local_vars_configuration=None):  # noqa: E501
          """InvoiceEvent - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
--- 32,58 ----
                              and the value is json key in definition.
      """
      openapi_types = {
!         "invoice_id": "str",
!         "timestamp": "datetime",
!         "details": "object",
!         "event_type": "EventType",
      }
  
      attribute_map = {
!         "invoice_id": "invoiceId",
!         "timestamp": "timestamp",
!         "details": "details",
!         "event_type": "eventType",
      }
  
!     def __init__(
!         self,
!         invoice_id=None,
!         timestamp=None,
!         details=None,
!         event_type=None,
!         local_vars_configuration=None,
!     ):  # noqa: E501
          """InvoiceEvent - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
***************
*** 82,89 ****
          :param invoice_id: The invoice_id of this InvoiceEvent.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and invoice_id is None:  # noqa: E501
!             raise ValueError("Invalid value for `invoice_id`, must not be `None`")  # noqa: E501
  
          self._invoice_id = invoice_id
  
--- 88,99 ----
          :param invoice_id: The invoice_id of this InvoiceEvent.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation and invoice_id is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `invoice_id`, must not be `None`"
!             )  # noqa: E501
  
          self._invoice_id = invoice_id
  
***************
*** 105,112 ****
          :param timestamp: The timestamp of this InvoiceEvent.  # noqa: E501
          :type: datetime
          """
!         if self.local_vars_configuration.client_side_validation and timestamp is None:  # noqa: E501
!             raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501
  
          self._timestamp = timestamp
  
--- 115,126 ----
          :param timestamp: The timestamp of this InvoiceEvent.  # noqa: E501
          :type: datetime
          """
!         if (
!             self.local_vars_configuration.client_side_validation and timestamp is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `timestamp`, must not be `None`"
!             )  # noqa: E501
  
          self._timestamp = timestamp
  
***************
*** 149,156 ****
          :param event_type: The event_type of this InvoiceEvent.  # noqa: E501
          :type: EventType
          """
!         if self.local_vars_configuration.client_side_validation and event_type is None:  # noqa: E501
!             raise ValueError("Invalid value for `event_type`, must not be `None`")  # noqa: E501
  
          self._event_type = event_type
  
--- 163,174 ----
          :param event_type: The event_type of this InvoiceEvent.  # noqa: E501
          :type: EventType
          """
!         if (
!             self.local_vars_configuration.client_side_validation and event_type is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `event_type`, must not be `None`"
!             )  # noqa: E501
  
          self._event_type = event_type
  
***************
*** 158,178 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 176,198 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_payment/models/invoice_status.py src/ya_payment/models/invoice_status.py
*** target/ya_payment/models/invoice_status.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_payment/models/invoice_status.py	2020-07-21 16:04:54.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_payment.configuration import Configuration
  
--- 13,18 ----
***************
*** 36,42 ****
      SETTLED = "SETTLED"
      CANCELLED = "CANCELLED"
  
!     allowable_values = [ISSUED, RECEIVED, ACCEPTED, REJECTED, FAILED, SETTLED, CANCELLED]  # noqa: E501
  
      """
      Attributes:
--- 35,49 ----
      SETTLED = "SETTLED"
      CANCELLED = "CANCELLED"
  
!     allowable_values = [
!         ISSUED,
!         RECEIVED,
!         ACCEPTED,
!         REJECTED,
!         FAILED,
!         SETTLED,
!         CANCELLED,
!     ]  # noqa: E501
  
      """
      Attributes:
***************
*** 45,55 ****
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {
!     }
  
!     attribute_map = {
!     }
  
      def __init__(self, local_vars_configuration=None):  # noqa: E501
          """InvoiceStatus - a model defined in OpenAPI"""  # noqa: E501
--- 52,60 ----
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {}
  
!     attribute_map = {}
  
      def __init__(self, local_vars_configuration=None):  # noqa: E501
          """InvoiceStatus - a model defined in OpenAPI"""  # noqa: E501
***************
*** 62,82 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 67,89 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_payment/models/payment.py src/ya_payment/models/payment.py
*** target/ya_payment/models/payment.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_payment/models/payment.py	2020-07-21 16:04:55.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_payment.configuration import Configuration
  
--- 13,18 ----
***************
*** 33,66 ****
                              and the value is json key in definition.
      """
      openapi_types = {
!         'payment_id': 'str',
!         'payer_id': 'str',
!         'payee_id': 'str',
!         'payer_addr': 'str',
!         'payee_addr': 'str',
!         'payment_platform': 'str',
!         'amount': 'str',
!         'timestamp': 'datetime',
!         'agreement_payments': 'list[AgreementPayment]',
!         'activity_payments': 'list[ActivityPayment]',
!         'details': 'str'
      }
  
      attribute_map = {
!         'payment_id': 'paymentId',
!         'payer_id': 'payerId',
!         'payee_id': 'payeeId',
!         'payer_addr': 'payerAddr',
!         'payee_addr': 'payeeAddr',
!         'payment_platform': 'paymentPlatform',
!         'amount': 'amount',
!         'timestamp': 'timestamp',
!         'agreement_payments': 'agreementPayments',
!         'activity_payments': 'activityPayments',
!         'details': 'details'
      }
  
!     def __init__(self, payment_id=None, payer_id=None, payee_id=None, payer_addr=None, payee_addr=None, payment_platform=None, amount=None, timestamp=None, agreement_payments=None, activity_payments=None, details=None, local_vars_configuration=None):  # noqa: E501
          """Payment - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
--- 32,79 ----
                              and the value is json key in definition.
      """
      openapi_types = {
!         "payment_id": "str",
!         "payer_id": "str",
!         "payee_id": "str",
!         "payer_addr": "str",
!         "payee_addr": "str",
!         "payment_platform": "str",
!         "amount": "str",
!         "timestamp": "datetime",
!         "agreement_payments": "list[AgreementPayment]",
!         "activity_payments": "list[ActivityPayment]",
!         "details": "str",
      }
  
      attribute_map = {
!         "payment_id": "paymentId",
!         "payer_id": "payerId",
!         "payee_id": "payeeId",
!         "payer_addr": "payerAddr",
!         "payee_addr": "payeeAddr",
!         "payment_platform": "paymentPlatform",
!         "amount": "amount",
!         "timestamp": "timestamp",
!         "agreement_payments": "agreementPayments",
!         "activity_payments": "activityPayments",
!         "details": "details",
      }
  
!     def __init__(
!         self,
!         payment_id=None,
!         payer_id=None,
!         payee_id=None,
!         payer_addr=None,
!         payee_addr=None,
!         payment_platform=None,
!         amount=None,
!         timestamp=None,
!         agreement_payments=None,
!         activity_payments=None,
!         details=None,
!         local_vars_configuration=None,
!     ):  # noqa: E501
          """Payment - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
***************
*** 109,116 ****
          :param payment_id: The payment_id of this Payment.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and payment_id is None:  # noqa: E501
!             raise ValueError("Invalid value for `payment_id`, must not be `None`")  # noqa: E501
  
          self._payment_id = payment_id
  
--- 122,133 ----
          :param payment_id: The payment_id of this Payment.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation and payment_id is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `payment_id`, must not be `None`"
!             )  # noqa: E501
  
          self._payment_id = payment_id
  
***************
*** 132,139 ****
          :param payer_id: The payer_id of this Payment.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and payer_id is None:  # noqa: E501
!             raise ValueError("Invalid value for `payer_id`, must not be `None`")  # noqa: E501
  
          self._payer_id = payer_id
  
--- 149,160 ----
          :param payer_id: The payer_id of this Payment.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation and payer_id is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `payer_id`, must not be `None`"
!             )  # noqa: E501
  
          self._payer_id = payer_id
  
***************
*** 155,162 ****
          :param payee_id: The payee_id of this Payment.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and payee_id is None:  # noqa: E501
!             raise ValueError("Invalid value for `payee_id`, must not be `None`")  # noqa: E501
  
          self._payee_id = payee_id
  
--- 176,187 ----
          :param payee_id: The payee_id of this Payment.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation and payee_id is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `payee_id`, must not be `None`"
!             )  # noqa: E501
  
          self._payee_id = payee_id
  
***************
*** 178,185 ****
          :param payer_addr: The payer_addr of this Payment.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and payer_addr is None:  # noqa: E501
!             raise ValueError("Invalid value for `payer_addr`, must not be `None`")  # noqa: E501
  
          self._payer_addr = payer_addr
  
--- 203,214 ----
          :param payer_addr: The payer_addr of this Payment.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation and payer_addr is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `payer_addr`, must not be `None`"
!             )  # noqa: E501
  
          self._payer_addr = payer_addr
  
***************
*** 201,208 ****
          :param payee_addr: The payee_addr of this Payment.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and payee_addr is None:  # noqa: E501
!             raise ValueError("Invalid value for `payee_addr`, must not be `None`")  # noqa: E501
  
          self._payee_addr = payee_addr
  
--- 230,241 ----
          :param payee_addr: The payee_addr of this Payment.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation and payee_addr is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `payee_addr`, must not be `None`"
!             )  # noqa: E501
  
          self._payee_addr = payee_addr
  
***************
*** 224,231 ****
          :param payment_platform: The payment_platform of this Payment.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and payment_platform is None:  # noqa: E501
!             raise ValueError("Invalid value for `payment_platform`, must not be `None`")  # noqa: E501
  
          self._payment_platform = payment_platform
  
--- 257,269 ----
          :param payment_platform: The payment_platform of this Payment.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation
!             and payment_platform is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `payment_platform`, must not be `None`"
!             )  # noqa: E501
  
          self._payment_platform = payment_platform
  
***************
*** 247,254 ****
          :param amount: The amount of this Payment.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and amount is None:  # noqa: E501
!             raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501
  
          self._amount = amount
  
--- 285,296 ----
          :param amount: The amount of this Payment.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation and amount is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `amount`, must not be `None`"
!             )  # noqa: E501
  
          self._amount = amount
  
***************
*** 270,277 ****
          :param timestamp: The timestamp of this Payment.  # noqa: E501
          :type: datetime
          """
!         if self.local_vars_configuration.client_side_validation and timestamp is None:  # noqa: E501
!             raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501
  
          self._timestamp = timestamp
  
--- 312,323 ----
          :param timestamp: The timestamp of this Payment.  # noqa: E501
          :type: datetime
          """
!         if (
!             self.local_vars_configuration.client_side_validation and timestamp is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `timestamp`, must not be `None`"
!             )  # noqa: E501
  
          self._timestamp = timestamp
  
***************
*** 293,300 ****
          :param agreement_payments: The agreement_payments of this Payment.  # noqa: E501
          :type: list[AgreementPayment]
          """
!         if self.local_vars_configuration.client_side_validation and agreement_payments is None:  # noqa: E501
!             raise ValueError("Invalid value for `agreement_payments`, must not be `None`")  # noqa: E501
  
          self._agreement_payments = agreement_payments
  
--- 339,351 ----
          :param agreement_payments: The agreement_payments of this Payment.  # noqa: E501
          :type: list[AgreementPayment]
          """
!         if (
!             self.local_vars_configuration.client_side_validation
!             and agreement_payments is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `agreement_payments`, must not be `None`"
!             )  # noqa: E501
  
          self._agreement_payments = agreement_payments
  
***************
*** 316,323 ****
          :param activity_payments: The activity_payments of this Payment.  # noqa: E501
          :type: list[ActivityPayment]
          """
!         if self.local_vars_configuration.client_side_validation and activity_payments is None:  # noqa: E501
!             raise ValueError("Invalid value for `activity_payments`, must not be `None`")  # noqa: E501
  
          self._activity_payments = activity_payments
  
--- 367,379 ----
          :param activity_payments: The activity_payments of this Payment.  # noqa: E501
          :type: list[ActivityPayment]
          """
!         if (
!             self.local_vars_configuration.client_side_validation
!             and activity_payments is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `activity_payments`, must not be `None`"
!             )  # noqa: E501
  
          self._activity_payments = activity_payments
  
***************
*** 339,346 ****
          :param details: The details of this Payment.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and details is None:  # noqa: E501
!             raise ValueError("Invalid value for `details`, must not be `None`")  # noqa: E501
  
          self._details = details
  
--- 395,406 ----
          :param details: The details of this Payment.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation and details is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `details`, must not be `None`"
!             )  # noqa: E501
  
          self._details = details
  
***************
*** 348,368 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 408,430 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_payment/models/rejection.py src/ya_payment/models/rejection.py
*** target/ya_payment/models/rejection.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_payment/models/rejection.py	2020-07-21 16:04:54.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_payment.configuration import Configuration
  
--- 13,18 ----
***************
*** 33,50 ****
                              and the value is json key in definition.
      """
      openapi_types = {
!         'rejection_reason': 'RejectionReason',
!         'total_amount_accepted': 'str',
!         'message': 'str'
      }
  
      attribute_map = {
!         'rejection_reason': 'rejectionReason',
!         'total_amount_accepted': 'totalAmountAccepted',
!         'message': 'message'
      }
  
!     def __init__(self, rejection_reason=None, total_amount_accepted=None, message=None, local_vars_configuration=None):  # noqa: E501
          """Rejection - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
--- 32,55 ----
                              and the value is json key in definition.
      """
      openapi_types = {
!         "rejection_reason": "RejectionReason",
!         "total_amount_accepted": "str",
!         "message": "str",
      }
  
      attribute_map = {
!         "rejection_reason": "rejectionReason",
!         "total_amount_accepted": "totalAmountAccepted",
!         "message": "message",
      }
  
!     def __init__(
!         self,
!         rejection_reason=None,
!         total_amount_accepted=None,
!         message=None,
!         local_vars_configuration=None,
!     ):  # noqa: E501
          """Rejection - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
***************
*** 78,85 ****
          :param rejection_reason: The rejection_reason of this Rejection.  # noqa: E501
          :type: RejectionReason
          """
!         if self.local_vars_configuration.client_side_validation and rejection_reason is None:  # noqa: E501
!             raise ValueError("Invalid value for `rejection_reason`, must not be `None`")  # noqa: E501
  
          self._rejection_reason = rejection_reason
  
--- 83,95 ----
          :param rejection_reason: The rejection_reason of this Rejection.  # noqa: E501
          :type: RejectionReason
          """
!         if (
!             self.local_vars_configuration.client_side_validation
!             and rejection_reason is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `rejection_reason`, must not be `None`"
!             )  # noqa: E501
  
          self._rejection_reason = rejection_reason
  
***************
*** 101,108 ****
          :param total_amount_accepted: The total_amount_accepted of this Rejection.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and total_amount_accepted is None:  # noqa: E501
!             raise ValueError("Invalid value for `total_amount_accepted`, must not be `None`")  # noqa: E501
  
          self._total_amount_accepted = total_amount_accepted
  
--- 111,123 ----
          :param total_amount_accepted: The total_amount_accepted of this Rejection.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation
!             and total_amount_accepted is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `total_amount_accepted`, must not be `None`"
!             )  # noqa: E501
  
          self._total_amount_accepted = total_amount_accepted
  
***************
*** 131,151 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 146,168 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_payment/models/rejection_reason.py src/ya_payment/models/rejection_reason.py
*** target/ya_payment/models/rejection_reason.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_payment/models/rejection_reason.py	2020-07-21 16:04:54.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_payment.configuration import Configuration
  
--- 13,18 ----
***************
*** 32,38 ****
      BAD_SERVICE = "BAD_SERVICE"
      INCORRECT_AMOUNT = "INCORRECT_AMOUNT"
  
!     allowable_values = [UNSOLICITED_SERVICE, BAD_SERVICE, INCORRECT_AMOUNT]  # noqa: E501
  
      """
      Attributes:
--- 31,41 ----
      BAD_SERVICE = "BAD_SERVICE"
      INCORRECT_AMOUNT = "INCORRECT_AMOUNT"
  
!     allowable_values = [
!         UNSOLICITED_SERVICE,
!         BAD_SERVICE,
!         INCORRECT_AMOUNT,
!     ]  # noqa: E501
  
      """
      Attributes:
***************
*** 41,51 ****
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {
!     }
  
!     attribute_map = {
!     }
  
      def __init__(self, local_vars_configuration=None):  # noqa: E501
          """RejectionReason - a model defined in OpenAPI"""  # noqa: E501
--- 44,52 ----
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {}
  
!     attribute_map = {}
  
      def __init__(self, local_vars_configuration=None):  # noqa: E501
          """RejectionReason - a model defined in OpenAPI"""  # noqa: E501
***************
*** 58,78 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 59,81 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_payment/rest.py src/ya_payment/rest.py
*** target/ya_payment/rest.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_payment/rest.py	2020-07-21 16:04:55.000000000 +0200
***************
*** 25,31 ****
  
  
  class RESTResponse(io.IOBase):
- 
      def __init__(self, resp, data):
          self.aiohttp_response = resp
          self.status = resp.status
--- 25,30 ----
***************
*** 42,48 ****
  
  
  class RESTClientObject(object):
- 
      def __init__(self, configuration, pools_size=4, maxsize=None):
  
          # maxsize is number of requests to host that are allowed in parallel
--- 41,46 ----
***************
*** 54,59 ****
--- 52,58 ----
              ca_certs = configuration.ssl_ca_cert
          else:
              import certifi
+ 
              # if not set certificate file, use Mozilla's root certificates.
              ca_certs = certifi.where()
  
***************
*** 67,91 ****
              ssl_context.check_hostname = False
              ssl_context.verify_mode = ssl.CERT_NONE
  
!         connector = aiohttp.TCPConnector(
!             limit=maxsize,
!             ssl=ssl_context
!         )
  
          self.proxy = configuration.proxy
          self.proxy_headers = configuration.proxy_headers
  
          # https pool manager
!         self.pool_manager = aiohttp.ClientSession(
!             connector=connector
!         )
  
      async def close(self):
          await self.pool_manager.close()
  
!     async def request(self, method, url, query_params=None, headers=None,
!                       body=None, post_params=None, _preload_content=True,
!                       _request_timeout=None):
          """Execute request
  
          :param method: http request method
--- 66,93 ----
              ssl_context.check_hostname = False
              ssl_context.verify_mode = ssl.CERT_NONE
  
!         connector = aiohttp.TCPConnector(limit=maxsize, ssl=ssl_context)
  
          self.proxy = configuration.proxy
          self.proxy_headers = configuration.proxy_headers
  
          # https pool manager
!         self.pool_manager = aiohttp.ClientSession(connector=connector)
  
      async def close(self):
          await self.pool_manager.close()
  
!     async def request(
!         self,
!         method,
!         url,
!         query_params=None,
!         headers=None,
!         body=None,
!         post_params=None,
!         _preload_content=True,
!         _request_timeout=None,
!     ):
          """Execute request
  
          :param method: http request method
***************
*** 104,111 ****
                                   (connection, read) timeouts.
          """
          method = method.upper()
!         assert method in ['GET', 'HEAD', 'DELETE', 'POST', 'PUT',
!                           'PATCH', 'OPTIONS']
  
          if post_params and body:
              raise ApiValueError(
--- 106,112 ----
                                   (connection, read) timeouts.
          """
          method = method.upper()
!         assert method in ["GET", "HEAD", "DELETE", "POST", "PUT", "PATCH", "OPTIONS"]
  
          if post_params and body:
              raise ApiValueError(
***************
*** 116,130 ****
          headers = headers or {}
          timeout = _request_timeout or 5 * 60
  
!         if 'Content-Type' not in headers:
!             headers['Content-Type'] = 'application/json'
  
!         args = {
!             "method": method,
!             "url": url,
!             "timeout": timeout,
!             "headers": headers
!         }
  
          if self.proxy:
              args["proxy"] = self.proxy
--- 117,126 ----
          headers = headers or {}
          timeout = _request_timeout or 5 * 60
  
!         if "Content-Type" not in headers:
!             headers["Content-Type"] = "application/json"
  
!         args = {"method": method, "url": url, "timeout": timeout, "headers": headers}
  
          if self.proxy:
              args["proxy"] = self.proxy
***************
*** 132,159 ****
              args["proxy_headers"] = self.proxy_headers
  
          if query_params:
!             args["url"] += '?' + urlencode(query_params)
  
          # For `POST`, `PUT`, `PATCH`, `OPTIONS`, `DELETE`
!         if method in ['POST', 'PUT', 'PATCH', 'OPTIONS', 'DELETE']:
!             if re.search('json', headers['Content-Type'], re.IGNORECASE):
                  if body is not None:
                      body = json.dumps(body)
                  args["data"] = body
!             elif headers['Content-Type'] == 'application/x-www-form-urlencoded':  # noqa: E501
                  args["data"] = aiohttp.FormData(post_params)
!             elif headers['Content-Type'] == 'multipart/form-data':
                  # must del headers['Content-Type'], or the correct
                  # Content-Type which generated by aiohttp
!                 del headers['Content-Type']
                  data = aiohttp.FormData()
                  for param in post_params:
                      k, v = param
                      if isinstance(v, tuple) and len(v) == 3:
!                         data.add_field(k,
!                                        value=v[1],
!                                        filename=v[0],
!                                        content_type=v[2])
                      else:
                          data.add_field(k, v)
                  args["data"] = data
--- 128,154 ----
              args["proxy_headers"] = self.proxy_headers
  
          if query_params:
!             args["url"] += "?" + urlencode(query_params)
  
          # For `POST`, `PUT`, `PATCH`, `OPTIONS`, `DELETE`
!         if method in ["POST", "PUT", "PATCH", "OPTIONS", "DELETE"]:
!             if re.search("json", headers["Content-Type"], re.IGNORECASE):
                  if body is not None:
                      body = json.dumps(body)
                  args["data"] = body
!             elif (
!                 headers["Content-Type"] == "application/x-www-form-urlencoded"
!             ):  # noqa: E501
                  args["data"] = aiohttp.FormData(post_params)
!             elif headers["Content-Type"] == "multipart/form-data":
                  # must del headers['Content-Type'], or the correct
                  # Content-Type which generated by aiohttp
!                 del headers["Content-Type"]
                  data = aiohttp.FormData()
                  for param in post_params:
                      k, v = param
                      if isinstance(v, tuple) and len(v) == 3:
!                         data.add_field(k, value=v[1], filename=v[0], content_type=v[2])
                      else:
                          data.add_field(k, v)
                  args["data"] = data
***************
*** 184,253 ****
  
          return r
  
!     async def GET(self, url, headers=None, query_params=None,
!                   _preload_content=True, _request_timeout=None):
!         return (await self.request("GET", url,
!                                    headers=headers,
!                                    _preload_content=_preload_content,
!                                    _request_timeout=_request_timeout,
!                                    query_params=query_params))
! 
!     async def HEAD(self, url, headers=None, query_params=None,
!                    _preload_content=True, _request_timeout=None):
!         return (await self.request("HEAD", url,
!                                    headers=headers,
!                                    _preload_content=_preload_content,
!                                    _request_timeout=_request_timeout,
!                                    query_params=query_params))
! 
!     async def OPTIONS(self, url, headers=None, query_params=None,
!                       post_params=None, body=None, _preload_content=True,
!                       _request_timeout=None):
!         return (await self.request("OPTIONS", url,
!                                    headers=headers,
!                                    query_params=query_params,
!                                    post_params=post_params,
!                                    _preload_content=_preload_content,
!                                    _request_timeout=_request_timeout,
!                                    body=body))
! 
!     async def DELETE(self, url, headers=None, query_params=None, body=None,
!                      _preload_content=True, _request_timeout=None):
!         return (await self.request("DELETE", url,
!                                    headers=headers,
!                                    query_params=query_params,
!                                    _preload_content=_preload_content,
!                                    _request_timeout=_request_timeout,
!                                    body=body))
! 
!     async def POST(self, url, headers=None, query_params=None,
!                    post_params=None, body=None, _preload_content=True,
!                    _request_timeout=None):
!         return (await self.request("POST", url,
!                                    headers=headers,
!                                    query_params=query_params,
!                                    post_params=post_params,
!                                    _preload_content=_preload_content,
!                                    _request_timeout=_request_timeout,
!                                    body=body))
! 
!     async def PUT(self, url, headers=None, query_params=None, post_params=None,
!                   body=None, _preload_content=True, _request_timeout=None):
!         return (await self.request("PUT", url,
!                                    headers=headers,
!                                    query_params=query_params,
!                                    post_params=post_params,
!                                    _preload_content=_preload_content,
!                                    _request_timeout=_request_timeout,
!                                    body=body))
! 
!     async def PATCH(self, url, headers=None, query_params=None,
!                     post_params=None, body=None, _preload_content=True,
!                     _request_timeout=None):
!         return (await self.request("PATCH", url,
!                                    headers=headers,
!                                    query_params=query_params,
!                                    post_params=post_params,
!                                    _preload_content=_preload_content,
!                                    _request_timeout=_request_timeout,
!                                    body=body))
--- 179,317 ----
  
          return r
  
!     async def GET(
!         self,
!         url,
!         headers=None,
!         query_params=None,
!         _preload_content=True,
!         _request_timeout=None,
!     ):
!         return await self.request(
!             "GET",
!             url,
!             headers=headers,
!             _preload_content=_preload_content,
!             _request_timeout=_request_timeout,
!             query_params=query_params,
!         )
! 
!     async def HEAD(
!         self,
!         url,
!         headers=None,
!         query_params=None,
!         _preload_content=True,
!         _request_timeout=None,
!     ):
!         return await self.request(
!             "HEAD",
!             url,
!             headers=headers,
!             _preload_content=_preload_content,
!             _request_timeout=_request_timeout,
!             query_params=query_params,
!         )
! 
!     async def OPTIONS(
!         self,
!         url,
!         headers=None,
!         query_params=None,
!         post_params=None,
!         body=None,
!         _preload_content=True,
!         _request_timeout=None,
!     ):
!         return await self.request(
!             "OPTIONS",
!             url,
!             headers=headers,
!             query_params=query_params,
!             post_params=post_params,
!             _preload_content=_preload_content,
!             _request_timeout=_request_timeout,
!             body=body,
!         )
! 
!     async def DELETE(
!         self,
!         url,
!         headers=None,
!         query_params=None,
!         body=None,
!         _preload_content=True,
!         _request_timeout=None,
!     ):
!         return await self.request(
!             "DELETE",
!             url,
!             headers=headers,
!             query_params=query_params,
!             _preload_content=_preload_content,
!             _request_timeout=_request_timeout,
!             body=body,
!         )
! 
!     async def POST(
!         self,
!         url,
!         headers=None,
!         query_params=None,
!         post_params=None,
!         body=None,
!         _preload_content=True,
!         _request_timeout=None,
!     ):
!         return await self.request(
!             "POST",
!             url,
!             headers=headers,
!             query_params=query_params,
!             post_params=post_params,
!             _preload_content=_preload_content,
!             _request_timeout=_request_timeout,
!             body=body,
!         )
! 
!     async def PUT(
!         self,
!         url,
!         headers=None,
!         query_params=None,
!         post_params=None,
!         body=None,
!         _preload_content=True,
!         _request_timeout=None,
!     ):
!         return await self.request(
!             "PUT",
!             url,
!             headers=headers,
!             query_params=query_params,
!             post_params=post_params,
!             _preload_content=_preload_content,
!             _request_timeout=_request_timeout,
!             body=body,
!         )
! 
!     async def PATCH(
!         self,
!         url,
!         headers=None,
!         query_params=None,
!         post_params=None,
!         body=None,
!         _preload_content=True,
!         _request_timeout=None,
!     ):
!         return await self.request(
!             "PATCH",
!             url,
!             headers=headers,
!             query_params=query_params,
!             post_params=post_params,
!             _preload_content=_preload_content,
!             _request_timeout=_request_timeout,
!             body=body,
!         )
diff -r -c target/ya_payment/test/test_acceptance.py src/ya_payment/test/test_acceptance.py
*** target/ya_payment/test/test_acceptance.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_payment/test/test_acceptance.py	2020-07-21 16:04:54.000000000 +0200
***************
*** 10,17 ****
  """
  
  
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 10,15 ----
***************
*** 19,24 ****
--- 17,23 ----
  from ya_payment.models.acceptance import Acceptance  # noqa: E501
  from ya_payment.rest import ApiException
  
+ 
  class TestAcceptance(unittest.TestCase):
      """Acceptance unit test stubs"""
  
***************
*** 34,49 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_payment.models.acceptance.Acceptance()  # noqa: E501
!         if include_optional :
!             return Acceptance(
!                 total_amount_accepted = '0', 
!                 allocation_id = '0'
!             )
!         else :
!             return Acceptance(
!                 total_amount_accepted = '0',
!                 allocation_id = '0',
!         )
  
      def testAcceptance(self):
          """Test Acceptance"""
--- 33,42 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_payment.models.acceptance.Acceptance()  # noqa: E501
!         if include_optional:
!             return Acceptance(total_amount_accepted="0", allocation_id="0")
!         else:
!             return Acceptance(total_amount_accepted="0", allocation_id="0",)
  
      def testAcceptance(self):
          """Test Acceptance"""
***************
*** 51,55 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 44,48 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_payment/test/test_activity_payment.py src/ya_payment/test/test_activity_payment.py
*** target/ya_payment/test/test_activity_payment.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_payment/test/test_activity_payment.py	2020-07-21 16:04:54.000000000 +0200
***************
*** 10,17 ****
  """
  
  
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 10,15 ----
***************
*** 19,24 ****
--- 17,23 ----
  from ya_payment.models.activity_payment import ActivityPayment  # noqa: E501
  from ya_payment.rest import ApiException
  
+ 
  class TestActivityPayment(unittest.TestCase):
      """ActivityPayment unit test stubs"""
  
***************
*** 34,50 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_payment.models.activity_payment.ActivityPayment()  # noqa: E501
!         if include_optional :
!             return ActivityPayment(
!                 activity_id = '0', 
!                 amount = '0', 
!                 allocation_id = '0'
!             )
!         else :
!             return ActivityPayment(
!                 activity_id = '0',
!                 amount = '0',
!         )
  
      def testActivityPayment(self):
          """Test ActivityPayment"""
--- 33,42 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_payment.models.activity_payment.ActivityPayment()  # noqa: E501
!         if include_optional:
!             return ActivityPayment(activity_id="0", amount="0", allocation_id="0")
!         else:
!             return ActivityPayment(activity_id="0", amount="0",)
  
      def testActivityPayment(self):
          """Test ActivityPayment"""
***************
*** 52,56 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 44,48 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_payment/test/test_agreement_payment.py src/ya_payment/test/test_agreement_payment.py
*** target/ya_payment/test/test_agreement_payment.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_payment/test/test_agreement_payment.py	2020-07-21 16:04:55.000000000 +0200
***************
*** 10,17 ****
  """
  
  
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 10,15 ----
***************
*** 19,24 ****
--- 17,23 ----
  from ya_payment.models.agreement_payment import AgreementPayment  # noqa: E501
  from ya_payment.rest import ApiException
  
+ 
  class TestAgreementPayment(unittest.TestCase):
      """AgreementPayment unit test stubs"""
  
***************
*** 34,50 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_payment.models.agreement_payment.AgreementPayment()  # noqa: E501
!         if include_optional :
!             return AgreementPayment(
!                 agreement_id = '0', 
!                 amount = '0', 
!                 allocation_id = '0'
!             )
!         else :
!             return AgreementPayment(
!                 agreement_id = '0',
!                 amount = '0',
!         )
  
      def testAgreementPayment(self):
          """Test AgreementPayment"""
--- 33,42 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_payment.models.agreement_payment.AgreementPayment()  # noqa: E501
!         if include_optional:
!             return AgreementPayment(agreement_id="0", amount="0", allocation_id="0")
!         else:
!             return AgreementPayment(agreement_id="0", amount="0",)
  
      def testAgreementPayment(self):
          """Test AgreementPayment"""
***************
*** 52,56 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 44,48 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_payment/test/test_allocation.py src/ya_payment/test/test_allocation.py
*** target/ya_payment/test/test_allocation.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_payment/test/test_allocation.py	2020-07-21 16:04:55.000000000 +0200
***************
*** 10,17 ****
  """
  
  
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 10,15 ----
***************
*** 19,24 ****
--- 17,23 ----
  from ya_payment.models.allocation import Allocation  # noqa: E501
  from ya_payment.rest import ApiException
  
+ 
  class TestAllocation(unittest.TestCase):
      """Allocation unit test stubs"""
  
***************
*** 34,58 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_payment.models.allocation.Allocation()  # noqa: E501
!         if include_optional :
              return Allocation(
!                 allocation_id = '0', 
!                 address = '0', 
!                 payment_platform = '0', 
!                 total_amount = '0', 
!                 spent_amount = '0', 
!                 remaining_amount = '0', 
!                 timeout = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
!                 make_deposit = True
              )
!         else :
              return Allocation(
!                 allocation_id = '0',
!                 total_amount = '0',
!                 spent_amount = '0',
!                 remaining_amount = '0',
!                 make_deposit = True,
!         )
  
      def testAllocation(self):
          """Test Allocation"""
--- 33,59 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_payment.models.allocation.Allocation()  # noqa: E501
!         if include_optional:
              return Allocation(
!                 allocation_id="0",
!                 address="0",
!                 payment_platform="0",
!                 total_amount="0",
!                 spent_amount="0",
!                 remaining_amount="0",
!                 timeout=datetime.datetime.strptime(
!                     "2013-10-20 19:20:30.00", "%Y-%m-%d %H:%M:%S.%f"
!                 ),
!                 make_deposit=True,
              )
!         else:
              return Allocation(
!                 allocation_id="0",
!                 total_amount="0",
!                 spent_amount="0",
!                 remaining_amount="0",
!                 make_deposit=True,
!             )
  
      def testAllocation(self):
          """Test Allocation"""
***************
*** 60,64 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 61,65 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_payment/test/test_debit_note.py src/ya_payment/test/test_debit_note.py
*** target/ya_payment/test/test_debit_note.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_payment/test/test_debit_note.py	2020-07-21 16:04:55.000000000 +0200
***************
*** 10,17 ****
  """
  
  
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 10,15 ----
***************
*** 19,24 ****
--- 17,23 ----
  from ya_payment.models.debit_note import DebitNote  # noqa: E501
  from ya_payment.rest import ApiException
  
+ 
  class TestDebitNote(unittest.TestCase):
      """DebitNote unit test stubs"""
  
***************
*** 34,67 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_payment.models.debit_note.DebitNote()  # noqa: E501
!         if include_optional :
              return DebitNote(
!                 debit_note_id = '0', 
!                 issuer_id = '0', 
!                 recipient_id = '0', 
!                 payee_addr = '0', 
!                 payer_addr = '0', 
!                 payment_platform = '0', 
!                 previous_debit_note_id = '0', 
!                 timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
!                 agreement_id = '0', 
!                 activity_id = '0', 
!                 total_amount_due = '0', 
!                 usage_counter_vector = None, 
!                 payment_due_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
!                 status = 'ISSUED'
              )
!         else :
              return DebitNote(
!                 debit_note_id = '0',
!                 issuer_id = '0',
!                 recipient_id = '0',
!                 timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
!                 agreement_id = '0',
!                 activity_id = '0',
!                 total_amount_due = '0',
!                 status = 'ISSUED',
!         )
  
      def testDebitNote(self):
          """Test DebitNote"""
--- 33,72 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_payment.models.debit_note.DebitNote()  # noqa: E501
!         if include_optional:
              return DebitNote(
!                 debit_note_id="0",
!                 issuer_id="0",
!                 recipient_id="0",
!                 payee_addr="0",
!                 payer_addr="0",
!                 payment_platform="0",
!                 previous_debit_note_id="0",
!                 timestamp=datetime.datetime.strptime(
!                     "2013-10-20 19:20:30.00", "%Y-%m-%d %H:%M:%S.%f"
!                 ),
!                 agreement_id="0",
!                 activity_id="0",
!                 total_amount_due="0",
!                 usage_counter_vector=None,
!                 payment_due_date=datetime.datetime.strptime(
!                     "2013-10-20 19:20:30.00", "%Y-%m-%d %H:%M:%S.%f"
!                 ),
!                 status="ISSUED",
              )
!         else:
              return DebitNote(
!                 debit_note_id="0",
!                 issuer_id="0",
!                 recipient_id="0",
!                 timestamp=datetime.datetime.strptime(
!                     "2013-10-20 19:20:30.00", "%Y-%m-%d %H:%M:%S.%f"
!                 ),
!                 agreement_id="0",
!                 activity_id="0",
!                 total_amount_due="0",
!                 status="ISSUED",
!             )
  
      def testDebitNote(self):
          """Test DebitNote"""
***************
*** 69,73 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 74,78 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_payment/test/test_debit_note_event.py src/ya_payment/test/test_debit_note_event.py
*** target/ya_payment/test/test_debit_note_event.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_payment/test/test_debit_note_event.py	2020-07-21 16:04:55.000000000 +0200
***************
*** 10,17 ****
  """
  
  
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 10,15 ----
***************
*** 19,24 ****
--- 17,23 ----
  from ya_payment.models.debit_note_event import DebitNoteEvent  # noqa: E501
  from ya_payment.rest import ApiException
  
+ 
  class TestDebitNoteEvent(unittest.TestCase):
      """DebitNoteEvent unit test stubs"""
  
***************
*** 34,52 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_payment.models.debit_note_event.DebitNoteEvent()  # noqa: E501
!         if include_optional :
              return DebitNoteEvent(
!                 debit_note_id = '0', 
!                 timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
!                 details = None, 
!                 event_type = 'RECEIVED'
              )
!         else :
              return DebitNoteEvent(
!                 debit_note_id = '0',
!                 timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
!                 event_type = 'RECEIVED',
!         )
  
      def testDebitNoteEvent(self):
          """Test DebitNoteEvent"""
--- 33,55 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_payment.models.debit_note_event.DebitNoteEvent()  # noqa: E501
!         if include_optional:
              return DebitNoteEvent(
!                 debit_note_id="0",
!                 timestamp=datetime.datetime.strptime(
!                     "2013-10-20 19:20:30.00", "%Y-%m-%d %H:%M:%S.%f"
!                 ),
!                 details=None,
!                 event_type="RECEIVED",
              )
!         else:
              return DebitNoteEvent(
!                 debit_note_id="0",
!                 timestamp=datetime.datetime.strptime(
!                     "2013-10-20 19:20:30.00", "%Y-%m-%d %H:%M:%S.%f"
!                 ),
!                 event_type="RECEIVED",
!             )
  
      def testDebitNoteEvent(self):
          """Test DebitNoteEvent"""
***************
*** 54,58 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 57,61 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_payment/test/test_error_message.py src/ya_payment/test/test_error_message.py
*** target/ya_payment/test/test_error_message.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_payment/test/test_error_message.py	2020-07-21 16:04:55.000000000 +0200
***************
*** 10,17 ****
  """
  
  
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 10,15 ----
***************
*** 19,24 ****
--- 17,23 ----
  from ya_payment.models.error_message import ErrorMessage  # noqa: E501
  from ya_payment.rest import ApiException
  
+ 
  class TestErrorMessage(unittest.TestCase):
      """ErrorMessage unit test stubs"""
  
***************
*** 34,46 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_payment.models.error_message.ErrorMessage()  # noqa: E501
!         if include_optional :
!             return ErrorMessage(
!                 message = '0'
!             )
!         else :
!             return ErrorMessage(
!         )
  
      def testErrorMessage(self):
          """Test ErrorMessage"""
--- 33,42 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_payment.models.error_message.ErrorMessage()  # noqa: E501
!         if include_optional:
!             return ErrorMessage(message="0")
!         else:
!             return ErrorMessage()
  
      def testErrorMessage(self):
          """Test ErrorMessage"""
***************
*** 48,52 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 44,48 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_payment/test/test_event_type.py src/ya_payment/test/test_event_type.py
*** target/ya_payment/test/test_event_type.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_payment/test/test_event_type.py	2020-07-21 16:04:55.000000000 +0200
***************
*** 10,17 ****
  """
  
  
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 10,15 ----
***************
*** 19,24 ****
--- 17,23 ----
  from ya_payment.models.event_type import EventType  # noqa: E501
  from ya_payment.rest import ApiException
  
+ 
  class TestEventType(unittest.TestCase):
      """EventType unit test stubs"""
  
***************
*** 34,45 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_payment.models.event_type.EventType()  # noqa: E501
!         if include_optional :
!             return EventType(
!             )
!         else :
!             return EventType(
!         )
  
      def testEventType(self):
          """Test EventType"""
--- 33,42 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_payment.models.event_type.EventType()  # noqa: E501
!         if include_optional:
!             return EventType()
!         else:
!             return EventType()
  
      def testEventType(self):
          """Test EventType"""
***************
*** 47,51 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 44,48 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_payment/test/test_invoice.py src/ya_payment/test/test_invoice.py
*** target/ya_payment/test/test_invoice.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_payment/test/test_invoice.py	2020-07-21 16:04:55.000000000 +0200
***************
*** 10,17 ****
  """
  
  
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 10,15 ----
***************
*** 19,24 ****
--- 17,23 ----
  from ya_payment.models.invoice import Invoice  # noqa: E501
  from ya_payment.rest import ApiException
  
+ 
  class TestInvoice(unittest.TestCase):
      """Invoice unit test stubs"""
  
***************
*** 34,68 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_payment.models.invoice.Invoice()  # noqa: E501
!         if include_optional :
              return Invoice(
!                 invoice_id = '0', 
!                 issuer_id = '0', 
!                 recipient_id = '0', 
!                 payee_addr = '0', 
!                 payer_addr = '0', 
!                 payment_platform = '0', 
!                 last_debit_note_id = '0', 
!                 timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
!                 agreement_id = '0', 
!                 activity_ids = [
!                     '0'
!                     ], 
!                 amount = '0', 
!                 payment_due_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
!                 status = 'ISSUED'
              )
!         else :
              return Invoice(
!                 invoice_id = '0',
!                 issuer_id = '0',
!                 recipient_id = '0',
!                 timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
!                 agreement_id = '0',
!                 amount = '0',
!                 payment_due_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
!                 status = 'ISSUED',
!         )
  
      def testInvoice(self):
          """Test Invoice"""
--- 33,73 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_payment.models.invoice.Invoice()  # noqa: E501
!         if include_optional:
              return Invoice(
!                 invoice_id="0",
!                 issuer_id="0",
!                 recipient_id="0",
!                 payee_addr="0",
!                 payer_addr="0",
!                 payment_platform="0",
!                 last_debit_note_id="0",
!                 timestamp=datetime.datetime.strptime(
!                     "2013-10-20 19:20:30.00", "%Y-%m-%d %H:%M:%S.%f"
!                 ),
!                 agreement_id="0",
!                 activity_ids=["0"],
!                 amount="0",
!                 payment_due_date=datetime.datetime.strptime(
!                     "2013-10-20 19:20:30.00", "%Y-%m-%d %H:%M:%S.%f"
!                 ),
!                 status="ISSUED",
              )
!         else:
              return Invoice(
!                 invoice_id="0",
!                 issuer_id="0",
!                 recipient_id="0",
!                 timestamp=datetime.datetime.strptime(
!                     "2013-10-20 19:20:30.00", "%Y-%m-%d %H:%M:%S.%f"
!                 ),
!                 agreement_id="0",
!                 amount="0",
!                 payment_due_date=datetime.datetime.strptime(
!                     "2013-10-20 19:20:30.00", "%Y-%m-%d %H:%M:%S.%f"
!                 ),
!                 status="ISSUED",
!             )
  
      def testInvoice(self):
          """Test Invoice"""
***************
*** 70,74 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 75,79 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_payment/test/test_invoice_event.py src/ya_payment/test/test_invoice_event.py
*** target/ya_payment/test/test_invoice_event.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_payment/test/test_invoice_event.py	2020-07-21 16:04:55.000000000 +0200
***************
*** 10,17 ****
  """
  
  
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 10,15 ----
***************
*** 19,24 ****
--- 17,23 ----
  from ya_payment.models.invoice_event import InvoiceEvent  # noqa: E501
  from ya_payment.rest import ApiException
  
+ 
  class TestInvoiceEvent(unittest.TestCase):
      """InvoiceEvent unit test stubs"""
  
***************
*** 34,52 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_payment.models.invoice_event.InvoiceEvent()  # noqa: E501
!         if include_optional :
              return InvoiceEvent(
!                 invoice_id = '0', 
!                 timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
!                 details = None, 
!                 event_type = 'RECEIVED'
              )
!         else :
              return InvoiceEvent(
!                 invoice_id = '0',
!                 timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
!                 event_type = 'RECEIVED',
!         )
  
      def testInvoiceEvent(self):
          """Test InvoiceEvent"""
--- 33,55 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_payment.models.invoice_event.InvoiceEvent()  # noqa: E501
!         if include_optional:
              return InvoiceEvent(
!                 invoice_id="0",
!                 timestamp=datetime.datetime.strptime(
!                     "2013-10-20 19:20:30.00", "%Y-%m-%d %H:%M:%S.%f"
!                 ),
!                 details=None,
!                 event_type="RECEIVED",
              )
!         else:
              return InvoiceEvent(
!                 invoice_id="0",
!                 timestamp=datetime.datetime.strptime(
!                     "2013-10-20 19:20:30.00", "%Y-%m-%d %H:%M:%S.%f"
!                 ),
!                 event_type="RECEIVED",
!             )
  
      def testInvoiceEvent(self):
          """Test InvoiceEvent"""
***************
*** 54,58 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 57,61 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_payment/test/test_invoice_status.py src/ya_payment/test/test_invoice_status.py
*** target/ya_payment/test/test_invoice_status.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_payment/test/test_invoice_status.py	2020-07-21 16:04:55.000000000 +0200
***************
*** 10,17 ****
  """
  
  
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 10,15 ----
***************
*** 19,24 ****
--- 17,23 ----
  from ya_payment.models.invoice_status import InvoiceStatus  # noqa: E501
  from ya_payment.rest import ApiException
  
+ 
  class TestInvoiceStatus(unittest.TestCase):
      """InvoiceStatus unit test stubs"""
  
***************
*** 34,45 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_payment.models.invoice_status.InvoiceStatus()  # noqa: E501
!         if include_optional :
!             return InvoiceStatus(
!             )
!         else :
!             return InvoiceStatus(
!         )
  
      def testInvoiceStatus(self):
          """Test InvoiceStatus"""
--- 33,42 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_payment.models.invoice_status.InvoiceStatus()  # noqa: E501
!         if include_optional:
!             return InvoiceStatus()
!         else:
!             return InvoiceStatus()
  
      def testInvoiceStatus(self):
          """Test InvoiceStatus"""
***************
*** 47,51 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 44,48 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_payment/test/test_payment.py src/ya_payment/test/test_payment.py
*** target/ya_payment/test/test_payment.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_payment/test/test_payment.py	2020-07-21 16:04:55.000000000 +0200
***************
*** 10,17 ****
  """
  
  
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 10,15 ----
***************
*** 19,24 ****
--- 17,23 ----
  from ya_payment.models.payment import Payment  # noqa: E501
  from ya_payment.rest import ApiException
  
+ 
  class TestPayment(unittest.TestCase):
      """Payment unit test stubs"""
  
***************
*** 34,87 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_payment.models.payment.Payment()  # noqa: E501
!         if include_optional :
              return Payment(
!                 payment_id = '0', 
!                 payer_id = '0', 
!                 payee_id = '0', 
!                 payer_addr = '0', 
!                 payee_addr = '0', 
!                 payment_platform = '0', 
!                 amount = '0', 
!                 timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
!                 agreement_payments = [
                      ya_payment.models.agreement_payment.AgreementPayment(
!                         agreement_id = '0', 
!                         amount = '0', 
!                         allocation_id = '0', )
!                     ], 
!                 activity_payments = [
                      ya_payment.models.activity_payment.ActivityPayment(
!                         activity_id = '0', 
!                         amount = '0', 
!                         allocation_id = '0', )
!                     ], 
!                 details = 'YQ=='
              )
!         else :
              return Payment(
!                 payment_id = '0',
!                 payer_id = '0',
!                 payee_id = '0',
!                 payer_addr = '0',
!                 payee_addr = '0',
!                 payment_platform = '0',
!                 amount = '0',
!                 timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
!                 agreement_payments = [
                      ya_payment.models.agreement_payment.AgreementPayment(
!                         agreement_id = '0', 
!                         amount = '0', 
!                         allocation_id = '0', )
!                     ],
!                 activity_payments = [
                      ya_payment.models.activity_payment.ActivityPayment(
!                         activity_id = '0', 
!                         amount = '0', 
!                         allocation_id = '0', )
!                     ],
!                 details = 'YQ==',
!         )
  
      def testPayment(self):
          """Test Payment"""
--- 33,86 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_payment.models.payment.Payment()  # noqa: E501
!         if include_optional:
              return Payment(
!                 payment_id="0",
!                 payer_id="0",
!                 payee_id="0",
!                 payer_addr="0",
!                 payee_addr="0",
!                 payment_platform="0",
!                 amount="0",
!                 timestamp=datetime.datetime.strptime(
!                     "2013-10-20 19:20:30.00", "%Y-%m-%d %H:%M:%S.%f"
!                 ),
!                 agreement_payments=[
                      ya_payment.models.agreement_payment.AgreementPayment(
!                         agreement_id="0", amount="0", allocation_id="0",
!                     )
!                 ],
!                 activity_payments=[
                      ya_payment.models.activity_payment.ActivityPayment(
!                         activity_id="0", amount="0", allocation_id="0",
!                     )
!                 ],
!                 details="YQ==",
              )
!         else:
              return Payment(
!                 payment_id="0",
!                 payer_id="0",
!                 payee_id="0",
!                 payer_addr="0",
!                 payee_addr="0",
!                 payment_platform="0",
!                 amount="0",
!                 timestamp=datetime.datetime.strptime(
!                     "2013-10-20 19:20:30.00", "%Y-%m-%d %H:%M:%S.%f"
!                 ),
!                 agreement_payments=[
                      ya_payment.models.agreement_payment.AgreementPayment(
!                         agreement_id="0", amount="0", allocation_id="0",
!                     )
!                 ],
!                 activity_payments=[
                      ya_payment.models.activity_payment.ActivityPayment(
!                         activity_id="0", amount="0", allocation_id="0",
!                     )
!                 ],
!                 details="YQ==",
!             )
  
      def testPayment(self):
          """Test Payment"""
***************
*** 89,93 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 88,92 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_payment/test/test_provider_api.py src/ya_payment/test/test_provider_api.py
*** target/ya_payment/test/test_provider_api.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_payment/test/test_provider_api.py	2020-07-21 16:04:55.000000000 +0200
***************
*** 10,17 ****
  """
  
  
- from __future__ import absolute_import
- 
  import unittest
  
  import ya_payment
--- 10,15 ----
***************
*** 141,145 ****
          pass
  
  
! if __name__ == '__main__':
      unittest.main()
--- 139,143 ----
          pass
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_payment/test/test_rejection.py src/ya_payment/test/test_rejection.py
*** target/ya_payment/test/test_rejection.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_payment/test/test_rejection.py	2020-07-21 16:04:55.000000000 +0200
***************
*** 10,17 ****
  """
  
  
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 10,15 ----
***************
*** 19,24 ****
--- 17,23 ----
  from ya_payment.models.rejection import Rejection  # noqa: E501
  from ya_payment.rest import ApiException
  
+ 
  class TestRejection(unittest.TestCase):
      """Rejection unit test stubs"""
  
***************
*** 34,50 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_payment.models.rejection.Rejection()  # noqa: E501
!         if include_optional :
              return Rejection(
!                 rejection_reason = 'UNSOLICITED_SERVICE', 
!                 total_amount_accepted = '0', 
!                 message = '0'
              )
!         else :
              return Rejection(
!                 rejection_reason = 'UNSOLICITED_SERVICE',
!                 total_amount_accepted = '0',
!         )
  
      def testRejection(self):
          """Test Rejection"""
--- 33,48 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_payment.models.rejection.Rejection()  # noqa: E501
!         if include_optional:
              return Rejection(
!                 rejection_reason="UNSOLICITED_SERVICE",
!                 total_amount_accepted="0",
!                 message="0",
              )
!         else:
              return Rejection(
!                 rejection_reason="UNSOLICITED_SERVICE", total_amount_accepted="0",
!             )
  
      def testRejection(self):
          """Test Rejection"""
***************
*** 52,56 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 50,54 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_payment/test/test_rejection_reason.py src/ya_payment/test/test_rejection_reason.py
*** target/ya_payment/test/test_rejection_reason.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_payment/test/test_rejection_reason.py	2020-07-21 16:04:55.000000000 +0200
***************
*** 10,17 ****
  """
  
  
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 10,15 ----
***************
*** 19,24 ****
--- 17,23 ----
  from ya_payment.models.rejection_reason import RejectionReason  # noqa: E501
  from ya_payment.rest import ApiException
  
+ 
  class TestRejectionReason(unittest.TestCase):
      """RejectionReason unit test stubs"""
  
***************
*** 34,45 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_payment.models.rejection_reason.RejectionReason()  # noqa: E501
!         if include_optional :
!             return RejectionReason(
!             )
!         else :
!             return RejectionReason(
!         )
  
      def testRejectionReason(self):
          """Test RejectionReason"""
--- 33,42 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_payment.models.rejection_reason.RejectionReason()  # noqa: E501
!         if include_optional:
!             return RejectionReason()
!         else:
!             return RejectionReason()
  
      def testRejectionReason(self):
          """Test RejectionReason"""
***************
*** 47,51 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 44,48 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_payment/test/test_requestor_api.py src/ya_payment/test/test_requestor_api.py
*** target/ya_payment/test/test_requestor_api.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_payment/test/test_requestor_api.py	2020-07-21 16:04:55.000000000 +0200
***************
*** 10,17 ****
  """
  
  
- from __future__ import absolute_import
- 
  import unittest
  
  import ya_payment
--- 10,15 ----
***************
*** 162,166 ****
          pass
  
  
! if __name__ == '__main__':
      unittest.main()
--- 160,164 ----
          pass
  
  
! if __name__ == "__main__":
      unittest.main()
