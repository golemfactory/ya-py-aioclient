Only in src/ya_market: .DS_Store
diff -r -c target/ya_market/__init__.py src/ya_market/__init__.py
*** target/ya_market/__init__.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/__init__.py	2020-07-21 16:04:47.000000000 +0200
***************
*** 11,19 ****
      Generated by: https://openapi-generator.tech
  """
  
- 
- from __future__ import absolute_import
- 
  __version__ = ""
  
  # import apis into sdk package
--- 11,16 ----
***************
*** 28,33 ****
--- 25,31 ----
  from ya_market.exceptions import ApiValueError
  from ya_market.exceptions import ApiKeyError
  from ya_market.exceptions import ApiException
+ 
  # import models into sdk package
  from ya_market.models.agreement import Agreement
  from ya_market.models.agreement_event import AgreementEvent
***************
*** 47,50 ****
  from ya_market.models.proposal_all_of import ProposalAllOf
  from ya_market.models.proposal_event import ProposalEvent
  from ya_market.models.proposal_event_all_of import ProposalEventAllOf
- 
--- 45,47 ----
diff -r -c target/ya_market/api/__init__.py src/ya_market/api/__init__.py
*** target/ya_market/api/__init__.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/api/__init__.py	2020-07-21 14:25:36.000000000 +0200
***************
*** 1,5 ****
- from __future__ import absolute_import
- 
  # flake8: noqa
  
  # import apis into api package
--- 1,3 ----
diff -r -c target/ya_market/api/provider_api.py src/ya_market/api/provider_api.py
*** target/ya_market/api/provider_api.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/api/provider_api.py	2020-07-21 16:04:50.000000000 +0200
***************
*** 9,27 ****
      Generated by: https://openapi-generator.tech
  """
  
- 
- from __future__ import absolute_import
- 
  import re  # noqa: F401
  
  # python 2 and python 3 compatibility library
! import six
  
  from ya_market.api_client import ApiClient
! from ya_market.exceptions import (  # noqa: F401
!     ApiTypeError,
!     ApiValueError
! )
  
  
  class ProviderApi(object):
--- 9,21 ----
      Generated by: https://openapi-generator.tech
  """
  
  import re  # noqa: F401
  
  # python 2 and python 3 compatibility library
! 
  
  from ya_market.api_client import ApiClient
! from ya_market.exceptions import ApiTypeError, ApiValueError  # noqa: F401
  
  
  class ProviderApi(object):
***************
*** 59,66 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.approve_agreement_with_http_info(agreement_id, **kwargs)  # noqa: E501
  
      def approve_agreement_with_http_info(self, agreement_id, **kwargs):  # noqa: E501
          """Approves Agreement proposed by the Reqestor.  # noqa: E501
--- 53,62 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.approve_agreement_with_http_info(
!             agreement_id, **kwargs
!         )  # noqa: E501
  
      def approve_agreement_with_http_info(self, agreement_id, **kwargs):  # noqa: E501
          """Approves Agreement proposed by the Reqestor.  # noqa: E501
***************
*** 90,132 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'agreement_id',
!             'timeout'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method approve_agreement" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'agreement_id' is set
!         if self.api_client.client_side_validation and ('agreement_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['agreement_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `agreement_id` when calling `approve_agreement`")  # noqa: E501
! 
!         if self.api_client.client_side_validation and 'timeout' in local_var_params and local_var_params['timeout'] < 0.0:  # noqa: E501
!             raise ApiValueError("Invalid value for parameter `timeout` when calling `approve_agreement`, must be a value greater than or equal to `0.0`")  # noqa: E501
          collection_formats = {}
  
          path_params = {}
!         if 'agreement_id' in local_var_params:
!             path_params['agreementId'] = local_var_params['agreement_id']  # noqa: E501
  
          query_params = []
!         if 'timeout' in local_var_params and local_var_params['timeout'] is not None:  # noqa: E501
!             query_params.append(('timeout', local_var_params['timeout']))  # noqa: E501
  
          header_params = {}
  
--- 86,137 ----
  
          local_var_params = locals()
  
!         all_params = ["agreement_id", "timeout"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method approve_agreement" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'agreement_id' is set
!         if self.api_client.client_side_validation and (
!             "agreement_id" not in local_var_params
!             or local_var_params["agreement_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `agreement_id` when calling `approve_agreement`"
!             )  # noqa: E501
! 
!         if (
!             self.api_client.client_side_validation
!             and "timeout" in local_var_params
!             and local_var_params["timeout"] < 0.0
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Invalid value for parameter `timeout` when calling `approve_agreement`, must be a value greater than or equal to `0.0`"
!             )  # noqa: E501
          collection_formats = {}
  
          path_params = {}
!         if "agreement_id" in local_var_params:
!             path_params["agreementId"] = local_var_params["agreement_id"]  # noqa: E501
  
          query_params = []
!         if (
!             "timeout" in local_var_params and local_var_params["timeout"] is not None
!         ):  # noqa: E501
!             query_params.append(("timeout", local_var_params["timeout"]))  # noqa: E501
  
          header_params = {}
  
***************
*** 135,148 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/agreements/{agreementId}/approve', 'POST',
              path_params,
              query_params,
              header_params,
--- 140,155 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/agreements/{agreementId}/approve",
!             "POST",
              path_params,
              query_params,
              header_params,
***************
*** 151,161 ****
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def collect_demands(self, subscription_id, **kwargs):  # noqa: E501
          """Reads Market responses to published Offer.  # noqa: E501
--- 158,171 ----
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def collect_demands(self, subscription_id, **kwargs):  # noqa: E501
          """Reads Market responses to published Offer.  # noqa: E501
***************
*** 181,188 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.collect_demands_with_http_info(subscription_id, **kwargs)  # noqa: E501
  
      def collect_demands_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
          """Reads Market responses to published Offer.  # noqa: E501
--- 191,200 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.collect_demands_with_http_info(
!             subscription_id, **kwargs
!         )  # noqa: E501
  
      def collect_demands_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
          """Reads Market responses to published Offer.  # noqa: E501
***************
*** 213,260 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'subscription_id',
!             'timeout',
!             'max_events'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method collect_demands" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'subscription_id' is set
!         if self.api_client.client_side_validation and ('subscription_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['subscription_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `subscription_id` when calling `collect_demands`")  # noqa: E501
! 
!         if self.api_client.client_side_validation and 'timeout' in local_var_params and local_var_params['timeout'] < 0.0:  # noqa: E501
!             raise ApiValueError("Invalid value for parameter `timeout` when calling `collect_demands`, must be a value greater than or equal to `0.0`")  # noqa: E501
!         if self.api_client.client_side_validation and 'max_events' in local_var_params and local_var_params['max_events'] < 0:  # noqa: E501
!             raise ApiValueError("Invalid value for parameter `max_events` when calling `collect_demands`, must be a value greater than or equal to `0`")  # noqa: E501
          collection_formats = {}
  
          path_params = {}
!         if 'subscription_id' in local_var_params:
!             path_params['subscriptionId'] = local_var_params['subscription_id']  # noqa: E501
  
          query_params = []
!         if 'timeout' in local_var_params and local_var_params['timeout'] is not None:  # noqa: E501
!             query_params.append(('timeout', local_var_params['timeout']))  # noqa: E501
!         if 'max_events' in local_var_params and local_var_params['max_events'] is not None:  # noqa: E501
!             query_params.append(('maxEvents', local_var_params['max_events']))  # noqa: E501
  
          header_params = {}
  
--- 225,293 ----
  
          local_var_params = locals()
  
!         all_params = ["subscription_id", "timeout", "max_events"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method collect_demands" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'subscription_id' is set
!         if self.api_client.client_side_validation and (
!             "subscription_id" not in local_var_params
!             or local_var_params["subscription_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `subscription_id` when calling `collect_demands`"
!             )  # noqa: E501
! 
!         if (
!             self.api_client.client_side_validation
!             and "timeout" in local_var_params
!             and local_var_params["timeout"] < 0.0
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Invalid value for parameter `timeout` when calling `collect_demands`, must be a value greater than or equal to `0.0`"
!             )  # noqa: E501
!         if (
!             self.api_client.client_side_validation
!             and "max_events" in local_var_params
!             and local_var_params["max_events"] < 0
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Invalid value for parameter `max_events` when calling `collect_demands`, must be a value greater than or equal to `0`"
!             )  # noqa: E501
          collection_formats = {}
  
          path_params = {}
!         if "subscription_id" in local_var_params:
!             path_params["subscriptionId"] = local_var_params[
!                 "subscription_id"
!             ]  # noqa: E501
  
          query_params = []
!         if (
!             "timeout" in local_var_params and local_var_params["timeout"] is not None
!         ):  # noqa: E501
!             query_params.append(("timeout", local_var_params["timeout"]))  # noqa: E501
!         if (
!             "max_events" in local_var_params
!             and local_var_params["max_events"] is not None
!         ):  # noqa: E501
!             query_params.append(
!                 ("maxEvents", local_var_params["max_events"])
!             )  # noqa: E501
  
          header_params = {}
  
***************
*** 263,291 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/offers/{subscriptionId}/events', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='list[OneOfAgreementEventProposalEventPropertyQueryEvent]',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
!     def counter_proposal_offer(self, subscription_id, proposal_id, proposal, **kwargs):  # noqa: E501
          """Responds with a bespoke Offer to received Demand.  # noqa: E501
  
          Creates and sends a modified version of original Offer (a counter-proposal) adjusted to previously received Proposal (ie. Demand). Changes Proposal state to `Draft`. Returns created Proposal id.   # noqa: E501
--- 296,331 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/offers/{subscriptionId}/events",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="list[OneOfAgreementEventProposalEventPropertyQueryEvent]",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
!     def counter_proposal_offer(
!         self, subscription_id, proposal_id, proposal, **kwargs
!     ):  # noqa: E501
          """Responds with a bespoke Offer to received Demand.  # noqa: E501
  
          Creates and sends a modified version of original Offer (a counter-proposal) adjusted to previously received Proposal (ie. Demand). Changes Proposal state to `Draft`. Returns created Proposal id.   # noqa: E501
***************
*** 309,318 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.counter_proposal_offer_with_http_info(subscription_id, proposal_id, proposal, **kwargs)  # noqa: E501
! 
!     def counter_proposal_offer_with_http_info(self, subscription_id, proposal_id, proposal, **kwargs):  # noqa: E501
          """Responds with a bespoke Offer to received Demand.  # noqa: E501
  
          Creates and sends a modified version of original Offer (a counter-proposal) adjusted to previously received Proposal (ie. Demand). Changes Proposal state to `Draft`. Returns created Proposal id.   # noqa: E501
--- 349,362 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.counter_proposal_offer_with_http_info(
!             subscription_id, proposal_id, proposal, **kwargs
!         )  # noqa: E501
! 
!     def counter_proposal_offer_with_http_info(
!         self, subscription_id, proposal_id, proposal, **kwargs
!     ):  # noqa: E501
          """Responds with a bespoke Offer to received Demand.  # noqa: E501
  
          Creates and sends a modified version of original Offer (a counter-proposal) adjusted to previously received Proposal (ie. Demand). Changes Proposal state to `Draft`. Returns created Proposal id.   # noqa: E501
***************
*** 341,388 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'subscription_id',
!             'proposal_id',
!             'proposal'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method counter_proposal_offer" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'subscription_id' is set
!         if self.api_client.client_side_validation and ('subscription_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['subscription_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `subscription_id` when calling `counter_proposal_offer`")  # noqa: E501
          # verify the required parameter 'proposal_id' is set
!         if self.api_client.client_side_validation and ('proposal_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['proposal_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `proposal_id` when calling `counter_proposal_offer`")  # noqa: E501
          # verify the required parameter 'proposal' is set
!         if self.api_client.client_side_validation and ('proposal' not in local_var_params or  # noqa: E501
!                                                         local_var_params['proposal'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `proposal` when calling `counter_proposal_offer`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'subscription_id' in local_var_params:
!             path_params['subscriptionId'] = local_var_params['subscription_id']  # noqa: E501
!         if 'proposal_id' in local_var_params:
!             path_params['proposalId'] = local_var_params['proposal_id']  # noqa: E501
  
          query_params = []
  
--- 385,442 ----
  
          local_var_params = locals()
  
!         all_params = ["subscription_id", "proposal_id", "proposal"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method counter_proposal_offer" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'subscription_id' is set
!         if self.api_client.client_side_validation and (
!             "subscription_id" not in local_var_params
!             or local_var_params["subscription_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `subscription_id` when calling `counter_proposal_offer`"
!             )  # noqa: E501
          # verify the required parameter 'proposal_id' is set
!         if self.api_client.client_side_validation and (
!             "proposal_id" not in local_var_params
!             or local_var_params["proposal_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `proposal_id` when calling `counter_proposal_offer`"
!             )  # noqa: E501
          # verify the required parameter 'proposal' is set
!         if self.api_client.client_side_validation and (
!             "proposal" not in local_var_params
!             or local_var_params["proposal"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `proposal` when calling `counter_proposal_offer`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "subscription_id" in local_var_params:
!             path_params["subscriptionId"] = local_var_params[
!                 "subscription_id"
!             ]  # noqa: E501
!         if "proposal_id" in local_var_params:
!             path_params["proposalId"] = local_var_params["proposal_id"]  # noqa: E501
  
          query_params = []
  
***************
*** 392,425 ****
          local_var_files = {}
  
          body_params = None
!         if 'proposal' in local_var_params:
!             body_params = local_var_params['proposal']
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # HTTP header `Content-Type`
!         header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/offers/{subscriptionId}/proposals/{proposalId}', 'POST',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='str',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_agreement(self, agreement_id, **kwargs):  # noqa: E501
          """Fetches agreement with given agreement id.  # noqa: E501
--- 446,487 ----
          local_var_files = {}
  
          body_params = None
!         if "proposal" in local_var_params:
!             body_params = local_var_params["proposal"]
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # HTTP header `Content-Type`
!         header_params[
!             "Content-Type"
!         ] = self.api_client.select_header_content_type(  # noqa: E501
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/offers/{subscriptionId}/proposals/{proposalId}",
!             "POST",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="str",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_agreement(self, agreement_id, **kwargs):  # noqa: E501
          """Fetches agreement with given agreement id.  # noqa: E501
***************
*** 442,448 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
          return self.get_agreement_with_http_info(agreement_id, **kwargs)  # noqa: E501
  
      def get_agreement_with_http_info(self, agreement_id, **kwargs):  # noqa: E501
--- 504,510 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
          return self.get_agreement_with_http_info(agreement_id, **kwargs)  # noqa: E501
  
      def get_agreement_with_http_info(self, agreement_id, **kwargs):  # noqa: E501
***************
*** 471,506 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'agreement_id'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_agreement" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'agreement_id' is set
!         if self.api_client.client_side_validation and ('agreement_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['agreement_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `agreement_id` when calling `get_agreement`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'agreement_id' in local_var_params:
!             path_params['agreementId'] = local_var_params['agreement_id']  # noqa: E501
  
          query_params = []
  
--- 533,570 ----
  
          local_var_params = locals()
  
!         all_params = ["agreement_id"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_agreement" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'agreement_id' is set
!         if self.api_client.client_side_validation and (
!             "agreement_id" not in local_var_params
!             or local_var_params["agreement_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `agreement_id` when calling `get_agreement`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "agreement_id" in local_var_params:
!             path_params["agreementId"] = local_var_params["agreement_id"]  # noqa: E501
  
          query_params = []
  
***************
*** 511,537 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/agreements/{agreementId}', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='Agreement',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_offers(self, **kwargs):  # noqa: E501
          """Fetches all active Offers which have been published by the Provider.  # noqa: E501
--- 575,606 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/agreements/{agreementId}",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="Agreement",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_offers(self, **kwargs):  # noqa: E501
          """Fetches all active Offers which have been published by the Provider.  # noqa: E501
***************
*** 553,559 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
          return self.get_offers_with_http_info(**kwargs)  # noqa: E501
  
      def get_offers_with_http_info(self, **kwargs):  # noqa: E501
--- 622,628 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
          return self.get_offers_with_http_info(**kwargs)  # noqa: E501
  
      def get_offers_with_http_info(self, **kwargs):  # noqa: E501
***************
*** 581,605 ****
  
          local_var_params = locals()
  
!         all_params = [
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_offers" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
  
          collection_formats = {}
  
--- 650,673 ----
  
          local_var_params = locals()
  
!         all_params = []
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_offers" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
  
          collection_formats = {}
  
***************
*** 614,640 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/offers', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='list[OneOfOffer]',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_proposal_demand(self, subscription_id, proposal_id, **kwargs):  # noqa: E501
          """Fetches Proposal (Demand) with given id.  # noqa: E501
--- 682,713 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/offers",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="list[OneOfOffer]",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_proposal_demand(self, subscription_id, proposal_id, **kwargs):  # noqa: E501
          """Fetches Proposal (Demand) with given id.  # noqa: E501
***************
*** 658,667 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.get_proposal_demand_with_http_info(subscription_id, proposal_id, **kwargs)  # noqa: E501
! 
!     def get_proposal_demand_with_http_info(self, subscription_id, proposal_id, **kwargs):  # noqa: E501
          """Fetches Proposal (Demand) with given id.  # noqa: E501
  
          This method makes a synchronous HTTP request by default. To make an
--- 731,744 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.get_proposal_demand_with_http_info(
!             subscription_id, proposal_id, **kwargs
!         )  # noqa: E501
! 
!     def get_proposal_demand_with_http_info(
!         self, subscription_id, proposal_id, **kwargs
!     ):  # noqa: E501
          """Fetches Proposal (Demand) with given id.  # noqa: E501
  
          This method makes a synchronous HTTP request by default. To make an
***************
*** 688,730 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'subscription_id',
!             'proposal_id'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_proposal_demand" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'subscription_id' is set
!         if self.api_client.client_side_validation and ('subscription_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['subscription_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `subscription_id` when calling `get_proposal_demand`")  # noqa: E501
          # verify the required parameter 'proposal_id' is set
!         if self.api_client.client_side_validation and ('proposal_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['proposal_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `proposal_id` when calling `get_proposal_demand`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'subscription_id' in local_var_params:
!             path_params['subscriptionId'] = local_var_params['subscription_id']  # noqa: E501
!         if 'proposal_id' in local_var_params:
!             path_params['proposalId'] = local_var_params['proposal_id']  # noqa: E501
  
          query_params = []
  
--- 765,814 ----
  
          local_var_params = locals()
  
!         all_params = ["subscription_id", "proposal_id"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_proposal_demand" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'subscription_id' is set
!         if self.api_client.client_side_validation and (
!             "subscription_id" not in local_var_params
!             or local_var_params["subscription_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `subscription_id` when calling `get_proposal_demand`"
!             )  # noqa: E501
          # verify the required parameter 'proposal_id' is set
!         if self.api_client.client_side_validation and (
!             "proposal_id" not in local_var_params
!             or local_var_params["proposal_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `proposal_id` when calling `get_proposal_demand`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "subscription_id" in local_var_params:
!             path_params["subscriptionId"] = local_var_params[
!                 "subscription_id"
!             ]  # noqa: E501
!         if "proposal_id" in local_var_params:
!             path_params["proposalId"] = local_var_params["proposal_id"]  # noqa: E501
  
          query_params = []
  
***************
*** 735,763 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/offers/{subscriptionId}/proposals/{proposalId}', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='Proposal',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
!     def query_reply_offers(self, subscription_id, query_id, body, **kwargs):  # noqa: E501
          """Handles dynamic property query.  # noqa: E501
  
          The Market Matching Mechanism, when resolving the match relation for the specific Demand-Offer pair, is to detect the “dynamic” properties required (via constraints) by the other side. At this point, it is able to query the issuing node for those properties and submit the other side’s requested properties as the context of the query.  **Note**: The property query responses may be submitted in “chunks”, ie. the responder may choose to resolve ‘quick’/lightweight’ properties faster and provide response sooner, while still working on more time-consuming properties in the background. Therefore the response contains both the resolved properties, as well as list of properties which responder knows still require resolution.  **Note**: This method must be implemented for Market API Capability Level 2.   # noqa: E501
--- 819,854 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/offers/{subscriptionId}/proposals/{proposalId}",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="Proposal",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
!     def query_reply_offers(
!         self, subscription_id, query_id, body, **kwargs
!     ):  # noqa: E501
          """Handles dynamic property query.  # noqa: E501
  
          The Market Matching Mechanism, when resolving the match relation for the specific Demand-Offer pair, is to detect the “dynamic” properties required (via constraints) by the other side. At this point, it is able to query the issuing node for those properties and submit the other side’s requested properties as the context of the query.  **Note**: The property query responses may be submitted in “chunks”, ie. the responder may choose to resolve ‘quick’/lightweight’ properties faster and provide response sooner, while still working on more time-consuming properties in the background. Therefore the response contains both the resolved properties, as well as list of properties which responder knows still require resolution.  **Note**: This method must be implemented for Market API Capability Level 2.   # noqa: E501
***************
*** 781,790 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.query_reply_offers_with_http_info(subscription_id, query_id, body, **kwargs)  # noqa: E501
! 
!     def query_reply_offers_with_http_info(self, subscription_id, query_id, body, **kwargs):  # noqa: E501
          """Handles dynamic property query.  # noqa: E501
  
          The Market Matching Mechanism, when resolving the match relation for the specific Demand-Offer pair, is to detect the “dynamic” properties required (via constraints) by the other side. At this point, it is able to query the issuing node for those properties and submit the other side’s requested properties as the context of the query.  **Note**: The property query responses may be submitted in “chunks”, ie. the responder may choose to resolve ‘quick’/lightweight’ properties faster and provide response sooner, while still working on more time-consuming properties in the background. Therefore the response contains both the resolved properties, as well as list of properties which responder knows still require resolution.  **Note**: This method must be implemented for Market API Capability Level 2.   # noqa: E501
--- 872,885 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.query_reply_offers_with_http_info(
!             subscription_id, query_id, body, **kwargs
!         )  # noqa: E501
! 
!     def query_reply_offers_with_http_info(
!         self, subscription_id, query_id, body, **kwargs
!     ):  # noqa: E501
          """Handles dynamic property query.  # noqa: E501
  
          The Market Matching Mechanism, when resolving the match relation for the specific Demand-Offer pair, is to detect the “dynamic” properties required (via constraints) by the other side. At this point, it is able to query the issuing node for those properties and submit the other side’s requested properties as the context of the query.  **Note**: The property query responses may be submitted in “chunks”, ie. the responder may choose to resolve ‘quick’/lightweight’ properties faster and provide response sooner, while still working on more time-consuming properties in the background. Therefore the response contains both the resolved properties, as well as list of properties which responder knows still require resolution.  **Note**: This method must be implemented for Market API Capability Level 2.   # noqa: E501
***************
*** 813,860 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'subscription_id',
!             'query_id',
!             'body'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method query_reply_offers" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'subscription_id' is set
!         if self.api_client.client_side_validation and ('subscription_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['subscription_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `subscription_id` when calling `query_reply_offers`")  # noqa: E501
          # verify the required parameter 'query_id' is set
!         if self.api_client.client_side_validation and ('query_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['query_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `query_id` when calling `query_reply_offers`")  # noqa: E501
          # verify the required parameter 'body' is set
!         if self.api_client.client_side_validation and ('body' not in local_var_params or  # noqa: E501
!                                                         local_var_params['body'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `body` when calling `query_reply_offers`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'subscription_id' in local_var_params:
!             path_params['subscriptionId'] = local_var_params['subscription_id']  # noqa: E501
!         if 'query_id' in local_var_params:
!             path_params['queryId'] = local_var_params['query_id']  # noqa: E501
  
          query_params = []
  
--- 908,965 ----
  
          local_var_params = locals()
  
!         all_params = ["subscription_id", "query_id", "body"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method query_reply_offers" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'subscription_id' is set
!         if self.api_client.client_side_validation and (
!             "subscription_id" not in local_var_params
!             or local_var_params["subscription_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `subscription_id` when calling `query_reply_offers`"
!             )  # noqa: E501
          # verify the required parameter 'query_id' is set
!         if self.api_client.client_side_validation and (
!             "query_id" not in local_var_params
!             or local_var_params["query_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `query_id` when calling `query_reply_offers`"
!             )  # noqa: E501
          # verify the required parameter 'body' is set
!         if self.api_client.client_side_validation and (
!             "body" not in local_var_params
!             or local_var_params["body"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `body` when calling `query_reply_offers`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "subscription_id" in local_var_params:
!             path_params["subscriptionId"] = local_var_params[
!                 "subscription_id"
!             ]  # noqa: E501
!         if "query_id" in local_var_params:
!             path_params["queryId"] = local_var_params["query_id"]  # noqa: E501
  
          query_params = []
  
***************
*** 864,884 ****
          local_var_files = {}
  
          body_params = None
!         if 'body' in local_var_params:
!             body_params = local_var_params['body']
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # HTTP header `Content-Type`
!         header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/offers/{subscriptionId}/propertyQuery/{queryId}', 'POST',
              path_params,
              query_params,
              header_params,
--- 969,994 ----
          local_var_files = {}
  
          body_params = None
!         if "body" in local_var_params:
!             body_params = local_var_params["body"]
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # HTTP header `Content-Type`
!         header_params[
!             "Content-Type"
!         ] = self.api_client.select_header_content_type(  # noqa: E501
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/offers/{subscriptionId}/propertyQuery/{queryId}",
!             "POST",
              path_params,
              query_params,
              header_params,
***************
*** 887,897 ****
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def reject_agreement(self, agreement_id, **kwargs):  # noqa: E501
          """Rejects Agreement proposed by the Requestor.  # noqa: E501
--- 997,1010 ----
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def reject_agreement(self, agreement_id, **kwargs):  # noqa: E501
          """Rejects Agreement proposed by the Requestor.  # noqa: E501
***************
*** 915,922 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.reject_agreement_with_http_info(agreement_id, **kwargs)  # noqa: E501
  
      def reject_agreement_with_http_info(self, agreement_id, **kwargs):  # noqa: E501
          """Rejects Agreement proposed by the Requestor.  # noqa: E501
--- 1028,1037 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.reject_agreement_with_http_info(
!             agreement_id, **kwargs
!         )  # noqa: E501
  
      def reject_agreement_with_http_info(self, agreement_id, **kwargs):  # noqa: E501
          """Rejects Agreement proposed by the Requestor.  # noqa: E501
***************
*** 945,980 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'agreement_id'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method reject_agreement" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'agreement_id' is set
!         if self.api_client.client_side_validation and ('agreement_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['agreement_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `agreement_id` when calling `reject_agreement`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'agreement_id' in local_var_params:
!             path_params['agreementId'] = local_var_params['agreement_id']  # noqa: E501
  
          query_params = []
  
--- 1060,1097 ----
  
          local_var_params = locals()
  
!         all_params = ["agreement_id"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method reject_agreement" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'agreement_id' is set
!         if self.api_client.client_side_validation and (
!             "agreement_id" not in local_var_params
!             or local_var_params["agreement_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `agreement_id` when calling `reject_agreement`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "agreement_id" in local_var_params:
!             path_params["agreementId"] = local_var_params["agreement_id"]  # noqa: E501
  
          query_params = []
  
***************
*** 985,998 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/agreements/{agreementId}/reject', 'POST',
              path_params,
              query_params,
              header_params,
--- 1102,1117 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/agreements/{agreementId}/reject",
!             "POST",
              path_params,
              query_params,
              header_params,
***************
*** 1001,1013 ****
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
!     def reject_proposal_demand(self, subscription_id, proposal_id, **kwargs):  # noqa: E501
          """Rejects Proposal (Demand).  # noqa: E501
  
          Effectively ends a Negotiation chain - it explicitly indicates that the sender will not create another counter-Proposal.   # noqa: E501
--- 1120,1137 ----
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
!     def reject_proposal_demand(
!         self, subscription_id, proposal_id, **kwargs
!     ):  # noqa: E501
          """Rejects Proposal (Demand).  # noqa: E501
  
          Effectively ends a Negotiation chain - it explicitly indicates that the sender will not create another counter-Proposal.   # noqa: E501
***************
*** 1030,1039 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.reject_proposal_demand_with_http_info(subscription_id, proposal_id, **kwargs)  # noqa: E501
! 
!     def reject_proposal_demand_with_http_info(self, subscription_id, proposal_id, **kwargs):  # noqa: E501
          """Rejects Proposal (Demand).  # noqa: E501
  
          Effectively ends a Negotiation chain - it explicitly indicates that the sender will not create another counter-Proposal.   # noqa: E501
--- 1154,1167 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.reject_proposal_demand_with_http_info(
!             subscription_id, proposal_id, **kwargs
!         )  # noqa: E501
! 
!     def reject_proposal_demand_with_http_info(
!         self, subscription_id, proposal_id, **kwargs
!     ):  # noqa: E501
          """Rejects Proposal (Demand).  # noqa: E501
  
          Effectively ends a Negotiation chain - it explicitly indicates that the sender will not create another counter-Proposal.   # noqa: E501
***************
*** 1061,1103 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'subscription_id',
!             'proposal_id'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method reject_proposal_demand" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'subscription_id' is set
!         if self.api_client.client_side_validation and ('subscription_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['subscription_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `subscription_id` when calling `reject_proposal_demand`")  # noqa: E501
          # verify the required parameter 'proposal_id' is set
!         if self.api_client.client_side_validation and ('proposal_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['proposal_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `proposal_id` when calling `reject_proposal_demand`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'subscription_id' in local_var_params:
!             path_params['subscriptionId'] = local_var_params['subscription_id']  # noqa: E501
!         if 'proposal_id' in local_var_params:
!             path_params['proposalId'] = local_var_params['proposal_id']  # noqa: E501
  
          query_params = []
  
--- 1189,1238 ----
  
          local_var_params = locals()
  
!         all_params = ["subscription_id", "proposal_id"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method reject_proposal_demand" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'subscription_id' is set
!         if self.api_client.client_side_validation and (
!             "subscription_id" not in local_var_params
!             or local_var_params["subscription_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `subscription_id` when calling `reject_proposal_demand`"
!             )  # noqa: E501
          # verify the required parameter 'proposal_id' is set
!         if self.api_client.client_side_validation and (
!             "proposal_id" not in local_var_params
!             or local_var_params["proposal_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `proposal_id` when calling `reject_proposal_demand`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "subscription_id" in local_var_params:
!             path_params["subscriptionId"] = local_var_params[
!                 "subscription_id"
!             ]  # noqa: E501
!         if "proposal_id" in local_var_params:
!             path_params["proposalId"] = local_var_params["proposal_id"]  # noqa: E501
  
          query_params = []
  
***************
*** 1108,1121 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/offers/{subscriptionId}/proposals/{proposalId}', 'DELETE',
              path_params,
              query_params,
              header_params,
--- 1243,1258 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/offers/{subscriptionId}/proposals/{proposalId}",
!             "DELETE",
              path_params,
              query_params,
              header_params,
***************
*** 1124,1134 ****
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def subscribe_offer(self, offer, **kwargs):  # noqa: E501
          """Publishes Provider capabilities via Offer.  # noqa: E501
--- 1261,1274 ----
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def subscribe_offer(self, offer, **kwargs):  # noqa: E501
          """Publishes Provider capabilities via Offer.  # noqa: E501
***************
*** 1152,1158 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
          return self.subscribe_offer_with_http_info(offer, **kwargs)  # noqa: E501
  
      def subscribe_offer_with_http_info(self, offer, **kwargs):  # noqa: E501
--- 1292,1298 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
          return self.subscribe_offer_with_http_info(offer, **kwargs)  # noqa: E501
  
      def subscribe_offer_with_http_info(self, offer, **kwargs):  # noqa: E501
***************
*** 1182,1211 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'offer'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method subscribe_offer" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'offer' is set
!         if self.api_client.client_side_validation and ('offer' not in local_var_params or  # noqa: E501
!                                                         local_var_params['offer'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `offer` when calling `subscribe_offer`")  # noqa: E501
  
          collection_formats = {}
  
--- 1322,1353 ----
  
          local_var_params = locals()
  
!         all_params = ["offer"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method subscribe_offer" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'offer' is set
!         if self.api_client.client_side_validation and (
!             "offer" not in local_var_params
!             or local_var_params["offer"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `offer` when calling `subscribe_offer`"
!             )  # noqa: E501
  
          collection_formats = {}
  
***************
*** 1219,1252 ****
          local_var_files = {}
  
          body_params = None
!         if 'offer' in local_var_params:
!             body_params = local_var_params['offer']
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # HTTP header `Content-Type`
!         header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/offers', 'POST',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='str',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def terminate_agreement(self, agreement_id, **kwargs):  # noqa: E501
          """Terminates approved Agreement.  # noqa: E501
--- 1361,1402 ----
          local_var_files = {}
  
          body_params = None
!         if "offer" in local_var_params:
!             body_params = local_var_params["offer"]
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # HTTP header `Content-Type`
!         header_params[
!             "Content-Type"
!         ] = self.api_client.select_header_content_type(  # noqa: E501
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/offers",
!             "POST",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="str",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def terminate_agreement(self, agreement_id, **kwargs):  # noqa: E501
          """Terminates approved Agreement.  # noqa: E501
***************
*** 1269,1276 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.terminate_agreement_with_http_info(agreement_id, **kwargs)  # noqa: E501
  
      def terminate_agreement_with_http_info(self, agreement_id, **kwargs):  # noqa: E501
          """Terminates approved Agreement.  # noqa: E501
--- 1419,1428 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.terminate_agreement_with_http_info(
!             agreement_id, **kwargs
!         )  # noqa: E501
  
      def terminate_agreement_with_http_info(self, agreement_id, **kwargs):  # noqa: E501
          """Terminates approved Agreement.  # noqa: E501
***************
*** 1298,1333 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'agreement_id'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method terminate_agreement" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'agreement_id' is set
!         if self.api_client.client_side_validation and ('agreement_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['agreement_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `agreement_id` when calling `terminate_agreement`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'agreement_id' in local_var_params:
!             path_params['agreementId'] = local_var_params['agreement_id']  # noqa: E501
  
          query_params = []
  
--- 1450,1487 ----
  
          local_var_params = locals()
  
!         all_params = ["agreement_id"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method terminate_agreement" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'agreement_id' is set
!         if self.api_client.client_side_validation and (
!             "agreement_id" not in local_var_params
!             or local_var_params["agreement_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `agreement_id` when calling `terminate_agreement`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "agreement_id" in local_var_params:
!             path_params["agreementId"] = local_var_params["agreement_id"]  # noqa: E501
  
          query_params = []
  
***************
*** 1338,1351 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/agreements/{agreementId}/terminate', 'POST',
              path_params,
              query_params,
              header_params,
--- 1492,1507 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/agreements/{agreementId}/terminate",
!             "POST",
              path_params,
              query_params,
              header_params,
***************
*** 1354,1364 ****
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def unsubscribe_offer(self, subscription_id, **kwargs):  # noqa: E501
          """Stop subscription for previously published Offer.  # noqa: E501
--- 1510,1523 ----
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def unsubscribe_offer(self, subscription_id, **kwargs):  # noqa: E501
          """Stop subscription for previously published Offer.  # noqa: E501
***************
*** 1382,1389 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.unsubscribe_offer_with_http_info(subscription_id, **kwargs)  # noqa: E501
  
      def unsubscribe_offer_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
          """Stop subscription for previously published Offer.  # noqa: E501
--- 1541,1550 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.unsubscribe_offer_with_http_info(
!             subscription_id, **kwargs
!         )  # noqa: E501
  
      def unsubscribe_offer_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
          """Stop subscription for previously published Offer.  # noqa: E501
***************
*** 1412,1447 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'subscription_id'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method unsubscribe_offer" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'subscription_id' is set
!         if self.api_client.client_side_validation and ('subscription_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['subscription_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `subscription_id` when calling `unsubscribe_offer`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'subscription_id' in local_var_params:
!             path_params['subscriptionId'] = local_var_params['subscription_id']  # noqa: E501
  
          query_params = []
  
--- 1573,1612 ----
  
          local_var_params = locals()
  
!         all_params = ["subscription_id"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method unsubscribe_offer" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'subscription_id' is set
!         if self.api_client.client_side_validation and (
!             "subscription_id" not in local_var_params
!             or local_var_params["subscription_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `subscription_id` when calling `unsubscribe_offer`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "subscription_id" in local_var_params:
!             path_params["subscriptionId"] = local_var_params[
!                 "subscription_id"
!             ]  # noqa: E501
  
          query_params = []
  
***************
*** 1452,1465 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/offers/{subscriptionId}', 'DELETE',
              path_params,
              query_params,
              header_params,
--- 1617,1632 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/offers/{subscriptionId}",
!             "DELETE",
              path_params,
              query_params,
              header_params,
***************
*** 1468,1475 ****
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
--- 1635,1645 ----
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
diff -r -c target/ya_market/api/requestor_api.py src/ya_market/api/requestor_api.py
*** target/ya_market/api/requestor_api.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/api/requestor_api.py	2020-07-21 16:04:50.000000000 +0200
***************
*** 9,27 ****
      Generated by: https://openapi-generator.tech
  """
  
- 
- from __future__ import absolute_import
- 
  import re  # noqa: F401
  
- # python 2 and python 3 compatibility library
- import six
- 
  from ya_market.api_client import ApiClient
! from ya_market.exceptions import (  # noqa: F401
!     ApiTypeError,
!     ApiValueError
! )
  
  
  class RequestorApi(object):
--- 9,18 ----
      Generated by: https://openapi-generator.tech
  """
  
  import re  # noqa: F401
  
  from ya_market.api_client import ApiClient
! from ya_market.exceptions import ApiTypeError, ApiValueError  # noqa: F401
  
  
  class RequestorApi(object):
***************
*** 58,65 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.cancel_agreement_with_http_info(agreement_id, **kwargs)  # noqa: E501
  
      def cancel_agreement_with_http_info(self, agreement_id, **kwargs):  # noqa: E501
          """Cancels agreement.  # noqa: E501
--- 49,58 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.cancel_agreement_with_http_info(
!             agreement_id, **kwargs
!         )  # noqa: E501
  
      def cancel_agreement_with_http_info(self, agreement_id, **kwargs):  # noqa: E501
          """Cancels agreement.  # noqa: E501
***************
*** 88,123 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'agreement_id'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method cancel_agreement" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'agreement_id' is set
!         if self.api_client.client_side_validation and ('agreement_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['agreement_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `agreement_id` when calling `cancel_agreement`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'agreement_id' in local_var_params:
!             path_params['agreementId'] = local_var_params['agreement_id']  # noqa: E501
  
          query_params = []
  
--- 81,118 ----
  
          local_var_params = locals()
  
!         all_params = ["agreement_id"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method cancel_agreement" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'agreement_id' is set
!         if self.api_client.client_side_validation and (
!             "agreement_id" not in local_var_params
!             or local_var_params["agreement_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `agreement_id` when calling `cancel_agreement`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "agreement_id" in local_var_params:
!             path_params["agreementId"] = local_var_params["agreement_id"]  # noqa: E501
  
          query_params = []
  
***************
*** 128,141 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/agreements/{agreementId}', 'DELETE',
              path_params,
              query_params,
              header_params,
--- 123,138 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/agreements/{agreementId}",
!             "DELETE",
              path_params,
              query_params,
              header_params,
***************
*** 144,154 ****
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def collect_offers(self, subscription_id, **kwargs):  # noqa: E501
          """Reads Market responses to published Demand.  # noqa: E501
--- 141,154 ----
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def collect_offers(self, subscription_id, **kwargs):  # noqa: E501
          """Reads Market responses to published Demand.  # noqa: E501
***************
*** 174,181 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.collect_offers_with_http_info(subscription_id, **kwargs)  # noqa: E501
  
      def collect_offers_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
          """Reads Market responses to published Demand.  # noqa: E501
--- 174,183 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.collect_offers_with_http_info(
!             subscription_id, **kwargs
!         )  # noqa: E501
  
      def collect_offers_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
          """Reads Market responses to published Demand.  # noqa: E501
***************
*** 206,253 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'subscription_id',
!             'timeout',
!             'max_events'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method collect_offers" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'subscription_id' is set
!         if self.api_client.client_side_validation and ('subscription_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['subscription_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `subscription_id` when calling `collect_offers`")  # noqa: E501
! 
!         if self.api_client.client_side_validation and 'timeout' in local_var_params and local_var_params['timeout'] < 0.0:  # noqa: E501
!             raise ApiValueError("Invalid value for parameter `timeout` when calling `collect_offers`, must be a value greater than or equal to `0.0`")  # noqa: E501
!         if self.api_client.client_side_validation and 'max_events' in local_var_params and local_var_params['max_events'] < 0:  # noqa: E501
!             raise ApiValueError("Invalid value for parameter `max_events` when calling `collect_offers`, must be a value greater than or equal to `0`")  # noqa: E501
          collection_formats = {}
  
          path_params = {}
!         if 'subscription_id' in local_var_params:
!             path_params['subscriptionId'] = local_var_params['subscription_id']  # noqa: E501
  
          query_params = []
!         if 'timeout' in local_var_params and local_var_params['timeout'] is not None:  # noqa: E501
!             query_params.append(('timeout', local_var_params['timeout']))  # noqa: E501
!         if 'max_events' in local_var_params and local_var_params['max_events'] is not None:  # noqa: E501
!             query_params.append(('maxEvents', local_var_params['max_events']))  # noqa: E501
  
          header_params = {}
  
--- 208,276 ----
  
          local_var_params = locals()
  
!         all_params = ["subscription_id", "timeout", "max_events"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method collect_offers" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'subscription_id' is set
!         if self.api_client.client_side_validation and (
!             "subscription_id" not in local_var_params
!             or local_var_params["subscription_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `subscription_id` when calling `collect_offers`"
!             )  # noqa: E501
! 
!         if (
!             self.api_client.client_side_validation
!             and "timeout" in local_var_params
!             and local_var_params["timeout"] < 0.0
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Invalid value for parameter `timeout` when calling `collect_offers`, must be a value greater than or equal to `0.0`"
!             )  # noqa: E501
!         if (
!             self.api_client.client_side_validation
!             and "max_events" in local_var_params
!             and local_var_params["max_events"] < 0
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Invalid value for parameter `max_events` when calling `collect_offers`, must be a value greater than or equal to `0`"
!             )  # noqa: E501
          collection_formats = {}
  
          path_params = {}
!         if "subscription_id" in local_var_params:
!             path_params["subscriptionId"] = local_var_params[
!                 "subscription_id"
!             ]  # noqa: E501
  
          query_params = []
!         if (
!             "timeout" in local_var_params and local_var_params["timeout"] is not None
!         ):  # noqa: E501
!             query_params.append(("timeout", local_var_params["timeout"]))  # noqa: E501
!         if (
!             "max_events" in local_var_params
!             and local_var_params["max_events"] is not None
!         ):  # noqa: E501
!             query_params.append(
!                 ("maxEvents", local_var_params["max_events"])
!             )  # noqa: E501
  
          header_params = {}
  
***************
*** 256,282 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json4', 'application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/demands/{subscriptionId}/events', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='list[ProposalEvent]',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def confirm_agreement(self, agreement_id, **kwargs):  # noqa: E501
          """Sends Agreement draft to the Provider.  # noqa: E501
--- 279,310 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json4", "application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/demands/{subscriptionId}/events",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="list[ProposalEvent]",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def confirm_agreement(self, agreement_id, **kwargs):  # noqa: E501
          """Sends Agreement draft to the Provider.  # noqa: E501
***************
*** 300,307 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.confirm_agreement_with_http_info(agreement_id, **kwargs)  # noqa: E501
  
      def confirm_agreement_with_http_info(self, agreement_id, **kwargs):  # noqa: E501
          """Sends Agreement draft to the Provider.  # noqa: E501
--- 328,337 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.confirm_agreement_with_http_info(
!             agreement_id, **kwargs
!         )  # noqa: E501
  
      def confirm_agreement_with_http_info(self, agreement_id, **kwargs):  # noqa: E501
          """Sends Agreement draft to the Provider.  # noqa: E501
***************
*** 330,365 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'agreement_id'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method confirm_agreement" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'agreement_id' is set
!         if self.api_client.client_side_validation and ('agreement_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['agreement_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `agreement_id` when calling `confirm_agreement`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'agreement_id' in local_var_params:
!             path_params['agreementId'] = local_var_params['agreement_id']  # noqa: E501
  
          query_params = []
  
--- 360,397 ----
  
          local_var_params = locals()
  
!         all_params = ["agreement_id"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method confirm_agreement" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'agreement_id' is set
!         if self.api_client.client_side_validation and (
!             "agreement_id" not in local_var_params
!             or local_var_params["agreement_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `agreement_id` when calling `confirm_agreement`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "agreement_id" in local_var_params:
!             path_params["agreementId"] = local_var_params["agreement_id"]  # noqa: E501
  
          query_params = []
  
***************
*** 370,383 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/agreements/{agreementId}/confirm', 'POST',
              path_params,
              query_params,
              header_params,
--- 402,417 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/agreements/{agreementId}/confirm",
!             "POST",
              path_params,
              query_params,
              header_params,
***************
*** 386,398 ****
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
!     def counter_proposal_demand(self, subscription_id, proposal_id, proposal, **kwargs):  # noqa: E501
          """Responds with a bespoke Demand to received Offer.  # noqa: E501
  
          Creates and sends a modified version of original Demand (a counter-proposal) adjusted to previously received Proposal (ie. Offer). Changes Proposal state to `Draft`. Returns created Proposal id.   # noqa: E501
--- 420,437 ----
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
!     def counter_proposal_demand(
!         self, subscription_id, proposal_id, proposal, **kwargs
!     ):  # noqa: E501
          """Responds with a bespoke Demand to received Offer.  # noqa: E501
  
          Creates and sends a modified version of original Demand (a counter-proposal) adjusted to previously received Proposal (ie. Offer). Changes Proposal state to `Draft`. Returns created Proposal id.   # noqa: E501
***************
*** 416,425 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.counter_proposal_demand_with_http_info(subscription_id, proposal_id, proposal, **kwargs)  # noqa: E501
! 
!     def counter_proposal_demand_with_http_info(self, subscription_id, proposal_id, proposal, **kwargs):  # noqa: E501
          """Responds with a bespoke Demand to received Offer.  # noqa: E501
  
          Creates and sends a modified version of original Demand (a counter-proposal) adjusted to previously received Proposal (ie. Offer). Changes Proposal state to `Draft`. Returns created Proposal id.   # noqa: E501
--- 455,468 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.counter_proposal_demand_with_http_info(
!             subscription_id, proposal_id, proposal, **kwargs
!         )  # noqa: E501
! 
!     def counter_proposal_demand_with_http_info(
!         self, subscription_id, proposal_id, proposal, **kwargs
!     ):  # noqa: E501
          """Responds with a bespoke Demand to received Offer.  # noqa: E501
  
          Creates and sends a modified version of original Demand (a counter-proposal) adjusted to previously received Proposal (ie. Offer). Changes Proposal state to `Draft`. Returns created Proposal id.   # noqa: E501
***************
*** 448,495 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'subscription_id',
!             'proposal_id',
!             'proposal'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method counter_proposal_demand" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'subscription_id' is set
!         if self.api_client.client_side_validation and ('subscription_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['subscription_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `subscription_id` when calling `counter_proposal_demand`")  # noqa: E501
          # verify the required parameter 'proposal_id' is set
!         if self.api_client.client_side_validation and ('proposal_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['proposal_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `proposal_id` when calling `counter_proposal_demand`")  # noqa: E501
          # verify the required parameter 'proposal' is set
!         if self.api_client.client_side_validation and ('proposal' not in local_var_params or  # noqa: E501
!                                                         local_var_params['proposal'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `proposal` when calling `counter_proposal_demand`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'subscription_id' in local_var_params:
!             path_params['subscriptionId'] = local_var_params['subscription_id']  # noqa: E501
!         if 'proposal_id' in local_var_params:
!             path_params['proposalId'] = local_var_params['proposal_id']  # noqa: E501
  
          query_params = []
  
--- 491,548 ----
  
          local_var_params = locals()
  
!         all_params = ["subscription_id", "proposal_id", "proposal"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method counter_proposal_demand" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'subscription_id' is set
!         if self.api_client.client_side_validation and (
!             "subscription_id" not in local_var_params
!             or local_var_params["subscription_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `subscription_id` when calling `counter_proposal_demand`"
!             )  # noqa: E501
          # verify the required parameter 'proposal_id' is set
!         if self.api_client.client_side_validation and (
!             "proposal_id" not in local_var_params
!             or local_var_params["proposal_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `proposal_id` when calling `counter_proposal_demand`"
!             )  # noqa: E501
          # verify the required parameter 'proposal' is set
!         if self.api_client.client_side_validation and (
!             "proposal" not in local_var_params
!             or local_var_params["proposal"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `proposal` when calling `counter_proposal_demand`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "subscription_id" in local_var_params:
!             path_params["subscriptionId"] = local_var_params[
!                 "subscription_id"
!             ]  # noqa: E501
!         if "proposal_id" in local_var_params:
!             path_params["proposalId"] = local_var_params["proposal_id"]  # noqa: E501
  
          query_params = []
  
***************
*** 499,532 ****
          local_var_files = {}
  
          body_params = None
!         if 'proposal' in local_var_params:
!             body_params = local_var_params['proposal']
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # HTTP header `Content-Type`
!         header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/demands/{subscriptionId}/proposals/{proposalId}', 'POST',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='str',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def create_agreement(self, agreement_proposal, **kwargs):  # noqa: E501
          """Creates Agreement from selected Proposal.  # noqa: E501
--- 552,593 ----
          local_var_files = {}
  
          body_params = None
!         if "proposal" in local_var_params:
!             body_params = local_var_params["proposal"]
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # HTTP header `Content-Type`
!         header_params[
!             "Content-Type"
!         ] = self.api_client.select_header_content_type(  # noqa: E501
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/demands/{subscriptionId}/proposals/{proposalId}",
!             "POST",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="str",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def create_agreement(self, agreement_proposal, **kwargs):  # noqa: E501
          """Creates Agreement from selected Proposal.  # noqa: E501
***************
*** 550,559 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.create_agreement_with_http_info(agreement_proposal, **kwargs)  # noqa: E501
! 
!     def create_agreement_with_http_info(self, agreement_proposal, **kwargs):  # noqa: E501
          """Creates Agreement from selected Proposal.  # noqa: E501
  
          Initiates the Agreement handshake phase.  Formulates an Agreement artifact from the Proposal indicated by the received Proposal Id.  The Approval Expiry Date is added to Agreement artifact and implies the effective timeout on the whole Agreement Confirmation sequence.  A successful call to `createAgreement` shall immediately be followed by a `confirmAgreement` and `waitForApproval` call in order to listen for responses from the Provider.  **Note**: Moves given Proposal to `Approved` state.   # noqa: E501
--- 611,624 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.create_agreement_with_http_info(
!             agreement_proposal, **kwargs
!         )  # noqa: E501
! 
!     def create_agreement_with_http_info(
!         self, agreement_proposal, **kwargs
!     ):  # noqa: E501
          """Creates Agreement from selected Proposal.  # noqa: E501
  
          Initiates the Agreement handshake phase.  Formulates an Agreement artifact from the Proposal indicated by the received Proposal Id.  The Approval Expiry Date is added to Agreement artifact and implies the effective timeout on the whole Agreement Confirmation sequence.  A successful call to `createAgreement` shall immediately be followed by a `confirmAgreement` and `waitForApproval` call in order to listen for responses from the Provider.  **Note**: Moves given Proposal to `Approved` state.   # noqa: E501
***************
*** 580,609 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'agreement_proposal'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method create_agreement" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'agreement_proposal' is set
!         if self.api_client.client_side_validation and ('agreement_proposal' not in local_var_params or  # noqa: E501
!                                                         local_var_params['agreement_proposal'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `agreement_proposal` when calling `create_agreement`")  # noqa: E501
  
          collection_formats = {}
  
--- 645,676 ----
  
          local_var_params = locals()
  
!         all_params = ["agreement_proposal"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method create_agreement" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'agreement_proposal' is set
!         if self.api_client.client_side_validation and (
!             "agreement_proposal" not in local_var_params
!             or local_var_params["agreement_proposal"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `agreement_proposal` when calling `create_agreement`"
!             )  # noqa: E501
  
          collection_formats = {}
  
***************
*** 617,650 ****
          local_var_files = {}
  
          body_params = None
!         if 'agreement_proposal' in local_var_params:
!             body_params = local_var_params['agreement_proposal']
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # HTTP header `Content-Type`
!         header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/agreements', 'POST',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='str',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_agreement(self, agreement_id, **kwargs):  # noqa: E501
          """Fetches agreement with given agreement id.  # noqa: E501
--- 684,725 ----
          local_var_files = {}
  
          body_params = None
!         if "agreement_proposal" in local_var_params:
!             body_params = local_var_params["agreement_proposal"]
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # HTTP header `Content-Type`
!         header_params[
!             "Content-Type"
!         ] = self.api_client.select_header_content_type(  # noqa: E501
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/agreements",
!             "POST",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="str",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_agreement(self, agreement_id, **kwargs):  # noqa: E501
          """Fetches agreement with given agreement id.  # noqa: E501
***************
*** 667,673 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
          return self.get_agreement_with_http_info(agreement_id, **kwargs)  # noqa: E501
  
      def get_agreement_with_http_info(self, agreement_id, **kwargs):  # noqa: E501
--- 742,748 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
          return self.get_agreement_with_http_info(agreement_id, **kwargs)  # noqa: E501
  
      def get_agreement_with_http_info(self, agreement_id, **kwargs):  # noqa: E501
***************
*** 696,731 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'agreement_id'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_agreement" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'agreement_id' is set
!         if self.api_client.client_side_validation and ('agreement_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['agreement_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `agreement_id` when calling `get_agreement`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'agreement_id' in local_var_params:
!             path_params['agreementId'] = local_var_params['agreement_id']  # noqa: E501
  
          query_params = []
  
--- 771,808 ----
  
          local_var_params = locals()
  
!         all_params = ["agreement_id"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_agreement" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'agreement_id' is set
!         if self.api_client.client_side_validation and (
!             "agreement_id" not in local_var_params
!             or local_var_params["agreement_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `agreement_id` when calling `get_agreement`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "agreement_id" in local_var_params:
!             path_params["agreementId"] = local_var_params["agreement_id"]  # noqa: E501
  
          query_params = []
  
***************
*** 736,762 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/agreements/{agreementId}', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='Agreement',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_demands(self, **kwargs):  # noqa: E501
          """Fetches all active Demands which have been published by the Requestor.  # noqa: E501
--- 813,844 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/agreements/{agreementId}",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="Agreement",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_demands(self, **kwargs):  # noqa: E501
          """Fetches all active Demands which have been published by the Requestor.  # noqa: E501
***************
*** 778,784 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
          return self.get_demands_with_http_info(**kwargs)  # noqa: E501
  
      def get_demands_with_http_info(self, **kwargs):  # noqa: E501
--- 860,866 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
          return self.get_demands_with_http_info(**kwargs)  # noqa: E501
  
      def get_demands_with_http_info(self, **kwargs):  # noqa: E501
***************
*** 806,830 ****
  
          local_var_params = locals()
  
!         all_params = [
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_demands" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
  
          collection_formats = {}
  
--- 888,911 ----
  
          local_var_params = locals()
  
!         all_params = []
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_demands" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
  
          collection_formats = {}
  
***************
*** 839,865 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/demands', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='list[Demand]',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_proposal_offer(self, subscription_id, proposal_id, **kwargs):  # noqa: E501
          """Fetches Proposal (Offer) with given id.  # noqa: E501
--- 920,951 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/demands",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="list[Demand]",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_proposal_offer(self, subscription_id, proposal_id, **kwargs):  # noqa: E501
          """Fetches Proposal (Offer) with given id.  # noqa: E501
***************
*** 883,892 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.get_proposal_offer_with_http_info(subscription_id, proposal_id, **kwargs)  # noqa: E501
! 
!     def get_proposal_offer_with_http_info(self, subscription_id, proposal_id, **kwargs):  # noqa: E501
          """Fetches Proposal (Offer) with given id.  # noqa: E501
  
          This method makes a synchronous HTTP request by default. To make an
--- 969,982 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.get_proposal_offer_with_http_info(
!             subscription_id, proposal_id, **kwargs
!         )  # noqa: E501
! 
!     def get_proposal_offer_with_http_info(
!         self, subscription_id, proposal_id, **kwargs
!     ):  # noqa: E501
          """Fetches Proposal (Offer) with given id.  # noqa: E501
  
          This method makes a synchronous HTTP request by default. To make an
***************
*** 913,955 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'subscription_id',
!             'proposal_id'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_proposal_offer" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'subscription_id' is set
!         if self.api_client.client_side_validation and ('subscription_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['subscription_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `subscription_id` when calling `get_proposal_offer`")  # noqa: E501
          # verify the required parameter 'proposal_id' is set
!         if self.api_client.client_side_validation and ('proposal_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['proposal_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `proposal_id` when calling `get_proposal_offer`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'subscription_id' in local_var_params:
!             path_params['subscriptionId'] = local_var_params['subscription_id']  # noqa: E501
!         if 'proposal_id' in local_var_params:
!             path_params['proposalId'] = local_var_params['proposal_id']  # noqa: E501
  
          query_params = []
  
--- 1003,1052 ----
  
          local_var_params = locals()
  
!         all_params = ["subscription_id", "proposal_id"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_proposal_offer" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'subscription_id' is set
!         if self.api_client.client_side_validation and (
!             "subscription_id" not in local_var_params
!             or local_var_params["subscription_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `subscription_id` when calling `get_proposal_offer`"
!             )  # noqa: E501
          # verify the required parameter 'proposal_id' is set
!         if self.api_client.client_side_validation and (
!             "proposal_id" not in local_var_params
!             or local_var_params["proposal_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `proposal_id` when calling `get_proposal_offer`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "subscription_id" in local_var_params:
!             path_params["subscriptionId"] = local_var_params[
!                 "subscription_id"
!             ]  # noqa: E501
!         if "proposal_id" in local_var_params:
!             path_params["proposalId"] = local_var_params["proposal_id"]  # noqa: E501
  
          query_params = []
  
***************
*** 960,988 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/demands/{subscriptionId}/proposals/{proposalId}', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='Proposal',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
!     def query_reply_demands(self, subscription_id, query_id, body, **kwargs):  # noqa: E501
          """Handles dynamic property query.  # noqa: E501
  
          The Market Matching Mechanism, when resolving the match relation for the specific Demand-Offer pair, is to detect the “dynamic” properties required (via constraints) by the other side. At this point, it is able to query the issuing node for those properties and submit the other side’s requested properties as the context of the query.  **Note**: The property query responses may be submitted in “chunks”, ie. the responder may choose to resolve ‘quick’/lightweight’ properties faster and provide response sooner, while still working on more time-consuming properties in the background. Therefore the response contains both the resolved properties, as well as list of properties which responder knows still require resolution.  **Note**: This method must be implemented for Market API Capability Level 2.   # noqa: E501
--- 1057,1092 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/demands/{subscriptionId}/proposals/{proposalId}",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="Proposal",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
!     def query_reply_demands(
!         self, subscription_id, query_id, body, **kwargs
!     ):  # noqa: E501
          """Handles dynamic property query.  # noqa: E501
  
          The Market Matching Mechanism, when resolving the match relation for the specific Demand-Offer pair, is to detect the “dynamic” properties required (via constraints) by the other side. At this point, it is able to query the issuing node for those properties and submit the other side’s requested properties as the context of the query.  **Note**: The property query responses may be submitted in “chunks”, ie. the responder may choose to resolve ‘quick’/lightweight’ properties faster and provide response sooner, while still working on more time-consuming properties in the background. Therefore the response contains both the resolved properties, as well as list of properties which responder knows still require resolution.  **Note**: This method must be implemented for Market API Capability Level 2.   # noqa: E501
***************
*** 1006,1015 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.query_reply_demands_with_http_info(subscription_id, query_id, body, **kwargs)  # noqa: E501
! 
!     def query_reply_demands_with_http_info(self, subscription_id, query_id, body, **kwargs):  # noqa: E501
          """Handles dynamic property query.  # noqa: E501
  
          The Market Matching Mechanism, when resolving the match relation for the specific Demand-Offer pair, is to detect the “dynamic” properties required (via constraints) by the other side. At this point, it is able to query the issuing node for those properties and submit the other side’s requested properties as the context of the query.  **Note**: The property query responses may be submitted in “chunks”, ie. the responder may choose to resolve ‘quick’/lightweight’ properties faster and provide response sooner, while still working on more time-consuming properties in the background. Therefore the response contains both the resolved properties, as well as list of properties which responder knows still require resolution.  **Note**: This method must be implemented for Market API Capability Level 2.   # noqa: E501
--- 1110,1123 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.query_reply_demands_with_http_info(
!             subscription_id, query_id, body, **kwargs
!         )  # noqa: E501
! 
!     def query_reply_demands_with_http_info(
!         self, subscription_id, query_id, body, **kwargs
!     ):  # noqa: E501
          """Handles dynamic property query.  # noqa: E501
  
          The Market Matching Mechanism, when resolving the match relation for the specific Demand-Offer pair, is to detect the “dynamic” properties required (via constraints) by the other side. At this point, it is able to query the issuing node for those properties and submit the other side’s requested properties as the context of the query.  **Note**: The property query responses may be submitted in “chunks”, ie. the responder may choose to resolve ‘quick’/lightweight’ properties faster and provide response sooner, while still working on more time-consuming properties in the background. Therefore the response contains both the resolved properties, as well as list of properties which responder knows still require resolution.  **Note**: This method must be implemented for Market API Capability Level 2.   # noqa: E501
***************
*** 1038,1085 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'subscription_id',
!             'query_id',
!             'body'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method query_reply_demands" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'subscription_id' is set
!         if self.api_client.client_side_validation and ('subscription_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['subscription_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `subscription_id` when calling `query_reply_demands`")  # noqa: E501
          # verify the required parameter 'query_id' is set
!         if self.api_client.client_side_validation and ('query_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['query_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `query_id` when calling `query_reply_demands`")  # noqa: E501
          # verify the required parameter 'body' is set
!         if self.api_client.client_side_validation and ('body' not in local_var_params or  # noqa: E501
!                                                         local_var_params['body'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `body` when calling `query_reply_demands`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'subscription_id' in local_var_params:
!             path_params['subscriptionId'] = local_var_params['subscription_id']  # noqa: E501
!         if 'query_id' in local_var_params:
!             path_params['queryId'] = local_var_params['query_id']  # noqa: E501
  
          query_params = []
  
--- 1146,1203 ----
  
          local_var_params = locals()
  
!         all_params = ["subscription_id", "query_id", "body"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method query_reply_demands" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'subscription_id' is set
!         if self.api_client.client_side_validation and (
!             "subscription_id" not in local_var_params
!             or local_var_params["subscription_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `subscription_id` when calling `query_reply_demands`"
!             )  # noqa: E501
          # verify the required parameter 'query_id' is set
!         if self.api_client.client_side_validation and (
!             "query_id" not in local_var_params
!             or local_var_params["query_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `query_id` when calling `query_reply_demands`"
!             )  # noqa: E501
          # verify the required parameter 'body' is set
!         if self.api_client.client_side_validation and (
!             "body" not in local_var_params
!             or local_var_params["body"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `body` when calling `query_reply_demands`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "subscription_id" in local_var_params:
!             path_params["subscriptionId"] = local_var_params[
!                 "subscription_id"
!             ]  # noqa: E501
!         if "query_id" in local_var_params:
!             path_params["queryId"] = local_var_params["query_id"]  # noqa: E501
  
          query_params = []
  
***************
*** 1089,1109 ****
          local_var_files = {}
  
          body_params = None
!         if 'body' in local_var_params:
!             body_params = local_var_params['body']
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # HTTP header `Content-Type`
!         header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/demands/{subscriptionId}/propertyQuery/{queryId}', 'POST',
              path_params,
              query_params,
              header_params,
--- 1207,1232 ----
          local_var_files = {}
  
          body_params = None
!         if "body" in local_var_params:
!             body_params = local_var_params["body"]
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # HTTP header `Content-Type`
!         header_params[
!             "Content-Type"
!         ] = self.api_client.select_header_content_type(  # noqa: E501
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/demands/{subscriptionId}/propertyQuery/{queryId}",
!             "POST",
              path_params,
              query_params,
              header_params,
***************
*** 1112,1124 ****
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
!     def reject_proposal_offer(self, subscription_id, proposal_id, **kwargs):  # noqa: E501
          """Rejects Proposal (Offer).  # noqa: E501
  
          Effectively ends a Negotiation chain - it explicitly indicates that the sender will not create another counter-Proposal.   # noqa: E501
--- 1235,1252 ----
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
!     def reject_proposal_offer(
!         self, subscription_id, proposal_id, **kwargs
!     ):  # noqa: E501
          """Rejects Proposal (Offer).  # noqa: E501
  
          Effectively ends a Negotiation chain - it explicitly indicates that the sender will not create another counter-Proposal.   # noqa: E501
***************
*** 1141,1150 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.reject_proposal_offer_with_http_info(subscription_id, proposal_id, **kwargs)  # noqa: E501
! 
!     def reject_proposal_offer_with_http_info(self, subscription_id, proposal_id, **kwargs):  # noqa: E501
          """Rejects Proposal (Offer).  # noqa: E501
  
          Effectively ends a Negotiation chain - it explicitly indicates that the sender will not create another counter-Proposal.   # noqa: E501
--- 1269,1282 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.reject_proposal_offer_with_http_info(
!             subscription_id, proposal_id, **kwargs
!         )  # noqa: E501
! 
!     def reject_proposal_offer_with_http_info(
!         self, subscription_id, proposal_id, **kwargs
!     ):  # noqa: E501
          """Rejects Proposal (Offer).  # noqa: E501
  
          Effectively ends a Negotiation chain - it explicitly indicates that the sender will not create another counter-Proposal.   # noqa: E501
***************
*** 1172,1214 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'subscription_id',
!             'proposal_id'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method reject_proposal_offer" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'subscription_id' is set
!         if self.api_client.client_side_validation and ('subscription_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['subscription_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `subscription_id` when calling `reject_proposal_offer`")  # noqa: E501
          # verify the required parameter 'proposal_id' is set
!         if self.api_client.client_side_validation and ('proposal_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['proposal_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `proposal_id` when calling `reject_proposal_offer`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'subscription_id' in local_var_params:
!             path_params['subscriptionId'] = local_var_params['subscription_id']  # noqa: E501
!         if 'proposal_id' in local_var_params:
!             path_params['proposalId'] = local_var_params['proposal_id']  # noqa: E501
  
          query_params = []
  
--- 1304,1353 ----
  
          local_var_params = locals()
  
!         all_params = ["subscription_id", "proposal_id"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method reject_proposal_offer" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'subscription_id' is set
!         if self.api_client.client_side_validation and (
!             "subscription_id" not in local_var_params
!             or local_var_params["subscription_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `subscription_id` when calling `reject_proposal_offer`"
!             )  # noqa: E501
          # verify the required parameter 'proposal_id' is set
!         if self.api_client.client_side_validation and (
!             "proposal_id" not in local_var_params
!             or local_var_params["proposal_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `proposal_id` when calling `reject_proposal_offer`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "subscription_id" in local_var_params:
!             path_params["subscriptionId"] = local_var_params[
!                 "subscription_id"
!             ]  # noqa: E501
!         if "proposal_id" in local_var_params:
!             path_params["proposalId"] = local_var_params["proposal_id"]  # noqa: E501
  
          query_params = []
  
***************
*** 1219,1232 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/demands/{subscriptionId}/proposals/{proposalId}', 'DELETE',
              path_params,
              query_params,
              header_params,
--- 1358,1373 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/demands/{subscriptionId}/proposals/{proposalId}",
!             "DELETE",
              path_params,
              query_params,
              header_params,
***************
*** 1235,1245 ****
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def subscribe_demand(self, demand, **kwargs):  # noqa: E501
          """Publishes Requestor capabilities via Demand.  # noqa: E501
--- 1376,1389 ----
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def subscribe_demand(self, demand, **kwargs):  # noqa: E501
          """Publishes Requestor capabilities via Demand.  # noqa: E501
***************
*** 1263,1269 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
          return self.subscribe_demand_with_http_info(demand, **kwargs)  # noqa: E501
  
      def subscribe_demand_with_http_info(self, demand, **kwargs):  # noqa: E501
--- 1407,1413 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
          return self.subscribe_demand_with_http_info(demand, **kwargs)  # noqa: E501
  
      def subscribe_demand_with_http_info(self, demand, **kwargs):  # noqa: E501
***************
*** 1293,1322 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'demand'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method subscribe_demand" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'demand' is set
!         if self.api_client.client_side_validation and ('demand' not in local_var_params or  # noqa: E501
!                                                         local_var_params['demand'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `demand` when calling `subscribe_demand`")  # noqa: E501
  
          collection_formats = {}
  
--- 1437,1468 ----
  
          local_var_params = locals()
  
!         all_params = ["demand"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method subscribe_demand" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'demand' is set
!         if self.api_client.client_side_validation and (
!             "demand" not in local_var_params
!             or local_var_params["demand"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `demand` when calling `subscribe_demand`"
!             )  # noqa: E501
  
          collection_formats = {}
  
***************
*** 1330,1363 ****
          local_var_files = {}
  
          body_params = None
!         if 'demand' in local_var_params:
!             body_params = local_var_params['demand']
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # HTTP header `Content-Type`
!         header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/demands', 'POST',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='str',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def terminate_agreement(self, agreement_id, **kwargs):  # noqa: E501
          """Terminates approved Agreement.  # noqa: E501
--- 1476,1517 ----
          local_var_files = {}
  
          body_params = None
!         if "demand" in local_var_params:
!             body_params = local_var_params["demand"]
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # HTTP header `Content-Type`
!         header_params[
!             "Content-Type"
!         ] = self.api_client.select_header_content_type(  # noqa: E501
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/demands",
!             "POST",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="str",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def terminate_agreement(self, agreement_id, **kwargs):  # noqa: E501
          """Terminates approved Agreement.  # noqa: E501
***************
*** 1380,1387 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.terminate_agreement_with_http_info(agreement_id, **kwargs)  # noqa: E501
  
      def terminate_agreement_with_http_info(self, agreement_id, **kwargs):  # noqa: E501
          """Terminates approved Agreement.  # noqa: E501
--- 1534,1543 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.terminate_agreement_with_http_info(
!             agreement_id, **kwargs
!         )  # noqa: E501
  
      def terminate_agreement_with_http_info(self, agreement_id, **kwargs):  # noqa: E501
          """Terminates approved Agreement.  # noqa: E501
***************
*** 1409,1444 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'agreement_id'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method terminate_agreement" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'agreement_id' is set
!         if self.api_client.client_side_validation and ('agreement_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['agreement_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `agreement_id` when calling `terminate_agreement`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'agreement_id' in local_var_params:
!             path_params['agreementId'] = local_var_params['agreement_id']  # noqa: E501
  
          query_params = []
  
--- 1565,1602 ----
  
          local_var_params = locals()
  
!         all_params = ["agreement_id"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method terminate_agreement" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'agreement_id' is set
!         if self.api_client.client_side_validation and (
!             "agreement_id" not in local_var_params
!             or local_var_params["agreement_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `agreement_id` when calling `terminate_agreement`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "agreement_id" in local_var_params:
!             path_params["agreementId"] = local_var_params["agreement_id"]  # noqa: E501
  
          query_params = []
  
***************
*** 1449,1462 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/agreements/{agreementId}/terminate', 'POST',
              path_params,
              query_params,
              header_params,
--- 1607,1622 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/agreements/{agreementId}/terminate",
!             "POST",
              path_params,
              query_params,
              header_params,
***************
*** 1465,1475 ****
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def unsubscribe_demand(self, subscription_id, **kwargs):  # noqa: E501
          """Stop subscription for previously published Demand.  # noqa: E501
--- 1625,1638 ----
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def unsubscribe_demand(self, subscription_id, **kwargs):  # noqa: E501
          """Stop subscription for previously published Demand.  # noqa: E501
***************
*** 1493,1502 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.unsubscribe_demand_with_http_info(subscription_id, **kwargs)  # noqa: E501
! 
!     def unsubscribe_demand_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
          """Stop subscription for previously published Demand.  # noqa: E501
  
          Stop receiving Proposals.  **Note**: this will terminate all pending `collectOffers` calls on this subscription. This implies, that client code should not `unsubscribeDemand` before it has received all expected/useful inputs from `collectOffers`.   # noqa: E501
--- 1656,1669 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.unsubscribe_demand_with_http_info(
!             subscription_id, **kwargs
!         )  # noqa: E501
! 
!     def unsubscribe_demand_with_http_info(
!         self, subscription_id, **kwargs
!     ):  # noqa: E501
          """Stop subscription for previously published Demand.  # noqa: E501
  
          Stop receiving Proposals.  **Note**: this will terminate all pending `collectOffers` calls on this subscription. This implies, that client code should not `unsubscribeDemand` before it has received all expected/useful inputs from `collectOffers`.   # noqa: E501
***************
*** 1523,1558 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'subscription_id'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method unsubscribe_demand" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'subscription_id' is set
!         if self.api_client.client_side_validation and ('subscription_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['subscription_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `subscription_id` when calling `unsubscribe_demand`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'subscription_id' in local_var_params:
!             path_params['subscriptionId'] = local_var_params['subscription_id']  # noqa: E501
  
          query_params = []
  
--- 1690,1729 ----
  
          local_var_params = locals()
  
!         all_params = ["subscription_id"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method unsubscribe_demand" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'subscription_id' is set
!         if self.api_client.client_side_validation and (
!             "subscription_id" not in local_var_params
!             or local_var_params["subscription_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `subscription_id` when calling `unsubscribe_demand`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "subscription_id" in local_var_params:
!             path_params["subscriptionId"] = local_var_params[
!                 "subscription_id"
!             ]  # noqa: E501
  
          query_params = []
  
***************
*** 1563,1576 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/demands/{subscriptionId}', 'DELETE',
              path_params,
              query_params,
              header_params,
--- 1734,1749 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/demands/{subscriptionId}",
!             "DELETE",
              path_params,
              query_params,
              header_params,
***************
*** 1579,1589 ****
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def wait_for_approval(self, agreement_id, **kwargs):  # noqa: E501
          """Waits for Agreement approval by the Provider.  # noqa: E501
--- 1752,1765 ----
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def wait_for_approval(self, agreement_id, **kwargs):  # noqa: E501
          """Waits for Agreement approval by the Provider.  # noqa: E501
***************
*** 1608,1615 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.wait_for_approval_with_http_info(agreement_id, **kwargs)  # noqa: E501
  
      def wait_for_approval_with_http_info(self, agreement_id, **kwargs):  # noqa: E501
          """Waits for Agreement approval by the Provider.  # noqa: E501
--- 1784,1793 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.wait_for_approval_with_http_info(
!             agreement_id, **kwargs
!         )  # noqa: E501
  
      def wait_for_approval_with_http_info(self, agreement_id, **kwargs):  # noqa: E501
          """Waits for Agreement approval by the Provider.  # noqa: E501
***************
*** 1639,1681 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'agreement_id',
!             'timeout'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method wait_for_approval" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'agreement_id' is set
!         if self.api_client.client_side_validation and ('agreement_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['agreement_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `agreement_id` when calling `wait_for_approval`")  # noqa: E501
! 
!         if self.api_client.client_side_validation and 'timeout' in local_var_params and local_var_params['timeout'] < 0.0:  # noqa: E501
!             raise ApiValueError("Invalid value for parameter `timeout` when calling `wait_for_approval`, must be a value greater than or equal to `0.0`")  # noqa: E501
          collection_formats = {}
  
          path_params = {}
!         if 'agreement_id' in local_var_params:
!             path_params['agreementId'] = local_var_params['agreement_id']  # noqa: E501
  
          query_params = []
!         if 'timeout' in local_var_params and local_var_params['timeout'] is not None:  # noqa: E501
!             query_params.append(('timeout', local_var_params['timeout']))  # noqa: E501
  
          header_params = {}
  
--- 1817,1868 ----
  
          local_var_params = locals()
  
!         all_params = ["agreement_id", "timeout"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method wait_for_approval" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'agreement_id' is set
!         if self.api_client.client_side_validation and (
!             "agreement_id" not in local_var_params
!             or local_var_params["agreement_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `agreement_id` when calling `wait_for_approval`"
!             )  # noqa: E501
! 
!         if (
!             self.api_client.client_side_validation
!             and "timeout" in local_var_params
!             and local_var_params["timeout"] < 0.0
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Invalid value for parameter `timeout` when calling `wait_for_approval`, must be a value greater than or equal to `0.0`"
!             )  # noqa: E501
          collection_formats = {}
  
          path_params = {}
!         if "agreement_id" in local_var_params:
!             path_params["agreementId"] = local_var_params["agreement_id"]  # noqa: E501
  
          query_params = []
!         if (
!             "timeout" in local_var_params and local_var_params["timeout"] is not None
!         ):  # noqa: E501
!             query_params.append(("timeout", local_var_params["timeout"]))  # noqa: E501
  
          header_params = {}
  
***************
*** 1684,1707 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/agreements/{agreementId}/wait', 'POST',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='str',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
--- 1871,1899 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/agreements/{agreementId}/wait",
!             "POST",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="str",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
diff -r -c target/ya_market/api_client.py src/ya_market/api_client.py
*** target/ya_market/api_client.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/api_client.py	2020-07-21 16:38:16.000000000 +0200
***************
*** 8,15 ****
      Generated by: https://openapi-generator.tech
  """
  
- from __future__ import absolute_import
- 
  import atexit
  import datetime
  from dateutil.parser import parse
--- 8,13 ----
***************
*** 20,28 ****
  import re
  import tempfile
  
! # python 2 and python 3 compatibility library
! import six
! from six.moves.urllib.parse import quote
  
  from ya_market.configuration import Configuration
  import ya_market.models
--- 18,24 ----
  import re
  import tempfile
  
! from urllib.parse import quote
  
  from ya_market.configuration import Configuration
  import ya_market.models
***************
*** 52,72 ****
          to the API. More threads means more concurrent API requests.
      """
  
!     PRIMITIVE_TYPES = (float, bool, bytes, six.text_type) + six.integer_types
      NATIVE_TYPES_MAPPING = {
!         'int': int,
!         'long': int, 
!         'float': float,
!         'str': str,
!         'bool': bool,
!         'date': datetime.date,
!         'datetime': datetime.datetime,
!         'object': object,
      }
      _pool = None
  
!     def __init__(self, configuration=None, header_name=None, header_value=None,
!                  cookie=None, pool_threads=1):
          if configuration is None:
              configuration = Configuration.get_default_copy()
          self.configuration = configuration
--- 48,74 ----
          to the API. More threads means more concurrent API requests.
      """
  
!     PRIMITIVE_TYPES = (float, bool, bytes, str, int)
      NATIVE_TYPES_MAPPING = {
!         "int": int,
!         "long": int,
!         "float": float,
!         "str": str,
!         "bool": bool,
!         "date": datetime.date,
!         "datetime": datetime.datetime,
!         "object": object,
      }
      _pool = None
  
!     def __init__(
!         self,
!         configuration=None,
!         header_name=None,
!         header_value=None,
!         cookie=None,
!         pool_threads=1,
!     ):
          if configuration is None:
              configuration = Configuration.get_default_copy()
          self.configuration = configuration
***************
*** 78,84 ****
              self.default_headers[header_name] = header_value
          self.cookie = cookie
          # Set default User-Agent.
!         self.user_agent = 'OpenAPI-Generator//python'
          self.client_side_validation = configuration.client_side_validation
  
      async def __aenter__(self):
--- 80,86 ----
              self.default_headers[header_name] = header_value
          self.cookie = cookie
          # Set default User-Agent.
!         self.user_agent = "OpenAPI-Generator//python"
          self.client_side_validation = configuration.client_side_validation
  
      async def __aenter__(self):
***************
*** 93,99 ****
              self._pool.close()
              self._pool.join()
              self._pool = None
!             if hasattr(atexit, 'unregister'):
                  atexit.unregister(self.close)
  
      @property
--- 95,101 ----
              self._pool.close()
              self._pool.join()
              self._pool = None
!             if hasattr(atexit, "unregister"):
                  atexit.unregister(self.close)
  
      @property
***************
*** 109,129 ****
      @property
      def user_agent(self):
          """User agent for this API client"""
!         return self.default_headers['User-Agent']
  
      @user_agent.setter
      def user_agent(self, value):
!         self.default_headers['User-Agent'] = value
  
      def set_default_header(self, header_name, header_value):
          self.default_headers[header_name] = header_value
  
      async def __call_api(
!             self, resource_path, method, path_params=None,
!             query_params=None, header_params=None, body=None, post_params=None,
!             files=None, response_type=None, auth_settings=None,
!             _return_http_data_only=None, collection_formats=None,
!             _preload_content=True, _request_timeout=None, _host=None):
  
          config = self.configuration
  
--- 111,143 ----
      @property
      def user_agent(self):
          """User agent for this API client"""
!         return self.default_headers["User-Agent"]
  
      @user_agent.setter
      def user_agent(self, value):
!         self.default_headers["User-Agent"] = value
  
      def set_default_header(self, header_name, header_value):
          self.default_headers[header_name] = header_value
  
      async def __call_api(
!         self,
!         resource_path,
!         method,
!         path_params=None,
!         query_params=None,
!         header_params=None,
!         body=None,
!         post_params=None,
!         files=None,
!         response_type=None,
!         auth_settings=None,
!         _return_http_data_only=None,
!         collection_formats=None,
!         _preload_content=True,
!         _request_timeout=None,
!         _host=None,
!     ):
  
          config = self.configuration
  
***************
*** 131,166 ****
          header_params = header_params or {}
          header_params.update(self.default_headers)
          if self.cookie:
!             header_params['Cookie'] = self.cookie
          if header_params:
              header_params = self.sanitize_for_serialization(header_params)
!             header_params = dict(self.parameters_to_tuples(header_params,
!                                                            collection_formats))
  
          # path parameters
          if path_params:
              path_params = self.sanitize_for_serialization(path_params)
!             path_params = self.parameters_to_tuples(path_params,
!                                                     collection_formats)
              for k, v in path_params:
                  # specified safe chars, encode everything
                  resource_path = resource_path.replace(
!                     '{%s}' % k,
!                     quote(str(v), safe=config.safe_chars_for_path_param)
                  )
  
          # query parameters
          if query_params:
              query_params = self.sanitize_for_serialization(query_params)
!             query_params = self.parameters_to_tuples(query_params,
!                                                      collection_formats)
  
          # post parameters
          if post_params or files:
              post_params = post_params if post_params else []
              post_params = self.sanitize_for_serialization(post_params)
!             post_params = self.parameters_to_tuples(post_params,
!                                                     collection_formats)
              post_params.extend(self.files_parameters(files))
  
          # auth setting
--- 145,177 ----
          header_params = header_params or {}
          header_params.update(self.default_headers)
          if self.cookie:
!             header_params["Cookie"] = self.cookie
          if header_params:
              header_params = self.sanitize_for_serialization(header_params)
!             header_params = dict(
!                 self.parameters_to_tuples(header_params, collection_formats)
!             )
  
          # path parameters
          if path_params:
              path_params = self.sanitize_for_serialization(path_params)
!             path_params = self.parameters_to_tuples(path_params, collection_formats)
              for k, v in path_params:
                  # specified safe chars, encode everything
                  resource_path = resource_path.replace(
!                     "{%s}" % k, quote(str(v), safe=config.safe_chars_for_path_param)
                  )
  
          # query parameters
          if query_params:
              query_params = self.sanitize_for_serialization(query_params)
!             query_params = self.parameters_to_tuples(query_params, collection_formats)
  
          # post parameters
          if post_params or files:
              post_params = post_params if post_params else []
              post_params = self.sanitize_for_serialization(post_params)
!             post_params = self.parameters_to_tuples(post_params, collection_formats)
              post_params.extend(self.files_parameters(files))
  
          # auth setting
***************
*** 180,194 ****
          try:
              # perform request and return response
              response_data = await self.request(
!                 method, url, query_params=query_params, headers=header_params,
!                 post_params=post_params, body=body,
                  _preload_content=_preload_content,
!                 _request_timeout=_request_timeout)
          except ApiException as e:
!             e.body = e.body.decode('utf-8') if six.PY3 else e.body
              raise e
  
!         content_type = response_data.getheader('content-type')
  
          self.last_response = response_data
  
--- 191,210 ----
          try:
              # perform request and return response
              response_data = await self.request(
!                 method,
!                 url,
!                 query_params=query_params,
!                 headers=header_params,
!                 post_params=post_params,
!                 body=body,
                  _preload_content=_preload_content,
!                 _request_timeout=_request_timeout,
!             )
          except ApiException as e:
!             e.body = e.body.decode("utf-8")
              raise e
  
!         content_type = response_data.getheader("content-type")
  
          self.last_response = response_data
  
***************
*** 197,203 ****
          if not _preload_content:
              return return_data
  
!         if six.PY3 and response_type not in ["file", "bytes"]:
              match = None
              if content_type is not None:
                  match = re.search(r"charset=([a-zA-Z\-\d]+)[\s\;]?", content_type)
--- 213,219 ----
          if not _preload_content:
              return return_data
  
!         if response_type not in ["file", "bytes"]:
              match = None
              if content_type is not None:
                  match = re.search(r"charset=([a-zA-Z\-\d]+)[\s\;]?", content_type)
***************
*** 211,220 ****
              return_data = None
  
          if _return_http_data_only:
!             return (return_data)
          else:
!             return (return_data, response_data.status,
!                     response_data.getheaders())
  
      def sanitize_for_serialization(self, obj):
          """Builds a JSON POST object.
--- 227,235 ----
              return_data = None
  
          if _return_http_data_only:
!             return return_data
          else:
!             return (return_data, response_data.status, response_data.getheaders())
  
      def sanitize_for_serialization(self, obj):
          """Builds a JSON POST object.
***************
*** 235,245 ****
          elif isinstance(obj, self.PRIMITIVE_TYPES):
              return obj
          elif isinstance(obj, list):
!             return [self.sanitize_for_serialization(sub_obj)
!                     for sub_obj in obj]
          elif isinstance(obj, tuple):
!             return tuple(self.sanitize_for_serialization(sub_obj)
!                          for sub_obj in obj)
          elif isinstance(obj, (datetime.datetime, datetime.date)):
              return obj.isoformat()
  
--- 250,258 ----
          elif isinstance(obj, self.PRIMITIVE_TYPES):
              return obj
          elif isinstance(obj, list):
!             return [self.sanitize_for_serialization(sub_obj) for sub_obj in obj]
          elif isinstance(obj, tuple):
!             return tuple(self.sanitize_for_serialization(sub_obj) for sub_obj in obj)
          elif isinstance(obj, (datetime.datetime, datetime.date)):
              return obj.isoformat()
  
***************
*** 251,262 ****
              # and attributes which value is not None.
              # Convert attribute name to json key in
              # model definition for request.
!             obj_dict = {obj.attribute_map[attr]: getattr(obj, attr)
!                         for attr, _ in six.iteritems(obj.openapi_types)
!                         if getattr(obj, attr) is not None}
! 
!         return {key: self.sanitize_for_serialization(val)
!                 for key, val in six.iteritems(obj_dict)}
  
      def deserialize(self, response, response_type):
          """Deserializes response into an object.
--- 264,278 ----
              # and attributes which value is not None.
              # Convert attribute name to json key in
              # model definition for request.
!             obj_dict = {
!                 obj.attribute_map[attr]: getattr(obj, attr)
!                 for attr, _ in obj.openapi_types.items()
!                 if getattr(obj, attr) is not None
!             }
! 
!         return {
!             key: self.sanitize_for_serialization(val) for key, val in obj_dict.items()
!         }
  
      def deserialize(self, response, response_type):
          """Deserializes response into an object.
***************
*** 292,306 ****
              return None
  
          if type(klass) == str:
!             if klass.startswith('list['):
!                 sub_kls = re.match(r'list\[(.*)\]', klass).group(1)
!                 return [self.__deserialize(sub_data, sub_kls)
!                         for sub_data in data]
! 
!             if klass.startswith('dict('):
!                 sub_kls = re.match(r'dict\(([^,]*), (.*)\)', klass).group(2)
!                 return {k: self.__deserialize(v, sub_kls)
!                         for k, v in six.iteritems(data)}
  
              # convert str to class
              if klass in self.NATIVE_TYPES_MAPPING:
--- 308,320 ----
              return None
  
          if type(klass) == str:
!             if klass.startswith("list["):
!                 sub_kls = re.match(r"list\[(.*)\]", klass).group(1)
!                 return [self.__deserialize(sub_data, sub_kls) for sub_data in data]
! 
!             if klass.startswith("dict("):
!                 sub_kls = re.match(r"dict\(([^,]*), (.*)\)", klass).group(2)
!                 return {k: self.__deserialize(v, sub_kls) for k, v in data.items()}
  
              # convert str to class
              if klass in self.NATIVE_TYPES_MAPPING:
***************
*** 319,330 ****
          else:
              return self.__deserialize_model(data, klass)
  
!     def call_api(self, resource_path, method,
!                  path_params=None, query_params=None, header_params=None,
!                  body=None, post_params=None, files=None,
!                  response_type=None, auth_settings=None, async_req=None,
!                  _return_http_data_only=None, collection_formats=None,
!                  _preload_content=True, _request_timeout=None, _host=None):
          """Makes the HTTP request (synchronous) and returns deserialized data.
  
          To make an async_req request, set the async_req parameter.
--- 333,357 ----
          else:
              return self.__deserialize_model(data, klass)
  
!     def call_api(
!         self,
!         resource_path,
!         method,
!         path_params=None,
!         query_params=None,
!         header_params=None,
!         body=None,
!         post_params=None,
!         files=None,
!         response_type=None,
!         auth_settings=None,
!         async_req=None,
!         _return_http_data_only=None,
!         collection_formats=None,
!         _preload_content=True,
!         _request_timeout=None,
!         _host=None,
!     ):
          """Makes the HTTP request (synchronous) and returns deserialized data.
  
          To make an async_req request, set the async_req parameter.
***************
*** 362,440 ****
              then the method will return the response directly.
          """
          if not async_req:
!             return self.__call_api(resource_path, method,
!                                    path_params, query_params, header_params,
!                                    body, post_params, files,
!                                    response_type, auth_settings,
!                                    _return_http_data_only, collection_formats,
!                                    _preload_content, _request_timeout, _host)
! 
!         return self.pool.apply_async(self.__call_api, (resource_path,
!                                                        method, path_params,
!                                                        query_params,
!                                                        header_params, body,
!                                                        post_params, files,
!                                                        response_type,
!                                                        auth_settings,
!                                                        _return_http_data_only,
!                                                        collection_formats,
!                                                        _preload_content,
!                                                        _request_timeout,
!                                                        _host))
! 
!     def request(self, method, url, query_params=None, headers=None,
!                 post_params=None, body=None, _preload_content=True,
!                 _request_timeout=None):
          """Makes the HTTP request using RESTClient."""
          if method == "GET":
!             return self.rest_client.GET(url,
!                                         query_params=query_params,
!                                         _preload_content=_preload_content,
!                                         _request_timeout=_request_timeout,
!                                         headers=headers)
          elif method == "HEAD":
!             return self.rest_client.HEAD(url,
!                                          query_params=query_params,
!                                          _preload_content=_preload_content,
!                                          _request_timeout=_request_timeout,
!                                          headers=headers)
          elif method == "OPTIONS":
!             return self.rest_client.OPTIONS(url,
!                                             query_params=query_params,
!                                             headers=headers,
!                                             _preload_content=_preload_content,
!                                             _request_timeout=_request_timeout)
          elif method == "POST":
!             return self.rest_client.POST(url,
!                                          query_params=query_params,
!                                          headers=headers,
!                                          post_params=post_params,
!                                          _preload_content=_preload_content,
!                                          _request_timeout=_request_timeout,
!                                          body=body)
          elif method == "PUT":
!             return self.rest_client.PUT(url,
!                                         query_params=query_params,
!                                         headers=headers,
!                                         post_params=post_params,
!                                         _preload_content=_preload_content,
!                                         _request_timeout=_request_timeout,
!                                         body=body)
          elif method == "PATCH":
!             return self.rest_client.PATCH(url,
!                                           query_params=query_params,
!                                           headers=headers,
!                                           post_params=post_params,
!                                           _preload_content=_preload_content,
!                                           _request_timeout=_request_timeout,
!                                           body=body)
          elif method == "DELETE":
!             return self.rest_client.DELETE(url,
!                                            query_params=query_params,
!                                            headers=headers,
!                                            _preload_content=_preload_content,
!                                            _request_timeout=_request_timeout,
!                                            body=body)
          else:
              raise ApiValueError(
                  "http method must be `GET`, `HEAD`, `OPTIONS`,"
--- 389,508 ----
              then the method will return the response directly.
          """
          if not async_req:
!             return self.__call_api(
!                 resource_path,
!                 method,
!                 path_params,
!                 query_params,
!                 header_params,
!                 body,
!                 post_params,
!                 files,
!                 response_type,
!                 auth_settings,
!                 _return_http_data_only,
!                 collection_formats,
!                 _preload_content,
!                 _request_timeout,
!                 _host,
!             )
! 
!         return self.pool.apply_async(
!             self.__call_api,
!             (
!                 resource_path,
!                 method,
!                 path_params,
!                 query_params,
!                 header_params,
!                 body,
!                 post_params,
!                 files,
!                 response_type,
!                 auth_settings,
!                 _return_http_data_only,
!                 collection_formats,
!                 _preload_content,
!                 _request_timeout,
!                 _host,
!             ),
!         )
! 
!     def request(
!         self,
!         method,
!         url,
!         query_params=None,
!         headers=None,
!         post_params=None,
!         body=None,
!         _preload_content=True,
!         _request_timeout=None,
!     ):
          """Makes the HTTP request using RESTClient."""
          if method == "GET":
!             return self.rest_client.GET(
!                 url,
!                 query_params=query_params,
!                 _preload_content=_preload_content,
!                 _request_timeout=_request_timeout,
!                 headers=headers,
!             )
          elif method == "HEAD":
!             return self.rest_client.HEAD(
!                 url,
!                 query_params=query_params,
!                 _preload_content=_preload_content,
!                 _request_timeout=_request_timeout,
!                 headers=headers,
!             )
          elif method == "OPTIONS":
!             return self.rest_client.OPTIONS(
!                 url,
!                 query_params=query_params,
!                 headers=headers,
!                 _preload_content=_preload_content,
!                 _request_timeout=_request_timeout,
!             )
          elif method == "POST":
!             return self.rest_client.POST(
!                 url,
!                 query_params=query_params,
!                 headers=headers,
!                 post_params=post_params,
!                 _preload_content=_preload_content,
!                 _request_timeout=_request_timeout,
!                 body=body,
!             )
          elif method == "PUT":
!             return self.rest_client.PUT(
!                 url,
!                 query_params=query_params,
!                 headers=headers,
!                 post_params=post_params,
!                 _preload_content=_preload_content,
!                 _request_timeout=_request_timeout,
!                 body=body,
!             )
          elif method == "PATCH":
!             return self.rest_client.PATCH(
!                 url,
!                 query_params=query_params,
!                 headers=headers,
!                 post_params=post_params,
!                 _preload_content=_preload_content,
!                 _request_timeout=_request_timeout,
!                 body=body,
!             )
          elif method == "DELETE":
!             return self.rest_client.DELETE(
!                 url,
!                 query_params=query_params,
!                 headers=headers,
!                 _preload_content=_preload_content,
!                 _request_timeout=_request_timeout,
!                 body=body,
!             )
          else:
              raise ApiValueError(
                  "http method must be `GET`, `HEAD`, `OPTIONS`,"
***************
*** 451,472 ****
          new_params = []
          if collection_formats is None:
              collection_formats = {}
!         for k, v in six.iteritems(params) if isinstance(params, dict) else params:  # noqa: E501
              if k in collection_formats:
                  collection_format = collection_formats[k]
!                 if collection_format == 'multi':
                      new_params.extend((k, value) for value in v)
                  else:
!                     if collection_format == 'ssv':
!                         delimiter = ' '
!                     elif collection_format == 'tsv':
!                         delimiter = '\t'
!                     elif collection_format == 'pipes':
!                         delimiter = '|'
                      else:  # csv is the default
!                         delimiter = ','
!                     new_params.append(
!                         (k, delimiter.join(str(value) for value in v)))
              else:
                  new_params.append((k, v))
          return new_params
--- 519,541 ----
          new_params = []
          if collection_formats is None:
              collection_formats = {}
!         for k, v in (
!             params.items() if isinstance(params, dict) else params
!         ):  # noqa: E501
              if k in collection_formats:
                  collection_format = collection_formats[k]
!                 if collection_format == "multi":
                      new_params.extend((k, value) for value in v)
                  else:
!                     if collection_format == "ssv":
!                         delimiter = " "
!                     elif collection_format == "tsv":
!                         delimiter = "\t"
!                     elif collection_format == "pipes":
!                         delimiter = "|"
                      else:  # csv is the default
!                         delimiter = ","
!                     new_params.append((k, delimiter.join(str(value) for value in v)))
              else:
                  new_params.append((k, v))
          return new_params
***************
*** 480,497 ****
          params = []
  
          if files:
!             for k, v in six.iteritems(files):
                  if not v:
                      continue
                  file_names = v if type(v) is list else [v]
                  for n in file_names:
!                     with open(n, 'rb') as f:
                          filename = os.path.basename(f.name)
                          filedata = f.read()
!                         mimetype = (mimetypes.guess_type(filename)[0] or
!                                     'application/octet-stream')
!                         params.append(
!                             tuple([k, tuple([filename, filedata, mimetype])]))
  
          return params
  
--- 549,567 ----
          params = []
  
          if files:
!             for k, v in files.items():
                  if not v:
                      continue
                  file_names = v if type(v) is list else [v]
                  for n in file_names:
!                     with open(n, "rb") as f:
                          filename = os.path.basename(f.name)
                          filedata = f.read()
!                         mimetype = (
!                             mimetypes.guess_type(filename)[0]
!                             or "application/octet-stream"
!                         )
!                         params.append(tuple([k, tuple([filename, filedata, mimetype])]))
  
          return params
  
***************
*** 506,515 ****
  
          accepts = [x.lower() for x in accepts]
  
!         if 'application/json' in accepts:
!             return 'application/json'
          else:
!             return ', '.join(accepts)
  
      def select_header_content_type(self, content_types):
          """Returns `Content-Type` based on an array of content_types provided.
--- 576,585 ----
  
          accepts = [x.lower() for x in accepts]
  
!         if "application/json" in accepts:
!             return "application/json"
          else:
!             return ", ".join(accepts)
  
      def select_header_content_type(self, content_types):
          """Returns `Content-Type` based on an array of content_types provided.
***************
*** 518,529 ****
          :return: Content-Type (e.g. application/json).
          """
          if not content_types:
!             return 'application/json'
  
          content_types = [x.lower() for x in content_types]
  
!         if 'application/json' in content_types or '*/*' in content_types:
!             return 'application/json'
          else:
              return content_types[0]
  
--- 588,599 ----
          :return: Content-Type (e.g. application/json).
          """
          if not content_types:
!             return "application/json"
  
          content_types = [x.lower() for x in content_types]
  
!         if "application/json" in content_types or "*/*" in content_types:
!             return "application/json"
          else:
              return content_types[0]
  
***************
*** 540,554 ****
          for auth in auth_settings:
              auth_setting = self.configuration.auth_settings().get(auth)
              if auth_setting:
!                 if auth_setting['in'] == 'cookie':
!                     headers['Cookie'] = auth_setting['value']
!                 elif auth_setting['in'] == 'header':
!                     headers[auth_setting['key']] = auth_setting['value']
!                 elif auth_setting['in'] == 'query':
!                     querys.append((auth_setting['key'], auth_setting['value']))
                  else:
                      raise ApiValueError(
!                         'Authentication token must be in `query` or `header`'
                      )
  
      def __deserialize_file(self, response):
--- 610,624 ----
          for auth in auth_settings:
              auth_setting = self.configuration.auth_settings().get(auth)
              if auth_setting:
!                 if auth_setting["in"] == "cookie":
!                     headers["Cookie"] = auth_setting["value"]
!                 elif auth_setting["in"] == "header":
!                     headers[auth_setting["key"]] = auth_setting["value"]
!                 elif auth_setting["in"] == "query":
!                     querys.append((auth_setting["key"], auth_setting["value"]))
                  else:
                      raise ApiValueError(
!                         "Authentication token must be in `query` or `header`"
                      )
  
      def __deserialize_file(self, response):
***************
*** 566,573 ****
  
          content_disposition = response.getheader("Content-Disposition")
          if content_disposition:
!             filename = re.search(r'filename=[\'"]?([^\'"\s]+)[\'"]?',
!                                  content_disposition).group(1)
              path = os.path.join(os.path.dirname(path), filename)
  
          with open(path, "wb") as f:
--- 636,644 ----
  
          content_disposition = response.getheader("Content-Disposition")
          if content_disposition:
!             filename = re.search(
!                 r'filename=[\'"]?([^\'"\s]+)[\'"]?', content_disposition
!             ).group(1)
              path = os.path.join(os.path.dirname(path), filename)
  
          with open(path, "wb") as f:
***************
*** 586,592 ****
          try:
              return klass(data)
          except UnicodeEncodeError:
!             return six.text_type(data)
          except TypeError:
              return data
  
--- 657,663 ----
          try:
              return klass(data)
          except UnicodeEncodeError:
!             return str(data)
          except TypeError:
              return data
  
***************
*** 609,616 ****
              return string
          except ValueError:
              raise rest.ApiException(
!                 status=0,
!                 reason="Failed to parse `{0}` as date object".format(string)
              )
  
      def __deserialize_datetime(self, string):
--- 680,686 ----
              return string
          except ValueError:
              raise rest.ApiException(
!                 status=0, reason="Failed to parse `{0}` as date object".format(string)
              )
  
      def __deserialize_datetime(self, string):
***************
*** 628,637 ****
          except ValueError:
              raise rest.ApiException(
                  status=0,
!                 reason=(
!                     "Failed to parse `{0}` as datetime object"
!                     .format(string)
!                 )
              )
  
      def __deserialize_model(self, data, klass):
--- 698,704 ----
          except ValueError:
              raise rest.ApiException(
                  status=0,
!                 reason=("Failed to parse `{0}` as datetime object".format(string)),
              )
  
      def __deserialize_model(self, data, klass):
***************
*** 642,659 ****
          :return: model object.
          """
          has_discriminator = False
!         if (hasattr(klass, 'get_real_child_model')
!                 and klass.discriminator_value_class_map):
              has_discriminator = True
  
          if not klass.openapi_types and has_discriminator is False:
              return data
  
          kwargs = {}
!         if (data is not None and
!                 klass.openapi_types is not None and
!                 isinstance(data, (list, dict))):
!             for attr, attr_type in six.iteritems(klass.openapi_types):
                  if klass.attribute_map[attr] in data:
                      value = data[klass.attribute_map[attr]]
                      kwargs[attr] = self.__deserialize(value, attr_type)
--- 709,730 ----
          :return: model object.
          """
          has_discriminator = False
!         if (
!             hasattr(klass, "get_real_child_model")
!             and klass.discriminator_value_class_map
!         ):
              has_discriminator = True
  
          if not klass.openapi_types and has_discriminator is False:
              return data
  
          kwargs = {}
!         if (
!             data is not None
!             and klass.openapi_types is not None
!             and isinstance(data, (list, dict))
!         ):
!             for attr, attr_type in klass.openapi_types.items():
                  if klass.attribute_map[attr] in data:
                      value = data[klass.attribute_map[attr]]
                      kwargs[attr] = self.__deserialize(value, attr_type)
diff -r -c target/ya_market/configuration.py src/ya_market/configuration.py
*** target/ya_market/configuration.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/configuration.py	2020-07-21 16:04:48.000000000 +0200
***************
*** 9,20 ****
      Generated by: https://openapi-generator.tech
  """
  
! 
! from __future__ import absolute_import
! 
  import copy
  import logging
  import sys
  
  
  class Configuration(object):
--- 9,19 ----
      Generated by: https://openapi-generator.tech
  """
  
! import base64
  import copy
  import logging
  import sys
+ from typing import Callable, Optional
  
  
  class Configuration(object):
***************
*** 50,60 ****
  
      _default = None
  
!     def __init__(self, host="http://localhost/market-api/v1",
!                  api_key=None, api_key_prefix=None,
!                  username=None, password=None,
!                  discard_unknown_keys=False,
!                  ):
          """Constructor
          """
          self.host = host
--- 49,63 ----
  
      _default = None
  
!     def __init__(
!         self,
!         host="http://localhost/market-api/v1",
!         api_key=None,
!         api_key_prefix=None,
!         username=None,
!         password=None,
!         discard_unknown_keys=False,
!     ):
          """Constructor
          """
          self.host = host
***************
*** 74,80 ****
              self.api_key_prefix = api_key_prefix
          """dict to store API prefix (e.g. Bearer)
          """
!         self.refresh_api_key_hook = None
          """function hook to refresh API key if expired
          """
          self.username = username
--- 77,83 ----
              self.api_key_prefix = api_key_prefix
          """dict to store API prefix (e.g. Bearer)
          """
!         self.refresh_api_key_hook = Optional[Callable]
          """function hook to refresh API key if expired
          """
          self.username = username
***************
*** 92,98 ****
          """
          self.logger["package_logger"] = logging.getLogger("ya_market")
          self.logger["urllib3_logger"] = logging.getLogger("urllib3")
!         self.logger_format = '%(asctime)s %(levelname)s %(message)s'
          """Log format
          """
          self.logger_stream_handler = None
--- 95,101 ----
          """
          self.logger["package_logger"] = logging.getLogger("ya_market")
          self.logger["urllib3_logger"] = logging.getLogger("urllib3")
!         self.logger_format = "%(asctime)s %(levelname)s %(message)s"
          """Log format
          """
          self.logger_stream_handler = None
***************
*** 137,143 ****
          self.proxy_headers = None
          """Proxy headers
          """
!         self.safe_chars_for_path_param = ''
          """Safe chars for path_param
          """
          self.retries = None
--- 140,146 ----
          self.proxy_headers = None
          """Proxy headers
          """
!         self.safe_chars_for_path_param = ""
          """Safe chars for path_param
          """
          self.retries = None
***************
*** 151,157 ****
          result = cls.__new__(cls)
          memo[id(self)] = result
          for k, v in self.__dict__.items():
!             if k not in ('logger', 'logger_file_handler'):
                  setattr(result, k, copy.deepcopy(v, memo))
          # shallow copy of loggers
          result.logger = copy.copy(self.logger)
--- 154,160 ----
          result = cls.__new__(cls)
          memo[id(self)] = result
          for k, v in self.__dict__.items():
!             if k not in ("logger", "logger_file_handler"):
                  setattr(result, k, copy.deepcopy(v, memo))
          # shallow copy of loggers
          result.logger = copy.copy(self.logger)
***************
*** 216,222 ****
              # then add file handler and remove stream handler.
              self.logger_file_handler = logging.FileHandler(self.__logger_file)
              self.logger_file_handler.setFormatter(self.logger_formatter)
!             for _, logger in six.iteritems(self.logger):
                  logger.addHandler(self.logger_file_handler)
  
      @property
--- 219,225 ----
              # then add file handler and remove stream handler.
              self.logger_file_handler = logging.FileHandler(self.__logger_file)
              self.logger_file_handler.setFormatter(self.logger_formatter)
!             for _, logger in self.logger.items():
                  logger.addHandler(self.logger_file_handler)
  
      @property
***************
*** 269,277 ****
          password = ""
          if self.password is not None:
              password = self.password
!         return urllib3.util.make_headers(
!             basic_auth=username + ':' + password
!         ).get('authorization')
  
      def auth_settings(self):
          """Gets Auth Settings dict for api client.
--- 272,279 ----
          password = ""
          if self.password is not None:
              password = self.password
!         credentials = username + ":" + password
!         return base64.b64encode(credentials.encode()).decode()
  
      def auth_settings(self):
          """Gets Auth Settings dict for api client.
***************
*** 280,290 ****
          """
          auth = {}
          if self.access_token is not None:
!             auth['app_key'] = {
!                 'type': 'bearer',
!                 'in': 'header',
!                 'key': 'Authorization',
!                 'value': 'Bearer ' + self.access_token
              }
          return auth
  
--- 282,292 ----
          """
          auth = {}
          if self.access_token is not None:
!             auth["app_key"] = {
!                 "type": "bearer",
!                 "in": "header",
!                 "key": "Authorization",
!                 "value": "Bearer " + self.access_token,
              }
          return auth
  
***************
*** 293,316 ****
  
          :return: The report for debugging.
          """
!         return "Python SDK Debug Report:\n"\
!                "OS: {env}\n"\
!                "Python Version: {pyversion}\n"\
!                "Version of the API: 1.6.0\n"\
!                "SDK Package Version: ".\
!                format(env=sys.platform, pyversion=sys.version)
  
      def get_host_settings(self):
          """Gets an array of host settings
  
          :return: An array of host settings
          """
!         return [
!             {
!                 'url': "/market-api/v1",
!                 'description': "No description provided",
!             }
!         ]
  
      def get_host_from_settings(self, index, variables=None):
          """Gets host URL based on the index and variables
--- 295,314 ----
  
          :return: The report for debugging.
          """
!         return (
!             "Python SDK Debug Report:\n"
!             "OS: {env}\n"
!             "Python Version: {pyversion}\n"
!             "Version of the API: 1.6.0\n"
!             "SDK Package Version: ".format(env=sys.platform, pyversion=sys.version)
!         )
  
      def get_host_settings(self):
          """Gets an array of host settings
  
          :return: An array of host settings
          """
!         return [{"url": "/market-api/v1", "description": "No description provided",}]
  
      def get_host_from_settings(self, index, variables=None):
          """Gets host URL based on the index and variables
***************
*** 326,347 ****
          except IndexError:
              raise ValueError(
                  "Invalid index {0} when selecting the host settings. "
!                 "Must be less than {1}".format(index, len(servers)))
  
!         url = server['url']
  
          # go through variables and replace placeholders
!         for variable_name, variable in server['variables'].items():
!             used_value = variables.get(
!                 variable_name, variable['default_value'])
  
!             if 'enum_values' in variable \
!                     and used_value not in variable['enum_values']:
                  raise ValueError(
                      "The variable `{0}` in the host URL has invalid value "
                      "{1}. Must be {2}.".format(
!                         variable_name, variables[variable_name],
!                         variable['enum_values']))
  
              url = url.replace("{" + variable_name + "}", used_value)
  
--- 324,345 ----
          except IndexError:
              raise ValueError(
                  "Invalid index {0} when selecting the host settings. "
!                 "Must be less than {1}".format(index, len(servers))
!             )
  
!         url = server["url"]
  
          # go through variables and replace placeholders
!         for variable_name, variable in server["variables"].items():
!             used_value = variables.get(variable_name, variable["default_value"])
  
!             if "enum_values" in variable and used_value not in variable["enum_values"]:
                  raise ValueError(
                      "The variable `{0}` in the host URL has invalid value "
                      "{1}. Must be {2}.".format(
!                         variable_name, variables[variable_name], variable["enum_values"]
!                     )
!                 )
  
              url = url.replace("{" + variable_name + "}", used_value)
  
diff -r -c target/ya_market/exceptions.py src/ya_market/exceptions.py
*** target/ya_market/exceptions.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/exceptions.py	2020-07-21 16:04:48.000000000 +0200
***************
*** 10,25 ****
  """
  
  
- import six
- 
- 
  class OpenApiException(Exception):
      """The base exception class for all OpenAPIExceptions"""
  
  
  class ApiTypeError(OpenApiException, TypeError):
!     def __init__(self, msg, path_to_item=None, valid_classes=None,
!                  key_type=None):
          """ Raises an exception for TypeErrors
  
          Args:
--- 10,21 ----
  """
  
  
  class OpenApiException(Exception):
      """The base exception class for all OpenAPIExceptions"""
  
  
  class ApiTypeError(OpenApiException, TypeError):
!     def __init__(self, msg, path_to_item=None, valid_classes=None, key_type=None):
          """ Raises an exception for TypeErrors
  
          Args:
***************
*** 82,88 ****
  
  
  class ApiException(OpenApiException):
- 
      def __init__(self, status=None, reason=None, http_resp=None):
          if http_resp:
              self.status = http_resp.status
--- 78,83 ----
***************
*** 97,107 ****
  
      def __str__(self):
          """Custom error messages for exception"""
!         error_message = "({0})\n"\
!                         "Reason: {1}\n".format(self.status, self.reason)
          if self.headers:
!             error_message += "HTTP response headers: {0}\n".format(
!                 self.headers)
  
          if self.body:
              error_message += "HTTP response body: {0}\n".format(self.body)
--- 92,100 ----
  
      def __str__(self):
          """Custom error messages for exception"""
!         error_message = "({0})\n" "Reason: {1}\n".format(self.status, self.reason)
          if self.headers:
!             error_message += "HTTP response headers: {0}\n".format(self.headers)
  
          if self.body:
              error_message += "HTTP response body: {0}\n".format(self.body)
***************
*** 113,119 ****
      """Returns a string representation of a path"""
      result = ""
      for pth in path_to_item:
!         if isinstance(pth, six.integer_types):
              result += "[{0}]".format(pth)
          else:
              result += "['{0}']".format(pth)
--- 106,112 ----
      """Returns a string representation of a path"""
      result = ""
      for pth in path_to_item:
!         if isinstance(pth, int):
              result += "[{0}]".format(pth)
          else:
              result += "['{0}']".format(pth)
diff -r -c target/ya_market/models/__init__.py src/ya_market/models/__init__.py
*** target/ya_market/models/__init__.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/models/__init__.py	2020-07-21 14:26:08.000000000 +0200
***************
*** 10,18 ****
      Generated by: https://openapi-generator.tech
  """
  
- 
- from __future__ import absolute_import
- 
  # import models into model package
  from ya_market.models.agreement import Agreement
  from ya_market.models.agreement_event import AgreementEvent
--- 10,15 ----
diff -r -c target/ya_market/models/agreement.py src/ya_market/models/agreement.py
*** target/ya_market/models/agreement.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/models/agreement.py	2020-07-21 16:04:49.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_market.configuration import Configuration
  
--- 13,18 ----
***************
*** 33,62 ****
                              and the value is json key in definition.
      """
      openapi_types = {
!         'agreement_id': 'str',
!         'demand': 'Demand',
!         'offer': 'Offer',
!         'valid_to': 'datetime',
!         'approved_date': 'datetime',
!         'state': 'str',
!         'proposed_signature': 'str',
!         'approved_signature': 'str',
!         'committed_signature': 'str'
      }
  
      attribute_map = {
!         'agreement_id': 'agreementId',
!         'demand': 'demand',
!         'offer': 'offer',
!         'valid_to': 'validTo',
!         'approved_date': 'approvedDate',
!         'state': 'state',
!         'proposed_signature': 'proposedSignature',
!         'approved_signature': 'approvedSignature',
!         'committed_signature': 'committedSignature'
      }
  
!     def __init__(self, agreement_id=None, demand=None, offer=None, valid_to=None, approved_date=None, state=None, proposed_signature=None, approved_signature=None, committed_signature=None, local_vars_configuration=None):  # noqa: E501
          """Agreement - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
--- 32,73 ----
                              and the value is json key in definition.
      """
      openapi_types = {
!         "agreement_id": "str",
!         "demand": "Demand",
!         "offer": "Offer",
!         "valid_to": "datetime",
!         "approved_date": "datetime",
!         "state": "str",
!         "proposed_signature": "str",
!         "approved_signature": "str",
!         "committed_signature": "str",
      }
  
      attribute_map = {
!         "agreement_id": "agreementId",
!         "demand": "demand",
!         "offer": "offer",
!         "valid_to": "validTo",
!         "approved_date": "approvedDate",
!         "state": "state",
!         "proposed_signature": "proposedSignature",
!         "approved_signature": "approvedSignature",
!         "committed_signature": "committedSignature",
      }
  
!     def __init__(
!         self,
!         agreement_id=None,
!         demand=None,
!         offer=None,
!         valid_to=None,
!         approved_date=None,
!         state=None,
!         proposed_signature=None,
!         approved_signature=None,
!         committed_signature=None,
!         local_vars_configuration=None,
!     ):  # noqa: E501
          """Agreement - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
***************
*** 105,112 ****
          :param agreement_id: The agreement_id of this Agreement.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and agreement_id is None:  # noqa: E501
!             raise ValueError("Invalid value for `agreement_id`, must not be `None`")  # noqa: E501
  
          self._agreement_id = agreement_id
  
--- 116,128 ----
          :param agreement_id: The agreement_id of this Agreement.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation
!             and agreement_id is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `agreement_id`, must not be `None`"
!             )  # noqa: E501
  
          self._agreement_id = agreement_id
  
***************
*** 128,135 ****
          :param demand: The demand of this Agreement.  # noqa: E501
          :type: Demand
          """
!         if self.local_vars_configuration.client_side_validation and demand is None:  # noqa: E501
!             raise ValueError("Invalid value for `demand`, must not be `None`")  # noqa: E501
  
          self._demand = demand
  
--- 144,155 ----
          :param demand: The demand of this Agreement.  # noqa: E501
          :type: Demand
          """
!         if (
!             self.local_vars_configuration.client_side_validation and demand is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `demand`, must not be `None`"
!             )  # noqa: E501
  
          self._demand = demand
  
***************
*** 151,158 ****
          :param offer: The offer of this Agreement.  # noqa: E501
          :type: Offer
          """
!         if self.local_vars_configuration.client_side_validation and offer is None:  # noqa: E501
!             raise ValueError("Invalid value for `offer`, must not be `None`")  # noqa: E501
  
          self._offer = offer
  
--- 171,182 ----
          :param offer: The offer of this Agreement.  # noqa: E501
          :type: Offer
          """
!         if (
!             self.local_vars_configuration.client_side_validation and offer is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `offer`, must not be `None`"
!             )  # noqa: E501
  
          self._offer = offer
  
***************
*** 176,183 ****
          :param valid_to: The valid_to of this Agreement.  # noqa: E501
          :type: datetime
          """
!         if self.local_vars_configuration.client_side_validation and valid_to is None:  # noqa: E501
!             raise ValueError("Invalid value for `valid_to`, must not be `None`")  # noqa: E501
  
          self._valid_to = valid_to
  
--- 200,211 ----
          :param valid_to: The valid_to of this Agreement.  # noqa: E501
          :type: datetime
          """
!         if (
!             self.local_vars_configuration.client_side_validation and valid_to is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `valid_to`, must not be `None`"
!             )  # noqa: E501
  
          self._valid_to = valid_to
  
***************
*** 224,236 ****
          :param state: The state of this Agreement.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and state is None:  # noqa: E501
!             raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
!         allowed_values = ["Proposal", "Pending", "Cancelled", "Rejected", "Approved", "Expired", "Terminated"]  # noqa: E501
!         if self.local_vars_configuration.client_side_validation and state not in allowed_values:  # noqa: E501
              raise ValueError(
!                 "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
!                 .format(state, allowed_values)
              )
  
          self._state = state
--- 252,280 ----
          :param state: The state of this Agreement.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation and state is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `state`, must not be `None`"
!             )  # noqa: E501
!         allowed_values = [
!             "Proposal",
!             "Pending",
!             "Cancelled",
!             "Rejected",
!             "Approved",
!             "Expired",
!             "Terminated",
!         ]  # noqa: E501
!         if (
!             self.local_vars_configuration.client_side_validation
!             and state not in allowed_values
!         ):  # noqa: E501
              raise ValueError(
!                 "Invalid value for `state` ({0}), must be one of {1}".format(  # noqa: E501
!                     state, allowed_values
!                 )
              )
  
          self._state = state
***************
*** 302,322 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 346,368 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_market/models/agreement_event.py src/ya_market/models/agreement_event.py
*** target/ya_market/models/agreement_event.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/models/agreement_event.py	2020-07-21 16:04:49.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_market.configuration import Configuration
  
--- 13,18 ----
***************
*** 32,44 ****
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {
!         'agreement': 'Agreement'
!     }
! 
!     attribute_map = {
!         'agreement': 'agreement'
!     }
  
      def __init__(self, agreement=None, local_vars_configuration=None):  # noqa: E501
          """AgreementEvent - a model defined in OpenAPI"""  # noqa: E501
--- 31,39 ----
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {"agreement": "Agreement"}
! 
!     attribute_map = {"agreement": "agreement"}
  
      def __init__(self, agreement=None, local_vars_configuration=None):  # noqa: E501
          """AgreementEvent - a model defined in OpenAPI"""  # noqa: E501
***************
*** 77,97 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 72,94 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_market/models/agreement_event_all_of.py src/ya_market/models/agreement_event_all_of.py
*** target/ya_market/models/agreement_event_all_of.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/models/agreement_event_all_of.py	2020-07-21 16:04:49.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_market.configuration import Configuration
  
--- 13,18 ----
***************
*** 32,44 ****
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {
!         'agreement': 'Agreement'
!     }
! 
!     attribute_map = {
!         'agreement': 'agreement'
!     }
  
      def __init__(self, agreement=None, local_vars_configuration=None):  # noqa: E501
          """AgreementEventAllOf - a model defined in OpenAPI"""  # noqa: E501
--- 31,39 ----
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {"agreement": "Agreement"}
! 
!     attribute_map = {"agreement": "agreement"}
  
      def __init__(self, agreement=None, local_vars_configuration=None):  # noqa: E501
          """AgreementEventAllOf - a model defined in OpenAPI"""  # noqa: E501
***************
*** 77,97 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 72,94 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_market/models/agreement_proposal.py src/ya_market/models/agreement_proposal.py
*** target/ya_market/models/agreement_proposal.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/models/agreement_proposal.py	2020-07-21 16:04:49.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_market.configuration import Configuration
  
--- 13,18 ----
***************
*** 32,48 ****
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {
!         'proposal_id': 'str',
!         'valid_to': 'datetime'
!     }
! 
!     attribute_map = {
!         'proposal_id': 'proposalId',
!         'valid_to': 'validTo'
!     }
  
!     def __init__(self, proposal_id=None, valid_to=None, local_vars_configuration=None):  # noqa: E501
          """AgreementProposal - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
--- 31,43 ----
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {"proposal_id": "str", "valid_to": "datetime"}
  
!     attribute_map = {"proposal_id": "proposalId", "valid_to": "validTo"}
! 
!     def __init__(
!         self, proposal_id=None, valid_to=None, local_vars_configuration=None
!     ):  # noqa: E501
          """AgreementProposal - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
***************
*** 75,82 ****
          :param proposal_id: The proposal_id of this AgreementProposal.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and proposal_id is None:  # noqa: E501
!             raise ValueError("Invalid value for `proposal_id`, must not be `None`")  # noqa: E501
  
          self._proposal_id = proposal_id
  
--- 70,81 ----
          :param proposal_id: The proposal_id of this AgreementProposal.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation and proposal_id is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `proposal_id`, must not be `None`"
!             )  # noqa: E501
  
          self._proposal_id = proposal_id
  
***************
*** 100,107 ****
          :param valid_to: The valid_to of this AgreementProposal.  # noqa: E501
          :type: datetime
          """
!         if self.local_vars_configuration.client_side_validation and valid_to is None:  # noqa: E501
!             raise ValueError("Invalid value for `valid_to`, must not be `None`")  # noqa: E501
  
          self._valid_to = valid_to
  
--- 99,110 ----
          :param valid_to: The valid_to of this AgreementProposal.  # noqa: E501
          :type: datetime
          """
!         if (
!             self.local_vars_configuration.client_side_validation and valid_to is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `valid_to`, must not be `None`"
!             )  # noqa: E501
  
          self._valid_to = valid_to
  
***************
*** 109,129 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 112,134 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_market/models/demand.py src/ya_market/models/demand.py
*** target/ya_market/models/demand.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/models/demand.py	2020-07-21 16:04:49.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_market.configuration import Configuration
  
--- 13,18 ----
***************
*** 33,52 ****
                              and the value is json key in definition.
      """
      openapi_types = {
!         'properties': 'object',
!         'constraints': 'str',
!         'demand_id': 'str',
!         'requestor_id': 'str'
      }
  
      attribute_map = {
!         'properties': 'properties',
!         'constraints': 'constraints',
!         'demand_id': 'demandId',
!         'requestor_id': 'requestorId'
      }
  
!     def __init__(self, properties=None, constraints=None, demand_id=None, requestor_id=None, local_vars_configuration=None):  # noqa: E501
          """Demand - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
--- 32,58 ----
                              and the value is json key in definition.
      """
      openapi_types = {
!         "properties": "object",
!         "constraints": "str",
!         "demand_id": "str",
!         "requestor_id": "str",
      }
  
      attribute_map = {
!         "properties": "properties",
!         "constraints": "constraints",
!         "demand_id": "demandId",
!         "requestor_id": "requestorId",
      }
  
!     def __init__(
!         self,
!         properties=None,
!         constraints=None,
!         demand_id=None,
!         requestor_id=None,
!         local_vars_configuration=None,
!     ):  # noqa: E501
          """Demand - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
***************
*** 83,90 ****
          :param properties: The properties of this Demand.  # noqa: E501
          :type: object
          """
!         if self.local_vars_configuration.client_side_validation and properties is None:  # noqa: E501
!             raise ValueError("Invalid value for `properties`, must not be `None`")  # noqa: E501
  
          self._properties = properties
  
--- 89,100 ----
          :param properties: The properties of this Demand.  # noqa: E501
          :type: object
          """
!         if (
!             self.local_vars_configuration.client_side_validation and properties is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `properties`, must not be `None`"
!             )  # noqa: E501
  
          self._properties = properties
  
***************
*** 106,113 ****
          :param constraints: The constraints of this Demand.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and constraints is None:  # noqa: E501
!             raise ValueError("Invalid value for `constraints`, must not be `None`")  # noqa: E501
  
          self._constraints = constraints
  
--- 116,127 ----
          :param constraints: The constraints of this Demand.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation and constraints is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `constraints`, must not be `None`"
!             )  # noqa: E501
  
          self._constraints = constraints
  
***************
*** 157,177 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 171,193 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_market/models/demand_all_of.py src/ya_market/models/demand_all_of.py
*** target/ya_market/models/demand_all_of.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/models/demand_all_of.py	2020-07-21 16:04:49.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_market.configuration import Configuration
  
--- 13,18 ----
***************
*** 32,48 ****
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {
!         'demand_id': 'str',
!         'requestor_id': 'str'
!     }
! 
!     attribute_map = {
!         'demand_id': 'demandId',
!         'requestor_id': 'requestorId'
!     }
  
!     def __init__(self, demand_id=None, requestor_id=None, local_vars_configuration=None):  # noqa: E501
          """DemandAllOf - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
--- 31,43 ----
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {"demand_id": "str", "requestor_id": "str"}
  
!     attribute_map = {"demand_id": "demandId", "requestor_id": "requestorId"}
! 
!     def __init__(
!         self, demand_id=None, requestor_id=None, local_vars_configuration=None
!     ):  # noqa: E501
          """DemandAllOf - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
***************
*** 103,123 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 98,120 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_market/models/demand_offer_base.py src/ya_market/models/demand_offer_base.py
*** target/ya_market/models/demand_offer_base.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/models/demand_offer_base.py	2020-07-21 16:04:50.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_market.configuration import Configuration
  
--- 13,18 ----
***************
*** 32,48 ****
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {
!         'properties': 'object',
!         'constraints': 'str'
!     }
! 
!     attribute_map = {
!         'properties': 'properties',
!         'constraints': 'constraints'
!     }
  
!     def __init__(self, properties=None, constraints=None, local_vars_configuration=None):  # noqa: E501
          """DemandOfferBase - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
--- 31,43 ----
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {"properties": "object", "constraints": "str"}
  
!     attribute_map = {"properties": "properties", "constraints": "constraints"}
! 
!     def __init__(
!         self, properties=None, constraints=None, local_vars_configuration=None
!     ):  # noqa: E501
          """DemandOfferBase - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
***************
*** 73,80 ****
          :param properties: The properties of this DemandOfferBase.  # noqa: E501
          :type: object
          """
!         if self.local_vars_configuration.client_side_validation and properties is None:  # noqa: E501
!             raise ValueError("Invalid value for `properties`, must not be `None`")  # noqa: E501
  
          self._properties = properties
  
--- 68,79 ----
          :param properties: The properties of this DemandOfferBase.  # noqa: E501
          :type: object
          """
!         if (
!             self.local_vars_configuration.client_side_validation and properties is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `properties`, must not be `None`"
!             )  # noqa: E501
  
          self._properties = properties
  
***************
*** 96,103 ****
          :param constraints: The constraints of this DemandOfferBase.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and constraints is None:  # noqa: E501
!             raise ValueError("Invalid value for `constraints`, must not be `None`")  # noqa: E501
  
          self._constraints = constraints
  
--- 95,106 ----
          :param constraints: The constraints of this DemandOfferBase.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation and constraints is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `constraints`, must not be `None`"
!             )  # noqa: E501
  
          self._constraints = constraints
  
***************
*** 105,125 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 108,130 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_market/models/error_message.py src/ya_market/models/error_message.py
*** target/ya_market/models/error_message.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/models/error_message.py	2020-07-21 16:04:50.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_market.configuration import Configuration
  
--- 13,18 ----
***************
*** 32,44 ****
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {
!         'message': 'str'
!     }
! 
!     attribute_map = {
!         'message': 'message'
!     }
  
      def __init__(self, message=None, local_vars_configuration=None):  # noqa: E501
          """ErrorMessage - a model defined in OpenAPI"""  # noqa: E501
--- 31,39 ----
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {"message": "str"}
! 
!     attribute_map = {"message": "message"}
  
      def __init__(self, message=None, local_vars_configuration=None):  # noqa: E501
          """ErrorMessage - a model defined in OpenAPI"""  # noqa: E501
***************
*** 77,97 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 72,94 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_market/models/event.py src/ya_market/models/event.py
*** target/ya_market/models/event.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/models/event.py	2020-07-21 16:04:50.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_market.configuration import Configuration
  
--- 13,18 ----
***************
*** 32,54 ****
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {
!         'event_type': 'str',
!         'event_date': 'datetime'
!     }
  
!     attribute_map = {
!         'event_type': 'eventType',
!         'event_date': 'eventDate'
!     }
  
      discriminator_value_class_map = {
!         'AgreementEvent': 'AgreementEvent',
!         'PropertyQueryEvent': 'PropertyQueryEvent',
!         'ProposalEvent': 'ProposalEvent'
      }
  
!     def __init__(self, event_type=None, event_date=None, local_vars_configuration=None):  # noqa: E501
          """Event - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
--- 31,49 ----
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {"event_type": "str", "event_date": "datetime"}
  
!     attribute_map = {"event_type": "eventType", "event_date": "eventDate"}
  
      discriminator_value_class_map = {
!         "AgreementEvent": "AgreementEvent",
!         "PropertyQueryEvent": "PropertyQueryEvent",
!         "ProposalEvent": "ProposalEvent",
      }
  
!     def __init__(
!         self, event_type=None, event_date=None, local_vars_configuration=None
!     ):  # noqa: E501
          """Event - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
***************
*** 56,62 ****
  
          self._event_type = None
          self._event_date = None
!         self.discriminator = 'event_type'
  
          self.event_type = event_type
          self.event_date = event_date
--- 51,57 ----
  
          self._event_type = None
          self._event_date = None
!         self.discriminator = "event_type"
  
          self.event_type = event_type
          self.event_date = event_date
***************
*** 79,86 ****
          :param event_type: The event_type of this Event.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and event_type is None:  # noqa: E501
!             raise ValueError("Invalid value for `event_type`, must not be `None`")  # noqa: E501
  
          self._event_type = event_type
  
--- 74,85 ----
          :param event_type: The event_type of this Event.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation and event_type is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `event_type`, must not be `None`"
!             )  # noqa: E501
  
          self._event_type = event_type
  
***************
*** 102,109 ****
          :param event_date: The event_date of this Event.  # noqa: E501
          :type: datetime
          """
!         if self.local_vars_configuration.client_side_validation and event_date is None:  # noqa: E501
!             raise ValueError("Invalid value for `event_date`, must not be `None`")  # noqa: E501
  
          self._event_date = event_date
  
--- 101,112 ----
          :param event_date: The event_date of this Event.  # noqa: E501
          :type: datetime
          """
!         if (
!             self.local_vars_configuration.client_side_validation and event_date is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `event_date`, must not be `None`"
!             )  # noqa: E501
  
          self._event_date = event_date
  
***************
*** 117,137 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 120,142 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_market/models/offer.py src/ya_market/models/offer.py
*** target/ya_market/models/offer.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/models/offer.py	2020-07-21 16:04:50.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_market.configuration import Configuration
  
--- 13,18 ----
***************
*** 33,52 ****
                              and the value is json key in definition.
      """
      openapi_types = {
!         'properties': 'object',
!         'constraints': 'str',
!         'offer_id': 'str',
!         'provider_id': 'str'
      }
  
      attribute_map = {
!         'properties': 'properties',
!         'constraints': 'constraints',
!         'offer_id': 'offerId',
!         'provider_id': 'providerId'
      }
  
!     def __init__(self, properties=None, constraints=None, offer_id=None, provider_id=None, local_vars_configuration=None):  # noqa: E501
          """Offer - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
--- 32,58 ----
                              and the value is json key in definition.
      """
      openapi_types = {
!         "properties": "object",
!         "constraints": "str",
!         "offer_id": "str",
!         "provider_id": "str",
      }
  
      attribute_map = {
!         "properties": "properties",
!         "constraints": "constraints",
!         "offer_id": "offerId",
!         "provider_id": "providerId",
      }
  
!     def __init__(
!         self,
!         properties=None,
!         constraints=None,
!         offer_id=None,
!         provider_id=None,
!         local_vars_configuration=None,
!     ):  # noqa: E501
          """Offer - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
***************
*** 83,90 ****
          :param properties: The properties of this Offer.  # noqa: E501
          :type: object
          """
!         if self.local_vars_configuration.client_side_validation and properties is None:  # noqa: E501
!             raise ValueError("Invalid value for `properties`, must not be `None`")  # noqa: E501
  
          self._properties = properties
  
--- 89,100 ----
          :param properties: The properties of this Offer.  # noqa: E501
          :type: object
          """
!         if (
!             self.local_vars_configuration.client_side_validation and properties is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `properties`, must not be `None`"
!             )  # noqa: E501
  
          self._properties = properties
  
***************
*** 106,113 ****
          :param constraints: The constraints of this Offer.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and constraints is None:  # noqa: E501
!             raise ValueError("Invalid value for `constraints`, must not be `None`")  # noqa: E501
  
          self._constraints = constraints
  
--- 116,127 ----
          :param constraints: The constraints of this Offer.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation and constraints is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `constraints`, must not be `None`"
!             )  # noqa: E501
  
          self._constraints = constraints
  
***************
*** 157,177 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 171,193 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_market/models/offer_all_of.py src/ya_market/models/offer_all_of.py
*** target/ya_market/models/offer_all_of.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/models/offer_all_of.py	2020-07-21 16:04:50.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_market.configuration import Configuration
  
--- 13,18 ----
***************
*** 32,48 ****
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {
!         'offer_id': 'str',
!         'provider_id': 'str'
!     }
! 
!     attribute_map = {
!         'offer_id': 'offerId',
!         'provider_id': 'providerId'
!     }
  
!     def __init__(self, offer_id=None, provider_id=None, local_vars_configuration=None):  # noqa: E501
          """OfferAllOf - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
--- 31,43 ----
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {"offer_id": "str", "provider_id": "str"}
  
!     attribute_map = {"offer_id": "offerId", "provider_id": "providerId"}
! 
!     def __init__(
!         self, offer_id=None, provider_id=None, local_vars_configuration=None
!     ):  # noqa: E501
          """OfferAllOf - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
***************
*** 103,123 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 98,120 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_market/models/property_query.py src/ya_market/models/property_query.py
*** target/ya_market/models/property_query.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/models/property_query.py	2020-07-21 16:04:50.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_market.configuration import Configuration
  
--- 13,18 ----
***************
*** 33,50 ****
                              and the value is json key in definition.
      """
      openapi_types = {
!         'issuer_properties': 'object',
!         'query_id': 'str',
!         'queried_properties': 'list[str]'
      }
  
      attribute_map = {
!         'issuer_properties': 'issuerProperties',
!         'query_id': 'queryId',
!         'queried_properties': 'queriedProperties'
      }
  
!     def __init__(self, issuer_properties=None, query_id=None, queried_properties=None, local_vars_configuration=None):  # noqa: E501
          """PropertyQuery - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
--- 32,55 ----
                              and the value is json key in definition.
      """
      openapi_types = {
!         "issuer_properties": "object",
!         "query_id": "str",
!         "queried_properties": "list[str]",
      }
  
      attribute_map = {
!         "issuer_properties": "issuerProperties",
!         "query_id": "queryId",
!         "queried_properties": "queriedProperties",
      }
  
!     def __init__(
!         self,
!         issuer_properties=None,
!         query_id=None,
!         queried_properties=None,
!         local_vars_configuration=None,
!     ):  # noqa: E501
          """PropertyQuery - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
***************
*** 129,149 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 134,156 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_market/models/property_query_event.py src/ya_market/models/property_query_event.py
*** target/ya_market/models/property_query_event.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/models/property_query_event.py	2020-07-21 16:04:50.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_market.configuration import Configuration
  
--- 13,18 ----
***************
*** 32,46 ****
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {
!         'property_query': 'PropertyQuery'
!     }
! 
!     attribute_map = {
!         'property_query': 'propertyQuery'
!     }
  
!     def __init__(self, property_query=None, local_vars_configuration=None):  # noqa: E501
          """PropertyQueryEvent - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
--- 31,43 ----
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {"property_query": "PropertyQuery"}
  
!     attribute_map = {"property_query": "propertyQuery"}
! 
!     def __init__(
!         self, property_query=None, local_vars_configuration=None
!     ):  # noqa: E501
          """PropertyQueryEvent - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
***************
*** 77,97 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 74,96 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_market/models/property_query_event_all_of.py src/ya_market/models/property_query_event_all_of.py
*** target/ya_market/models/property_query_event_all_of.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/models/property_query_event_all_of.py	2020-07-21 16:04:50.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_market.configuration import Configuration
  
--- 13,18 ----
***************
*** 32,46 ****
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {
!         'property_query': 'PropertyQuery'
!     }
! 
!     attribute_map = {
!         'property_query': 'propertyQuery'
!     }
  
!     def __init__(self, property_query=None, local_vars_configuration=None):  # noqa: E501
          """PropertyQueryEventAllOf - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
--- 31,43 ----
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {"property_query": "PropertyQuery"}
  
!     attribute_map = {"property_query": "propertyQuery"}
! 
!     def __init__(
!         self, property_query=None, local_vars_configuration=None
!     ):  # noqa: E501
          """PropertyQueryEventAllOf - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
***************
*** 77,97 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 74,96 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_market/models/proposal.py src/ya_market/models/proposal.py
*** target/ya_market/models/proposal.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/models/proposal.py	2020-07-21 16:04:50.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_market.configuration import Configuration
  
--- 13,18 ----
***************
*** 33,56 ****
                              and the value is json key in definition.
      """
      openapi_types = {
!         'properties': 'object',
!         'constraints': 'str',
!         'proposal_id': 'str',
!         'issuer_id': 'str',
!         'state': 'str',
!         'prev_proposal_id': 'str'
      }
  
      attribute_map = {
!         'properties': 'properties',
!         'constraints': 'constraints',
!         'proposal_id': 'proposalId',
!         'issuer_id': 'issuerId',
!         'state': 'state',
!         'prev_proposal_id': 'prevProposalId'
      }
  
!     def __init__(self, properties=None, constraints=None, proposal_id=None, issuer_id=None, state=None, prev_proposal_id=None, local_vars_configuration=None):  # noqa: E501
          """Proposal - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
--- 32,64 ----
                              and the value is json key in definition.
      """
      openapi_types = {
!         "properties": "object",
!         "constraints": "str",
!         "proposal_id": "str",
!         "issuer_id": "str",
!         "state": "str",
!         "prev_proposal_id": "str",
      }
  
      attribute_map = {
!         "properties": "properties",
!         "constraints": "constraints",
!         "proposal_id": "proposalId",
!         "issuer_id": "issuerId",
!         "state": "state",
!         "prev_proposal_id": "prevProposalId",
      }
  
!     def __init__(
!         self,
!         properties=None,
!         constraints=None,
!         proposal_id=None,
!         issuer_id=None,
!         state=None,
!         prev_proposal_id=None,
!         local_vars_configuration=None,
!     ):  # noqa: E501
          """Proposal - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
***************
*** 93,100 ****
          :param properties: The properties of this Proposal.  # noqa: E501
          :type: object
          """
!         if self.local_vars_configuration.client_side_validation and properties is None:  # noqa: E501
!             raise ValueError("Invalid value for `properties`, must not be `None`")  # noqa: E501
  
          self._properties = properties
  
--- 101,112 ----
          :param properties: The properties of this Proposal.  # noqa: E501
          :type: object
          """
!         if (
!             self.local_vars_configuration.client_side_validation and properties is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `properties`, must not be `None`"
!             )  # noqa: E501
  
          self._properties = properties
  
***************
*** 116,123 ****
          :param constraints: The constraints of this Proposal.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and constraints is None:  # noqa: E501
!             raise ValueError("Invalid value for `constraints`, must not be `None`")  # noqa: E501
  
          self._constraints = constraints
  
--- 128,139 ----
          :param constraints: The constraints of this Proposal.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation and constraints is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `constraints`, must not be `None`"
!             )  # noqa: E501
  
          self._constraints = constraints
  
***************
*** 183,193 ****
          :param state: The state of this Proposal.  # noqa: E501
          :type: str
          """
!         allowed_values = ["Initial", "Draft", "Rejected", "Accepted", "Expired"]  # noqa: E501
!         if self.local_vars_configuration.client_side_validation and state not in allowed_values:  # noqa: E501
              raise ValueError(
!                 "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
!                 .format(state, allowed_values)
              )
  
          self._state = state
--- 199,219 ----
          :param state: The state of this Proposal.  # noqa: E501
          :type: str
          """
!         allowed_values = [
!             "Initial",
!             "Draft",
!             "Rejected",
!             "Accepted",
!             "Expired",
!         ]  # noqa: E501
!         if (
!             self.local_vars_configuration.client_side_validation
!             and state not in allowed_values
!         ):  # noqa: E501
              raise ValueError(
!                 "Invalid value for `state` ({0}), must be one of {1}".format(  # noqa: E501
!                     state, allowed_values
!                 )
              )
  
          self._state = state
***************
*** 219,239 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 245,267 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_market/models/proposal_all_of.py src/ya_market/models/proposal_all_of.py
*** target/ya_market/models/proposal_all_of.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/models/proposal_all_of.py	2020-07-21 16:04:50.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_market.configuration import Configuration
  
--- 13,18 ----
***************
*** 33,52 ****
                              and the value is json key in definition.
      """
      openapi_types = {
!         'proposal_id': 'str',
!         'issuer_id': 'str',
!         'state': 'str',
!         'prev_proposal_id': 'str'
      }
  
      attribute_map = {
!         'proposal_id': 'proposalId',
!         'issuer_id': 'issuerId',
!         'state': 'state',
!         'prev_proposal_id': 'prevProposalId'
      }
  
!     def __init__(self, proposal_id=None, issuer_id=None, state=None, prev_proposal_id=None, local_vars_configuration=None):  # noqa: E501
          """ProposalAllOf - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
--- 32,58 ----
                              and the value is json key in definition.
      """
      openapi_types = {
!         "proposal_id": "str",
!         "issuer_id": "str",
!         "state": "str",
!         "prev_proposal_id": "str",
      }
  
      attribute_map = {
!         "proposal_id": "proposalId",
!         "issuer_id": "issuerId",
!         "state": "state",
!         "prev_proposal_id": "prevProposalId",
      }
  
!     def __init__(
!         self,
!         proposal_id=None,
!         issuer_id=None,
!         state=None,
!         prev_proposal_id=None,
!         local_vars_configuration=None,
!     ):  # noqa: E501
          """ProposalAllOf - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
***************
*** 129,139 ****
          :param state: The state of this ProposalAllOf.  # noqa: E501
          :type: str
          """
!         allowed_values = ["Initial", "Draft", "Rejected", "Accepted", "Expired"]  # noqa: E501
!         if self.local_vars_configuration.client_side_validation and state not in allowed_values:  # noqa: E501
              raise ValueError(
!                 "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
!                 .format(state, allowed_values)
              )
  
          self._state = state
--- 135,155 ----
          :param state: The state of this ProposalAllOf.  # noqa: E501
          :type: str
          """
!         allowed_values = [
!             "Initial",
!             "Draft",
!             "Rejected",
!             "Accepted",
!             "Expired",
!         ]  # noqa: E501
!         if (
!             self.local_vars_configuration.client_side_validation
!             and state not in allowed_values
!         ):  # noqa: E501
              raise ValueError(
!                 "Invalid value for `state` ({0}), must be one of {1}".format(  # noqa: E501
!                     state, allowed_values
!                 )
              )
  
          self._state = state
***************
*** 165,185 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 181,203 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_market/models/proposal_event.py src/ya_market/models/proposal_event.py
*** target/ya_market/models/proposal_event.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/models/proposal_event.py	2020-07-21 16:04:50.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_market.configuration import Configuration
  
--- 13,18 ----
***************
*** 32,44 ****
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {
!         'proposal': 'Proposal'
!     }
! 
!     attribute_map = {
!         'proposal': 'proposal'
!     }
  
      def __init__(self, proposal=None, local_vars_configuration=None):  # noqa: E501
          """ProposalEvent - a model defined in OpenAPI"""  # noqa: E501
--- 31,39 ----
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {"proposal": "Proposal"}
! 
!     attribute_map = {"proposal": "proposal"}
  
      def __init__(self, proposal=None, local_vars_configuration=None):  # noqa: E501
          """ProposalEvent - a model defined in OpenAPI"""  # noqa: E501
***************
*** 77,97 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 72,94 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_market/models/proposal_event_all_of.py src/ya_market/models/proposal_event_all_of.py
*** target/ya_market/models/proposal_event_all_of.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/models/proposal_event_all_of.py	2020-07-21 16:04:50.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_market.configuration import Configuration
  
--- 13,18 ----
***************
*** 32,44 ****
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {
!         'proposal': 'Proposal'
!     }
! 
!     attribute_map = {
!         'proposal': 'proposal'
!     }
  
      def __init__(self, proposal=None, local_vars_configuration=None):  # noqa: E501
          """ProposalEventAllOf - a model defined in OpenAPI"""  # noqa: E501
--- 31,39 ----
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {"proposal": "Proposal"}
! 
!     attribute_map = {"proposal": "proposal"}
  
      def __init__(self, proposal=None, local_vars_configuration=None):  # noqa: E501
          """ProposalEventAllOf - a model defined in OpenAPI"""  # noqa: E501
***************
*** 77,97 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 72,94 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_market/rest.py src/ya_market/rest.py
*** target/ya_market/rest.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/rest.py	2020-07-21 16:04:51.000000000 +0200
***************
*** 25,31 ****
  
  
  class RESTResponse(io.IOBase):
- 
      def __init__(self, resp, data):
          self.aiohttp_response = resp
          self.status = resp.status
--- 25,30 ----
***************
*** 42,48 ****
  
  
  class RESTClientObject(object):
- 
      def __init__(self, configuration, pools_size=4, maxsize=None):
  
          # maxsize is number of requests to host that are allowed in parallel
--- 41,46 ----
***************
*** 54,59 ****
--- 52,58 ----
              ca_certs = configuration.ssl_ca_cert
          else:
              import certifi
+ 
              # if not set certificate file, use Mozilla's root certificates.
              ca_certs = certifi.where()
  
***************
*** 67,91 ****
              ssl_context.check_hostname = False
              ssl_context.verify_mode = ssl.CERT_NONE
  
!         connector = aiohttp.TCPConnector(
!             limit=maxsize,
!             ssl=ssl_context
!         )
  
          self.proxy = configuration.proxy
          self.proxy_headers = configuration.proxy_headers
  
          # https pool manager
!         self.pool_manager = aiohttp.ClientSession(
!             connector=connector
!         )
  
      async def close(self):
          await self.pool_manager.close()
  
!     async def request(self, method, url, query_params=None, headers=None,
!                       body=None, post_params=None, _preload_content=True,
!                       _request_timeout=None):
          """Execute request
  
          :param method: http request method
--- 66,93 ----
              ssl_context.check_hostname = False
              ssl_context.verify_mode = ssl.CERT_NONE
  
!         connector = aiohttp.TCPConnector(limit=maxsize, ssl=ssl_context)
  
          self.proxy = configuration.proxy
          self.proxy_headers = configuration.proxy_headers
  
          # https pool manager
!         self.pool_manager = aiohttp.ClientSession(connector=connector)
  
      async def close(self):
          await self.pool_manager.close()
  
!     async def request(
!         self,
!         method,
!         url,
!         query_params=None,
!         headers=None,
!         body=None,
!         post_params=None,
!         _preload_content=True,
!         _request_timeout=None,
!     ):
          """Execute request
  
          :param method: http request method
***************
*** 104,111 ****
                                   (connection, read) timeouts.
          """
          method = method.upper()
!         assert method in ['GET', 'HEAD', 'DELETE', 'POST', 'PUT',
!                           'PATCH', 'OPTIONS']
  
          if post_params and body:
              raise ApiValueError(
--- 106,112 ----
                                   (connection, read) timeouts.
          """
          method = method.upper()
!         assert method in ["GET", "HEAD", "DELETE", "POST", "PUT", "PATCH", "OPTIONS"]
  
          if post_params and body:
              raise ApiValueError(
***************
*** 116,130 ****
          headers = headers or {}
          timeout = _request_timeout or 5 * 60
  
!         if 'Content-Type' not in headers:
!             headers['Content-Type'] = 'application/json'
  
!         args = {
!             "method": method,
!             "url": url,
!             "timeout": timeout,
!             "headers": headers
!         }
  
          if self.proxy:
              args["proxy"] = self.proxy
--- 117,126 ----
          headers = headers or {}
          timeout = _request_timeout or 5 * 60
  
!         if "Content-Type" not in headers:
!             headers["Content-Type"] = "application/json"
  
!         args = {"method": method, "url": url, "timeout": timeout, "headers": headers}
  
          if self.proxy:
              args["proxy"] = self.proxy
***************
*** 132,159 ****
              args["proxy_headers"] = self.proxy_headers
  
          if query_params:
!             args["url"] += '?' + urlencode(query_params)
  
          # For `POST`, `PUT`, `PATCH`, `OPTIONS`, `DELETE`
!         if method in ['POST', 'PUT', 'PATCH', 'OPTIONS', 'DELETE']:
!             if re.search('json', headers['Content-Type'], re.IGNORECASE):
                  if body is not None:
                      body = json.dumps(body)
                  args["data"] = body
!             elif headers['Content-Type'] == 'application/x-www-form-urlencoded':  # noqa: E501
                  args["data"] = aiohttp.FormData(post_params)
!             elif headers['Content-Type'] == 'multipart/form-data':
                  # must del headers['Content-Type'], or the correct
                  # Content-Type which generated by aiohttp
!                 del headers['Content-Type']
                  data = aiohttp.FormData()
                  for param in post_params:
                      k, v = param
                      if isinstance(v, tuple) and len(v) == 3:
!                         data.add_field(k,
!                                        value=v[1],
!                                        filename=v[0],
!                                        content_type=v[2])
                      else:
                          data.add_field(k, v)
                  args["data"] = data
--- 128,154 ----
              args["proxy_headers"] = self.proxy_headers
  
          if query_params:
!             args["url"] += "?" + urlencode(query_params)
  
          # For `POST`, `PUT`, `PATCH`, `OPTIONS`, `DELETE`
!         if method in ["POST", "PUT", "PATCH", "OPTIONS", "DELETE"]:
!             if re.search("json", headers["Content-Type"], re.IGNORECASE):
                  if body is not None:
                      body = json.dumps(body)
                  args["data"] = body
!             elif (
!                 headers["Content-Type"] == "application/x-www-form-urlencoded"
!             ):  # noqa: E501
                  args["data"] = aiohttp.FormData(post_params)
!             elif headers["Content-Type"] == "multipart/form-data":
                  # must del headers['Content-Type'], or the correct
                  # Content-Type which generated by aiohttp
!                 del headers["Content-Type"]
                  data = aiohttp.FormData()
                  for param in post_params:
                      k, v = param
                      if isinstance(v, tuple) and len(v) == 3:
!                         data.add_field(k, value=v[1], filename=v[0], content_type=v[2])
                      else:
                          data.add_field(k, v)
                  args["data"] = data
***************
*** 184,253 ****
  
          return r
  
!     async def GET(self, url, headers=None, query_params=None,
!                   _preload_content=True, _request_timeout=None):
!         return (await self.request("GET", url,
!                                    headers=headers,
!                                    _preload_content=_preload_content,
!                                    _request_timeout=_request_timeout,
!                                    query_params=query_params))
! 
!     async def HEAD(self, url, headers=None, query_params=None,
!                    _preload_content=True, _request_timeout=None):
!         return (await self.request("HEAD", url,
!                                    headers=headers,
!                                    _preload_content=_preload_content,
!                                    _request_timeout=_request_timeout,
!                                    query_params=query_params))
! 
!     async def OPTIONS(self, url, headers=None, query_params=None,
!                       post_params=None, body=None, _preload_content=True,
!                       _request_timeout=None):
!         return (await self.request("OPTIONS", url,
!                                    headers=headers,
!                                    query_params=query_params,
!                                    post_params=post_params,
!                                    _preload_content=_preload_content,
!                                    _request_timeout=_request_timeout,
!                                    body=body))
! 
!     async def DELETE(self, url, headers=None, query_params=None, body=None,
!                      _preload_content=True, _request_timeout=None):
!         return (await self.request("DELETE", url,
!                                    headers=headers,
!                                    query_params=query_params,
!                                    _preload_content=_preload_content,
!                                    _request_timeout=_request_timeout,
!                                    body=body))
! 
!     async def POST(self, url, headers=None, query_params=None,
!                    post_params=None, body=None, _preload_content=True,
!                    _request_timeout=None):
!         return (await self.request("POST", url,
!                                    headers=headers,
!                                    query_params=query_params,
!                                    post_params=post_params,
!                                    _preload_content=_preload_content,
!                                    _request_timeout=_request_timeout,
!                                    body=body))
! 
!     async def PUT(self, url, headers=None, query_params=None, post_params=None,
!                   body=None, _preload_content=True, _request_timeout=None):
!         return (await self.request("PUT", url,
!                                    headers=headers,
!                                    query_params=query_params,
!                                    post_params=post_params,
!                                    _preload_content=_preload_content,
!                                    _request_timeout=_request_timeout,
!                                    body=body))
! 
!     async def PATCH(self, url, headers=None, query_params=None,
!                     post_params=None, body=None, _preload_content=True,
!                     _request_timeout=None):
!         return (await self.request("PATCH", url,
!                                    headers=headers,
!                                    query_params=query_params,
!                                    post_params=post_params,
!                                    _preload_content=_preload_content,
!                                    _request_timeout=_request_timeout,
!                                    body=body))
--- 179,317 ----
  
          return r
  
!     async def GET(
!         self,
!         url,
!         headers=None,
!         query_params=None,
!         _preload_content=True,
!         _request_timeout=None,
!     ):
!         return await self.request(
!             "GET",
!             url,
!             headers=headers,
!             _preload_content=_preload_content,
!             _request_timeout=_request_timeout,
!             query_params=query_params,
!         )
! 
!     async def HEAD(
!         self,
!         url,
!         headers=None,
!         query_params=None,
!         _preload_content=True,
!         _request_timeout=None,
!     ):
!         return await self.request(
!             "HEAD",
!             url,
!             headers=headers,
!             _preload_content=_preload_content,
!             _request_timeout=_request_timeout,
!             query_params=query_params,
!         )
! 
!     async def OPTIONS(
!         self,
!         url,
!         headers=None,
!         query_params=None,
!         post_params=None,
!         body=None,
!         _preload_content=True,
!         _request_timeout=None,
!     ):
!         return await self.request(
!             "OPTIONS",
!             url,
!             headers=headers,
!             query_params=query_params,
!             post_params=post_params,
!             _preload_content=_preload_content,
!             _request_timeout=_request_timeout,
!             body=body,
!         )
! 
!     async def DELETE(
!         self,
!         url,
!         headers=None,
!         query_params=None,
!         body=None,
!         _preload_content=True,
!         _request_timeout=None,
!     ):
!         return await self.request(
!             "DELETE",
!             url,
!             headers=headers,
!             query_params=query_params,
!             _preload_content=_preload_content,
!             _request_timeout=_request_timeout,
!             body=body,
!         )
! 
!     async def POST(
!         self,
!         url,
!         headers=None,
!         query_params=None,
!         post_params=None,
!         body=None,
!         _preload_content=True,
!         _request_timeout=None,
!     ):
!         return await self.request(
!             "POST",
!             url,
!             headers=headers,
!             query_params=query_params,
!             post_params=post_params,
!             _preload_content=_preload_content,
!             _request_timeout=_request_timeout,
!             body=body,
!         )
! 
!     async def PUT(
!         self,
!         url,
!         headers=None,
!         query_params=None,
!         post_params=None,
!         body=None,
!         _preload_content=True,
!         _request_timeout=None,
!     ):
!         return await self.request(
!             "PUT",
!             url,
!             headers=headers,
!             query_params=query_params,
!             post_params=post_params,
!             _preload_content=_preload_content,
!             _request_timeout=_request_timeout,
!             body=body,
!         )
! 
!     async def PATCH(
!         self,
!         url,
!         headers=None,
!         query_params=None,
!         post_params=None,
!         body=None,
!         _preload_content=True,
!         _request_timeout=None,
!     ):
!         return await self.request(
!             "PATCH",
!             url,
!             headers=headers,
!             query_params=query_params,
!             post_params=post_params,
!             _preload_content=_preload_content,
!             _request_timeout=_request_timeout,
!             body=body,
!         )
diff -r -c target/ya_market/test/test_agreement.py src/ya_market/test/test_agreement.py
*** target/ya_market/test/test_agreement.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/test/test_agreement.py	2020-07-21 16:04:51.000000000 +0200
***************
*** 9,17 ****
      Generated by: https://openapi-generator.tech
  """
  
- 
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 9,14 ----
***************
*** 19,24 ****
--- 16,22 ----
  from ya_market.models.agreement import Agreement  # noqa: E501
  from ya_market.rest import ApiException
  
+ 
  class TestAgreement(unittest.TestCase):
      """Agreement unit test stubs"""
  
***************
*** 34,59 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_market.models.agreement.Agreement()  # noqa: E501
!         if include_optional :
              return Agreement(
!                 agreement_id = '0', 
!                 demand = null, 
!                 offer = null, 
!                 valid_to = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
!                 approved_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
!                 state = 'Proposal', 
!                 proposed_signature = '0', 
!                 approved_signature = '0', 
!                 committed_signature = '0'
              )
!         else :
              return Agreement(
!                 agreement_id = '0',
!                 demand = null,
!                 offer = null,
!                 valid_to = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
!                 state = 'Proposal',
!         )
  
      def testAgreement(self):
          """Test Agreement"""
--- 32,63 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_market.models.agreement.Agreement()  # noqa: E501
!         if include_optional:
              return Agreement(
!                 agreement_id="0",
!                 demand=None,
!                 offer=None,
!                 valid_to=datetime.datetime.strptime(
!                     "2013-10-20 19:20:30.00", "%Y-%m-%d %H:%M:%S.%f"
!                 ),
!                 approved_date=datetime.datetime.strptime(
!                     "2013-10-20 19:20:30.00", "%Y-%m-%d %H:%M:%S.%f"
!                 ),
!                 state="Proposal",
!                 proposed_signature="0",
!                 approved_signature="0",
!                 committed_signature="0",
              )
!         else:
              return Agreement(
!                 agreement_id="0",
!                 demand=None,
!                 offer=None,
!                 valid_to=datetime.datetime.strptime(
!                     "2013-10-20 19:20:30.00", "%Y-%m-%d %H:%M:%S.%f"
!                 ),
!                 state="Proposal",
!             )
  
      def testAgreement(self):
          """Test Agreement"""
***************
*** 61,65 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 65,69 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_market/test/test_agreement_event.py src/ya_market/test/test_agreement_event.py
*** target/ya_market/test/test_agreement_event.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/test/test_agreement_event.py	2020-07-21 16:04:51.000000000 +0200
***************
*** 9,17 ****
      Generated by: https://openapi-generator.tech
  """
  
- 
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 9,14 ----
***************
*** 19,24 ****
--- 16,22 ----
  from ya_market.models.agreement_event import AgreementEvent  # noqa: E501
  from ya_market.rest import ApiException
  
+ 
  class TestAgreementEvent(unittest.TestCase):
      """AgreementEvent unit test stubs"""
  
***************
*** 34,55 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_market.models.agreement_event.AgreementEvent()  # noqa: E501
!         if include_optional :
              return AgreementEvent(
!                 agreement = ya_market.models.agreement.Agreement(
!                     agreement_id = '0', 
!                     demand = null, 
!                     offer = null, 
!                     valid_to = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
!                     approved_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
!                     state = 'Proposal', 
!                     proposed_signature = '0', 
!                     approved_signature = '0', 
!                     committed_signature = '0', )
              )
!         else :
!             return AgreementEvent(
!         )
  
      def testAgreementEvent(self):
          """Test AgreementEvent"""
--- 32,57 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_market.models.agreement_event.AgreementEvent()  # noqa: E501
!         if include_optional:
              return AgreementEvent(
!                 agreement=ya_market.models.agreement.Agreement(
!                     agreement_id="0",
!                     demand=None,
!                     offer=None,
!                     valid_to=datetime.datetime.strptime(
!                         "2013-10-20 19:20:30.00", "%Y-%m-%d %H:%M:%S.%f"
!                     ),
!                     approved_date=datetime.datetime.strptime(
!                         "2013-10-20 19:20:30.00", "%Y-%m-%d %H:%M:%S.%f"
!                     ),
!                     state="Proposal",
!                     proposed_signature="0",
!                     approved_signature="0",
!                     committed_signature="0",
!                 )
              )
!         else:
!             return AgreementEvent()
  
      def testAgreementEvent(self):
          """Test AgreementEvent"""
***************
*** 57,61 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 59,63 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_market/test/test_agreement_event_all_of.py src/ya_market/test/test_agreement_event_all_of.py
*** target/ya_market/test/test_agreement_event_all_of.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/test/test_agreement_event_all_of.py	2020-07-21 16:04:51.000000000 +0200
***************
*** 9,17 ****
      Generated by: https://openapi-generator.tech
  """
  
- 
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 9,14 ----
***************
*** 19,24 ****
--- 16,22 ----
  from ya_market.models.agreement_event_all_of import AgreementEventAllOf  # noqa: E501
  from ya_market.rest import ApiException
  
+ 
  class TestAgreementEventAllOf(unittest.TestCase):
      """AgreementEventAllOf unit test stubs"""
  
***************
*** 34,55 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_market.models.agreement_event_all_of.AgreementEventAllOf()  # noqa: E501
!         if include_optional :
              return AgreementEventAllOf(
!                 agreement = ya_market.models.agreement.Agreement(
!                     agreement_id = '0', 
!                     demand = null, 
!                     offer = null, 
!                     valid_to = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
!                     approved_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
!                     state = 'Proposal', 
!                     proposed_signature = '0', 
!                     approved_signature = '0', 
!                     committed_signature = '0', )
              )
!         else :
!             return AgreementEventAllOf(
!         )
  
      def testAgreementEventAllOf(self):
          """Test AgreementEventAllOf"""
--- 32,57 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_market.models.agreement_event_all_of.AgreementEventAllOf()  # noqa: E501
!         if include_optional:
              return AgreementEventAllOf(
!                 agreement=ya_market.models.agreement.Agreement(
!                     agreement_id="0",
!                     demand=None,
!                     offer=None,
!                     valid_to=datetime.datetime.strptime(
!                         "2013-10-20 19:20:30.00", "%Y-%m-%d %H:%M:%S.%f"
!                     ),
!                     approved_date=datetime.datetime.strptime(
!                         "2013-10-20 19:20:30.00", "%Y-%m-%d %H:%M:%S.%f"
!                     ),
!                     state="Proposal",
!                     proposed_signature="0",
!                     approved_signature="0",
!                     committed_signature="0",
!                 )
              )
!         else:
!             return AgreementEventAllOf()
  
      def testAgreementEventAllOf(self):
          """Test AgreementEventAllOf"""
***************
*** 57,61 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 59,63 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_market/test/test_agreement_proposal.py src/ya_market/test/test_agreement_proposal.py
*** target/ya_market/test/test_agreement_proposal.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/test/test_agreement_proposal.py	2020-07-21 16:04:51.000000000 +0200
***************
*** 9,17 ****
      Generated by: https://openapi-generator.tech
  """
  
- 
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 9,14 ----
***************
*** 19,24 ****
--- 16,22 ----
  from ya_market.models.agreement_proposal import AgreementProposal  # noqa: E501
  from ya_market.rest import ApiException
  
+ 
  class TestAgreementProposal(unittest.TestCase):
      """AgreementProposal unit test stubs"""
  
***************
*** 34,49 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_market.models.agreement_proposal.AgreementProposal()  # noqa: E501
!         if include_optional :
              return AgreementProposal(
!                 proposal_id = '0', 
!                 valid_to = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
              )
!         else :
              return AgreementProposal(
!                 proposal_id = '0',
!                 valid_to = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
!         )
  
      def testAgreementProposal(self):
          """Test AgreementProposal"""
--- 32,51 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_market.models.agreement_proposal.AgreementProposal()  # noqa: E501
!         if include_optional:
              return AgreementProposal(
!                 proposal_id="0",
!                 valid_to=datetime.datetime.strptime(
!                     "2013-10-20 19:20:30.00", "%Y-%m-%d %H:%M:%S.%f"
!                 ),
              )
!         else:
              return AgreementProposal(
!                 proposal_id="0",
!                 valid_to=datetime.datetime.strptime(
!                     "2013-10-20 19:20:30.00", "%Y-%m-%d %H:%M:%S.%f"
!                 ),
!             )
  
      def testAgreementProposal(self):
          """Test AgreementProposal"""
***************
*** 51,55 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 53,57 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_market/test/test_demand.py src/ya_market/test/test_demand.py
*** target/ya_market/test/test_demand.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/test/test_demand.py	2020-07-21 16:04:51.000000000 +0200
***************
*** 10,17 ****
  """
  
  
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 10,15 ----
***************
*** 19,24 ****
--- 17,23 ----
  from ya_market.models.demand import Demand  # noqa: E501
  from ya_market.rest import ApiException
  
+ 
  class TestDemand(unittest.TestCase):
      """Demand unit test stubs"""
  
***************
*** 34,51 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_market.models.demand.Demand()  # noqa: E501
!         if include_optional :
              return Demand(
!                 properties = None, 
!                 constraints = '0', 
!                 demand_id = '0', 
!                 requestor_id = '0'
              )
!         else :
!             return Demand(
!                 properties = None,
!                 constraints = '0',
!         )
  
      def testDemand(self):
          """Test Demand"""
--- 33,44 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_market.models.demand.Demand()  # noqa: E501
!         if include_optional:
              return Demand(
!                 properties=None, constraints="0", demand_id="0", requestor_id="0"
              )
!         else:
!             return Demand(properties=None, constraints="0",)
  
      def testDemand(self):
          """Test Demand"""
***************
*** 53,57 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 46,50 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_market/test/test_demand_all_of.py src/ya_market/test/test_demand_all_of.py
*** target/ya_market/test/test_demand_all_of.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/test/test_demand_all_of.py	2020-07-21 16:04:51.000000000 +0200
***************
*** 9,17 ****
      Generated by: https://openapi-generator.tech
  """
  
- 
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 9,14 ----
***************
*** 19,24 ****
--- 16,22 ----
  from ya_market.models.demand_all_of import DemandAllOf  # noqa: E501
  from ya_market.rest import ApiException
  
+ 
  class TestDemandAllOf(unittest.TestCase):
      """DemandAllOf unit test stubs"""
  
***************
*** 34,47 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_market.models.demand_all_of.DemandAllOf()  # noqa: E501
!         if include_optional :
!             return DemandAllOf(
!                 demand_id = '0', 
!                 requestor_id = '0'
!             )
!         else :
!             return DemandAllOf(
!         )
  
      def testDemandAllOf(self):
          """Test DemandAllOf"""
--- 32,41 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_market.models.demand_all_of.DemandAllOf()  # noqa: E501
!         if include_optional:
!             return DemandAllOf(demand_id="0", requestor_id="0")
!         else:
!             return DemandAllOf()
  
      def testDemandAllOf(self):
          """Test DemandAllOf"""
***************
*** 49,53 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 43,47 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_market/test/test_demand_offer_base.py src/ya_market/test/test_demand_offer_base.py
*** target/ya_market/test/test_demand_offer_base.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/test/test_demand_offer_base.py	2020-07-21 16:04:51.000000000 +0200
***************
*** 9,17 ****
      Generated by: https://openapi-generator.tech
  """
  
- 
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 9,14 ----
***************
*** 19,24 ****
--- 16,22 ----
  from ya_market.models.demand_offer_base import DemandOfferBase  # noqa: E501
  from ya_market.rest import ApiException
  
+ 
  class TestDemandOfferBase(unittest.TestCase):
      """DemandOfferBase unit test stubs"""
  
***************
*** 34,49 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_market.models.demand_offer_base.DemandOfferBase()  # noqa: E501
!         if include_optional :
!             return DemandOfferBase(
!                 properties = None, 
!                 constraints = '0'
!             )
!         else :
!             return DemandOfferBase(
!                 properties = None,
!                 constraints = '0',
!         )
  
      def testDemandOfferBase(self):
          """Test DemandOfferBase"""
--- 32,41 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_market.models.demand_offer_base.DemandOfferBase()  # noqa: E501
!         if include_optional:
!             return DemandOfferBase(properties=None, constraints="0")
!         else:
!             return DemandOfferBase(properties=None, constraints="0",)
  
      def testDemandOfferBase(self):
          """Test DemandOfferBase"""
***************
*** 51,55 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 43,47 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_market/test/test_error_message.py src/ya_market/test/test_error_message.py
*** target/ya_market/test/test_error_message.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/test/test_error_message.py	2020-07-21 16:04:51.000000000 +0200
***************
*** 10,17 ****
  """
  
  
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 10,15 ----
***************
*** 19,24 ****
--- 17,23 ----
  from ya_market.models.error_message import ErrorMessage  # noqa: E501
  from ya_market.rest import ApiException
  
+ 
  class TestErrorMessage(unittest.TestCase):
      """ErrorMessage unit test stubs"""
  
***************
*** 34,46 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_market.models.error_message.ErrorMessage()  # noqa: E501
!         if include_optional :
!             return ErrorMessage(
!                 message = '0'
!             )
!         else :
!             return ErrorMessage(
!         )
  
      def testErrorMessage(self):
          """Test ErrorMessage"""
--- 33,42 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_market.models.error_message.ErrorMessage()  # noqa: E501
!         if include_optional:
!             return ErrorMessage(message="0")
!         else:
!             return ErrorMessage()
  
      def testErrorMessage(self):
          """Test ErrorMessage"""
***************
*** 48,52 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 44,48 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_market/test/test_event.py src/ya_market/test/test_event.py
*** target/ya_market/test/test_event.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/test/test_event.py	2020-07-21 16:04:51.000000000 +0200
***************
*** 10,17 ****
  """
  
  
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 10,15 ----
***************
*** 19,24 ****
--- 17,23 ----
  from ya_market.models.event import Event  # noqa: E501
  from ya_market.rest import ApiException
  
+ 
  class TestEvent(unittest.TestCase):
      """Event unit test stubs"""
  
***************
*** 34,49 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_market.models.event.Event()  # noqa: E501
!         if include_optional :
              return Event(
!                 event_type = '0', 
!                 event_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
              )
!         else :
              return Event(
!                 event_type = '0',
!                 event_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
!         )
  
      def testEvent(self):
          """Test Event"""
--- 33,52 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_market.models.event.Event()  # noqa: E501
!         if include_optional:
              return Event(
!                 event_type="0",
!                 event_date=datetime.datetime.strptime(
!                     "2013-10-20 19:20:30.00", "%Y-%m-%d %H:%M:%S.%f"
!                 ),
              )
!         else:
              return Event(
!                 event_type="0",
!                 event_date=datetime.datetime.strptime(
!                     "2013-10-20 19:20:30.00", "%Y-%m-%d %H:%M:%S.%f"
!                 ),
!             )
  
      def testEvent(self):
          """Test Event"""
***************
*** 51,55 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 54,58 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_market/test/test_offer.py src/ya_market/test/test_offer.py
*** target/ya_market/test/test_offer.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/test/test_offer.py	2020-07-21 16:04:51.000000000 +0200
***************
*** 10,17 ****
  """
  
  
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 10,15 ----
***************
*** 19,24 ****
--- 17,23 ----
  from ya_market.models.offer import Offer  # noqa: E501
  from ya_market.rest import ApiException
  
+ 
  class TestOffer(unittest.TestCase):
      """Offer unit test stubs"""
  
***************
*** 34,51 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_market.models.offer.Offer()  # noqa: E501
!         if include_optional :
              return Offer(
!                 properties = None, 
!                 constraints = '0', 
!                 offer_id = '0', 
!                 provider_id = '0'
              )
!         else :
!             return Offer(
!                 properties = None,
!                 constraints = '0',
!         )
  
      def testOffer(self):
          """Test Offer"""
--- 33,44 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_market.models.offer.Offer()  # noqa: E501
!         if include_optional:
              return Offer(
!                 properties=None, constraints="0", offer_id="0", provider_id="0"
              )
!         else:
!             return Offer(properties=None, constraints="0",)
  
      def testOffer(self):
          """Test Offer"""
***************
*** 53,57 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 46,50 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_market/test/test_offer_all_of.py src/ya_market/test/test_offer_all_of.py
*** target/ya_market/test/test_offer_all_of.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/test/test_offer_all_of.py	2020-07-21 16:04:51.000000000 +0200
***************
*** 10,17 ****
  """
  
  
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 10,15 ----
***************
*** 19,24 ****
--- 17,23 ----
  from ya_market.models.offer_all_of import OfferAllOf  # noqa: E501
  from ya_market.rest import ApiException
  
+ 
  class TestOfferAllOf(unittest.TestCase):
      """OfferAllOf unit test stubs"""
  
***************
*** 34,47 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_market.models.offer_all_of.OfferAllOf()  # noqa: E501
!         if include_optional :
!             return OfferAllOf(
!                 offer_id = '0', 
!                 provider_id = '0'
!             )
!         else :
!             return OfferAllOf(
!         )
  
      def testOfferAllOf(self):
          """Test OfferAllOf"""
--- 33,42 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_market.models.offer_all_of.OfferAllOf()  # noqa: E501
!         if include_optional:
!             return OfferAllOf(offer_id="0", provider_id="0")
!         else:
!             return OfferAllOf()
  
      def testOfferAllOf(self):
          """Test OfferAllOf"""
***************
*** 49,53 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 44,48 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_market/test/test_property_query.py src/ya_market/test/test_property_query.py
*** target/ya_market/test/test_property_query.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/test/test_property_query.py	2020-07-21 16:04:51.000000000 +0200
***************
*** 10,17 ****
  """
  
  
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 10,15 ----
***************
*** 19,24 ****
--- 17,23 ----
  from ya_market.models.property_query import PropertyQuery  # noqa: E501
  from ya_market.rest import ApiException
  
+ 
  class TestPropertyQuery(unittest.TestCase):
      """PropertyQuery unit test stubs"""
  
***************
*** 34,50 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_market.models.property_query.PropertyQuery()  # noqa: E501
!         if include_optional :
              return PropertyQuery(
!                 issuer_properties = None, 
!                 query_id = '0', 
!                 queried_properties = [
!                     '0'
!                     ]
              )
!         else :
!             return PropertyQuery(
!         )
  
      def testPropertyQuery(self):
          """Test PropertyQuery"""
--- 33,44 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_market.models.property_query.PropertyQuery()  # noqa: E501
!         if include_optional:
              return PropertyQuery(
!                 issuer_properties=None, query_id="0", queried_properties=["0"]
              )
!         else:
!             return PropertyQuery()
  
      def testPropertyQuery(self):
          """Test PropertyQuery"""
***************
*** 52,56 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 46,50 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_market/test/test_property_query_event.py src/ya_market/test/test_property_query_event.py
*** target/ya_market/test/test_property_query_event.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/test/test_property_query_event.py	2020-07-21 16:04:51.000000000 +0200
***************
*** 10,17 ****
  """
  
  
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 10,15 ----
***************
*** 19,24 ****
--- 17,23 ----
  from ya_market.models.property_query_event import PropertyQueryEvent  # noqa: E501
  from ya_market.rest import ApiException
  
+ 
  class TestPropertyQueryEvent(unittest.TestCase):
      """PropertyQueryEvent unit test stubs"""
  
***************
*** 34,51 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_market.models.property_query_event.PropertyQueryEvent()  # noqa: E501
!         if include_optional :
              return PropertyQueryEvent(
!                 property_query = ya_market.models.property_query.PropertyQuery(
!                     issuer_properties = ya_market.models.issuer_properties.issuerProperties(), 
!                     query_id = '0', 
!                     queried_properties = [
!                         '0'
!                         ], )
              )
!         else :
!             return PropertyQueryEvent(
!         )
  
      def testPropertyQueryEvent(self):
          """Test PropertyQueryEvent"""
--- 33,48 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_market.models.property_query_event.PropertyQueryEvent()  # noqa: E501
!         if include_optional:
              return PropertyQueryEvent(
!                 property_query=ya_market.models.property_query.PropertyQuery(
!                     issuer_properties=None,  # ya_market.models.issuer_properties.issuerProperties() is not in model # noqa: E501
!                     query_id="0",
!                     queried_properties=["0"],
!                 )
              )
!         else:
!             return PropertyQueryEvent()
  
      def testPropertyQueryEvent(self):
          """Test PropertyQueryEvent"""
***************
*** 53,57 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 50,54 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_market/test/test_property_query_event_all_of.py src/ya_market/test/test_property_query_event_all_of.py
*** target/ya_market/test/test_property_query_event_all_of.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/test/test_property_query_event_all_of.py	2020-07-21 16:04:51.000000000 +0200
***************
*** 10,24 ****
  """
  
  
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
  import ya_market
! from ya_market.models.property_query_event_all_of import PropertyQueryEventAllOf  # noqa: E501
  from ya_market.rest import ApiException
  
  class TestPropertyQueryEventAllOf(unittest.TestCase):
      """PropertyQueryEventAllOf unit test stubs"""
  
--- 10,25 ----
  """
  
  
  import unittest
  import datetime
  
  import ya_market
! from ya_market.models.property_query_event_all_of import (
!     PropertyQueryEventAllOf,
! )  # noqa: E501
  from ya_market.rest import ApiException
  
+ 
  class TestPropertyQueryEventAllOf(unittest.TestCase):
      """PropertyQueryEventAllOf unit test stubs"""
  
***************
*** 34,51 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_market.models.property_query_event_all_of.PropertyQueryEventAllOf()  # noqa: E501
!         if include_optional :
              return PropertyQueryEventAllOf(
!                 property_query = ya_market.models.property_query.PropertyQuery(
!                     issuer_properties = ya_market.models.issuer_properties.issuerProperties(), 
!                     query_id = '0', 
!                     queried_properties = [
!                         '0'
!                         ], )
              )
!         else :
!             return PropertyQueryEventAllOf(
!         )
  
      def testPropertyQueryEventAllOf(self):
          """Test PropertyQueryEventAllOf"""
--- 35,50 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_market.models.property_query_event_all_of.PropertyQueryEventAllOf()  # noqa: E501
!         if include_optional:
              return PropertyQueryEventAllOf(
!                 property_query=ya_market.models.property_query.PropertyQuery(
!                     issuer_properties=None,  # ya_market.models.issuer_properties.issuerProperties() is not in model # noqa: E501
!                     query_id="0",
!                     queried_properties=["0"],
!                 )
              )
!         else:
!             return PropertyQueryEventAllOf()
  
      def testPropertyQueryEventAllOf(self):
          """Test PropertyQueryEventAllOf"""
***************
*** 53,57 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 52,56 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_market/test/test_proposal.py src/ya_market/test/test_proposal.py
*** target/ya_market/test/test_proposal.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/test/test_proposal.py	2020-07-21 16:04:51.000000000 +0200
***************
*** 10,17 ****
  """
  
  
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 10,15 ----
***************
*** 19,24 ****
--- 17,23 ----
  from ya_market.models.proposal import Proposal  # noqa: E501
  from ya_market.rest import ApiException
  
+ 
  class TestProposal(unittest.TestCase):
      """Proposal unit test stubs"""
  
***************
*** 34,53 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_market.models.proposal.Proposal()  # noqa: E501
!         if include_optional :
              return Proposal(
!                 properties = None, 
!                 constraints = '0', 
!                 proposal_id = '0', 
!                 issuer_id = '0', 
!                 state = 'Initial', 
!                 prev_proposal_id = '0'
              )
!         else :
!             return Proposal(
!                 properties = None,
!                 constraints = '0',
!         )
  
      def testProposal(self):
          """Test Proposal"""
--- 33,49 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_market.models.proposal.Proposal()  # noqa: E501
!         if include_optional:
              return Proposal(
!                 properties=None,
!                 constraints="0",
!                 proposal_id="0",
!                 issuer_id="0",
!                 state="Initial",
!                 prev_proposal_id="0",
              )
!         else:
!             return Proposal(properties=None, constraints="0",)
  
      def testProposal(self):
          """Test Proposal"""
***************
*** 55,59 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 51,55 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_market/test/test_proposal_all_of.py src/ya_market/test/test_proposal_all_of.py
*** target/ya_market/test/test_proposal_all_of.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/test/test_proposal_all_of.py	2020-07-21 16:04:51.000000000 +0200
***************
*** 10,17 ****
  """
  
  
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 10,15 ----
***************
*** 19,24 ****
--- 17,23 ----
  from ya_market.models.proposal_all_of import ProposalAllOf  # noqa: E501
  from ya_market.rest import ApiException
  
+ 
  class TestProposalAllOf(unittest.TestCase):
      """ProposalAllOf unit test stubs"""
  
***************
*** 34,49 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_market.models.proposal_all_of.ProposalAllOf()  # noqa: E501
!         if include_optional :
              return ProposalAllOf(
!                 proposal_id = '0', 
!                 issuer_id = '0', 
!                 state = 'Initial', 
!                 prev_proposal_id = '0'
              )
!         else :
!             return ProposalAllOf(
!         )
  
      def testProposalAllOf(self):
          """Test ProposalAllOf"""
--- 33,44 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_market.models.proposal_all_of.ProposalAllOf()  # noqa: E501
!         if include_optional:
              return ProposalAllOf(
!                 proposal_id="0", issuer_id="0", state="Initial", prev_proposal_id="0"
              )
!         else:
!             return ProposalAllOf()
  
      def testProposalAllOf(self):
          """Test ProposalAllOf"""
***************
*** 51,55 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 46,50 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_market/test/test_proposal_event.py src/ya_market/test/test_proposal_event.py
*** target/ya_market/test/test_proposal_event.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/test/test_proposal_event.py	2020-07-21 16:04:51.000000000 +0200
***************
*** 10,17 ****
  """
  
  
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 10,15 ----
***************
*** 19,24 ****
--- 17,23 ----
  from ya_market.models.proposal_event import ProposalEvent  # noqa: E501
  from ya_market.rest import ApiException
  
+ 
  class TestProposalEvent(unittest.TestCase):
      """ProposalEvent unit test stubs"""
  
***************
*** 34,46 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_market.models.proposal_event.ProposalEvent()  # noqa: E501
!         if include_optional :
!             return ProposalEvent(
!                 proposal = null
!             )
!         else :
!             return ProposalEvent(
!         )
  
      def testProposalEvent(self):
          """Test ProposalEvent"""
--- 33,42 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_market.models.proposal_event.ProposalEvent()  # noqa: E501
!         if include_optional:
!             return ProposalEvent(proposal=None)
!         else:
!             return ProposalEvent()
  
      def testProposalEvent(self):
          """Test ProposalEvent"""
***************
*** 48,52 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 44,48 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_market/test/test_proposal_event_all_of.py src/ya_market/test/test_proposal_event_all_of.py
*** target/ya_market/test/test_proposal_event_all_of.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/test/test_proposal_event_all_of.py	2020-07-21 16:04:51.000000000 +0200
***************
*** 10,17 ****
  """
  
  
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 10,15 ----
***************
*** 19,24 ****
--- 17,23 ----
  from ya_market.models.proposal_event_all_of import ProposalEventAllOf  # noqa: E501
  from ya_market.rest import ApiException
  
+ 
  class TestProposalEventAllOf(unittest.TestCase):
      """ProposalEventAllOf unit test stubs"""
  
***************
*** 34,46 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_market.models.proposal_event_all_of.ProposalEventAllOf()  # noqa: E501
!         if include_optional :
!             return ProposalEventAllOf(
!                 proposal = null
!             )
!         else :
!             return ProposalEventAllOf(
!         )
  
      def testProposalEventAllOf(self):
          """Test ProposalEventAllOf"""
--- 33,42 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_market.models.proposal_event_all_of.ProposalEventAllOf()  # noqa: E501
!         if include_optional:
!             return ProposalEventAllOf(proposal=None)
!         else:
!             return ProposalEventAllOf()
  
      def testProposalEventAllOf(self):
          """Test ProposalEventAllOf"""
***************
*** 48,52 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 44,48 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_market/test/test_provider_api.py src/ya_market/test/test_provider_api.py
*** target/ya_market/test/test_provider_api.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/test/test_provider_api.py	2020-07-21 16:04:51.000000000 +0200
***************
*** 10,17 ****
  """
  
  
- from __future__ import absolute_import
- 
  import unittest
  
  import ya_market
--- 10,15 ----
***************
*** 113,117 ****
          pass
  
  
! if __name__ == '__main__':
      unittest.main()
--- 111,115 ----
          pass
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_market/test/test_requestor_api.py src/ya_market/test/test_requestor_api.py
*** target/ya_market/test/test_requestor_api.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_market/test/test_requestor_api.py	2020-07-21 16:04:51.000000000 +0200
***************
*** 10,17 ****
  """
  
  
- from __future__ import absolute_import
- 
  import unittest
  
  import ya_market
--- 10,15 ----
***************
*** 127,131 ****
          pass
  
  
! if __name__ == '__main__':
      unittest.main()
--- 125,129 ----
          pass
  
  
! if __name__ == "__main__":
      unittest.main()
