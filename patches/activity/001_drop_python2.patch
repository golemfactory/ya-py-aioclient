Only in src/ya_activity: .DS_Store
diff -r -c target/ya_activity/__init__.py src/ya_activity/__init__.py
*** target/ya_activity/__init__.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_activity/__init__.py	2020-07-21 16:04:45.000000000 +0200
***************
*** 11,19 ****
      Generated by: https://openapi-generator.tech
  """
  
- 
- from __future__ import absolute_import
- 
  __version__ = ""
  
  # import apis into sdk package
--- 11,16 ----
***************
*** 29,34 ****
--- 26,32 ----
  from ya_activity.exceptions import ApiValueError
  from ya_activity.exceptions import ApiKeyError
  from ya_activity.exceptions import ApiException
+ 
  # import models into sdk package
  from ya_activity.models.activity_state import ActivityState
  from ya_activity.models.activity_usage import ActivityUsage
***************
*** 42,45 ****
  from ya_activity.models.get_activity_state import GetActivityState
  from ya_activity.models.get_activity_usage import GetActivityUsage
  from ya_activity.models.provider_event import ProviderEvent
- 
--- 40,42 ----
diff -r -c target/ya_activity/api/__init__.py src/ya_activity/api/__init__.py
*** target/ya_activity/api/__init__.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_activity/api/__init__.py	2020-07-21 13:59:15.000000000 +0200
***************
*** 1,5 ****
- from __future__ import absolute_import
- 
  # flake8: noqa
  
  # import apis into api package
--- 1,3 ----
diff -r -c target/ya_activity/api/provider_api.py src/ya_activity/api/provider_api.py
*** target/ya_activity/api/provider_api.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_activity/api/provider_api.py	2020-07-21 16:04:46.000000000 +0200
***************
*** 9,27 ****
      Generated by: https://openapi-generator.tech
  """
  
- 
- from __future__ import absolute_import
- 
  import re  # noqa: F401
  
  # python 2 and python 3 compatibility library
- import six
- 
  from ya_activity.api_client import ApiClient
! from ya_activity.exceptions import (  # noqa: F401
!     ApiTypeError,
!     ApiValueError
! )
  
  
  class ProviderApi(object):
--- 9,19 ----
      Generated by: https://openapi-generator.tech
  """
  
  import re  # noqa: F401
  
  # python 2 and python 3 compatibility library
  from ya_activity.api_client import ApiClient
! from ya_activity.exceptions import ApiTypeError, ApiValueError  # noqa: F401
  
  
  class ProviderApi(object):
***************
*** 58,64 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
          return self.collect_activity_events_with_http_info(**kwargs)  # noqa: E501
  
      def collect_activity_events_with_http_info(self, **kwargs):  # noqa: E501
--- 50,56 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
          return self.collect_activity_events_with_http_info(**kwargs)  # noqa: E501
  
      def collect_activity_events_with_http_info(self, **kwargs):  # noqa: E501
***************
*** 88,128 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'timeout',
!             'max_events'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method collect_activity_events" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
  
!         if self.api_client.client_side_validation and 'timeout' in local_var_params and local_var_params['timeout'] < 0.0:  # noqa: E501
!             raise ApiValueError("Invalid value for parameter `timeout` when calling `collect_activity_events`, must be a value greater than or equal to `0.0`")  # noqa: E501
!         if self.api_client.client_side_validation and 'max_events' in local_var_params and local_var_params['max_events'] < 0:  # noqa: E501
!             raise ApiValueError("Invalid value for parameter `max_events` when calling `collect_activity_events`, must be a value greater than or equal to `0`")  # noqa: E501
          collection_formats = {}
  
          path_params = {}
  
          query_params = []
!         if 'timeout' in local_var_params and local_var_params['timeout'] is not None:  # noqa: E501
!             query_params.append(('timeout', local_var_params['timeout']))  # noqa: E501
!         if 'max_events' in local_var_params and local_var_params['max_events'] is not None:  # noqa: E501
!             query_params.append(('maxEvents', local_var_params['max_events']))  # noqa: E501
  
          header_params = {}
  
--- 80,136 ----
  
          local_var_params = locals()
  
!         all_params = ["timeout", "max_events"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method collect_activity_events" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
  
!         if (
!             self.api_client.client_side_validation
!             and "timeout" in local_var_params
!             and local_var_params["timeout"] < 0.0
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Invalid value for parameter `timeout` when calling `collect_activity_events`, must be a value greater than or equal to `0.0`"
!             )  # noqa: E501
!         if (
!             self.api_client.client_side_validation
!             and "max_events" in local_var_params
!             and local_var_params["max_events"] < 0
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Invalid value for parameter `max_events` when calling `collect_activity_events`, must be a value greater than or equal to `0`"
!             )  # noqa: E501
          collection_formats = {}
  
          path_params = {}
  
          query_params = []
!         if (
!             "timeout" in local_var_params and local_var_params["timeout"] is not None
!         ):  # noqa: E501
!             query_params.append(("timeout", local_var_params["timeout"]))  # noqa: E501
!         if (
!             "max_events" in local_var_params
!             and local_var_params["max_events"] is not None
!         ):  # noqa: E501
!             query_params.append(
!                 ("maxEvents", local_var_params["max_events"])
!             )  # noqa: E501
  
          header_params = {}
  
***************
*** 131,157 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/events', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='list[OneOfCreateActivityDestroyActivityGetActivityStateGetActivityUsage]',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_activity_state(self, activity_id, **kwargs):  # noqa: E501
          """Get state of specified Activity.  # noqa: E501
--- 139,170 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/events",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="list[OneOfCreateActivityDestroyActivityGetActivityStateGetActivityUsage]",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_activity_state(self, activity_id, **kwargs):  # noqa: E501
          """Get state of specified Activity.  # noqa: E501
***************
*** 174,181 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.get_activity_state_with_http_info(activity_id, **kwargs)  # noqa: E501
  
      def get_activity_state_with_http_info(self, activity_id, **kwargs):  # noqa: E501
          """Get state of specified Activity.  # noqa: E501
--- 187,196 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.get_activity_state_with_http_info(
!             activity_id, **kwargs
!         )  # noqa: E501
  
      def get_activity_state_with_http_info(self, activity_id, **kwargs):  # noqa: E501
          """Get state of specified Activity.  # noqa: E501
***************
*** 203,238 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'activity_id'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_activity_state" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'activity_id' is set
!         if self.api_client.client_side_validation and ('activity_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['activity_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `activity_id` when calling `get_activity_state`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'activity_id' in local_var_params:
!             path_params['activityId'] = local_var_params['activity_id']  # noqa: E501
  
          query_params = []
  
--- 218,255 ----
  
          local_var_params = locals()
  
!         all_params = ["activity_id"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_activity_state" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'activity_id' is set
!         if self.api_client.client_side_validation and (
!             "activity_id" not in local_var_params
!             or local_var_params["activity_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `activity_id` when calling `get_activity_state`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "activity_id" in local_var_params:
!             path_params["activityId"] = local_var_params["activity_id"]  # noqa: E501
  
          query_params = []
  
***************
*** 243,269 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/activity/{activityId}/state', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='ActivityState',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_activity_usage(self, activity_id, **kwargs):  # noqa: E501
          """Get usage of specified Activity.  # noqa: E501
--- 260,291 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/activity/{activityId}/state",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="ActivityState",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_activity_usage(self, activity_id, **kwargs):  # noqa: E501
          """Get usage of specified Activity.  # noqa: E501
***************
*** 286,293 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.get_activity_usage_with_http_info(activity_id, **kwargs)  # noqa: E501
  
      def get_activity_usage_with_http_info(self, activity_id, **kwargs):  # noqa: E501
          """Get usage of specified Activity.  # noqa: E501
--- 308,317 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.get_activity_usage_with_http_info(
!             activity_id, **kwargs
!         )  # noqa: E501
  
      def get_activity_usage_with_http_info(self, activity_id, **kwargs):  # noqa: E501
          """Get usage of specified Activity.  # noqa: E501
***************
*** 315,350 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'activity_id'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_activity_usage" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'activity_id' is set
!         if self.api_client.client_side_validation and ('activity_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['activity_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `activity_id` when calling `get_activity_usage`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'activity_id' in local_var_params:
!             path_params['activityId'] = local_var_params['activity_id']  # noqa: E501
  
          query_params = []
  
--- 339,376 ----
  
          local_var_params = locals()
  
!         all_params = ["activity_id"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_activity_usage" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'activity_id' is set
!         if self.api_client.client_side_validation and (
!             "activity_id" not in local_var_params
!             or local_var_params["activity_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `activity_id` when calling `get_activity_usage`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "activity_id" in local_var_params:
!             path_params["activityId"] = local_var_params["activity_id"]  # noqa: E501
  
          query_params = []
  
***************
*** 355,381 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/activity/{activityId}/usage', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='list[float]',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def set_activity_state(self, activity_id, activity_state, **kwargs):  # noqa: E501
          """Set state of specified Activity.  # noqa: E501
--- 381,412 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/activity/{activityId}/usage",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="list[float]",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def set_activity_state(self, activity_id, activity_state, **kwargs):  # noqa: E501
          """Set state of specified Activity.  # noqa: E501
***************
*** 399,408 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.set_activity_state_with_http_info(activity_id, activity_state, **kwargs)  # noqa: E501
! 
!     def set_activity_state_with_http_info(self, activity_id, activity_state, **kwargs):  # noqa: E501
          """Set state of specified Activity.  # noqa: E501
  
          This method makes a synchronous HTTP request by default. To make an
--- 430,443 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.set_activity_state_with_http_info(
!             activity_id, activity_state, **kwargs
!         )  # noqa: E501
! 
!     def set_activity_state_with_http_info(
!         self, activity_id, activity_state, **kwargs
!     ):  # noqa: E501
          """Set state of specified Activity.  # noqa: E501
  
          This method makes a synchronous HTTP request by default. To make an
***************
*** 429,469 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'activity_id',
!             'activity_state'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method set_activity_state" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'activity_id' is set
!         if self.api_client.client_side_validation and ('activity_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['activity_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `activity_id` when calling `set_activity_state`")  # noqa: E501
          # verify the required parameter 'activity_state' is set
!         if self.api_client.client_side_validation and ('activity_state' not in local_var_params or  # noqa: E501
!                                                         local_var_params['activity_state'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `activity_state` when calling `set_activity_state`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'activity_id' in local_var_params:
!             path_params['activityId'] = local_var_params['activity_id']  # noqa: E501
  
          query_params = []
  
--- 464,509 ----
  
          local_var_params = locals()
  
!         all_params = ["activity_id", "activity_state"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method set_activity_state" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'activity_id' is set
!         if self.api_client.client_side_validation and (
!             "activity_id" not in local_var_params
!             or local_var_params["activity_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `activity_id` when calling `set_activity_state`"
!             )  # noqa: E501
          # verify the required parameter 'activity_state' is set
!         if self.api_client.client_side_validation and (
!             "activity_state" not in local_var_params
!             or local_var_params["activity_state"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `activity_state` when calling `set_activity_state`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "activity_id" in local_var_params:
!             path_params["activityId"] = local_var_params["activity_id"]  # noqa: E501
  
          query_params = []
  
***************
*** 473,493 ****
          local_var_files = {}
  
          body_params = None
!         if 'activity_state' in local_var_params:
!             body_params = local_var_params['activity_state']
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # HTTP header `Content-Type`
!         header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/activity/{activityId}/state', 'PUT',
              path_params,
              query_params,
              header_params,
--- 513,538 ----
          local_var_files = {}
  
          body_params = None
!         if "activity_state" in local_var_params:
!             body_params = local_var_params["activity_state"]
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # HTTP header `Content-Type`
!         header_params[
!             "Content-Type"
!         ] = self.api_client.select_header_content_type(  # noqa: E501
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/activity/{activityId}/state",
!             "PUT",
              path_params,
              query_params,
              header_params,
***************
*** 496,503 ****
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
--- 541,551 ----
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
diff -r -c target/ya_activity/api/requestor_control_api.py src/ya_activity/api/requestor_control_api.py
*** target/ya_activity/api/requestor_control_api.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_activity/api/requestor_control_api.py	2020-07-21 16:04:46.000000000 +0200
***************
*** 9,27 ****
      Generated by: https://openapi-generator.tech
  """
  
- 
- from __future__ import absolute_import
- 
  import re  # noqa: F401
  
- # python 2 and python 3 compatibility library
- import six
  
  from ya_activity.api_client import ApiClient
! from ya_activity.exceptions import (  # noqa: F401
!     ApiTypeError,
!     ApiValueError
! )
  
  
  class RequestorControlApi(object):
--- 9,19 ----
      Generated by: https://openapi-generator.tech
  """
  
  import re  # noqa: F401
  
  
  from ya_activity.api_client import ApiClient
! from ya_activity.exceptions import ApiTypeError, ApiValueError  # noqa: F401
  
  
  class RequestorControlApi(object):
***************
*** 59,66 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.call_exec_with_http_info(activity_id, script, **kwargs)  # noqa: E501
  
      def call_exec_with_http_info(self, activity_id, script, **kwargs):  # noqa: E501
          """Executes an ExeScript batch within a given Activity.  # noqa: E501
--- 51,60 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.call_exec_with_http_info(
!             activity_id, script, **kwargs
!         )  # noqa: E501
  
      def call_exec_with_http_info(self, activity_id, script, **kwargs):  # noqa: E501
          """Executes an ExeScript batch within a given Activity.  # noqa: E501
***************
*** 90,130 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'activity_id',
!             'script'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method call_exec" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'activity_id' is set
!         if self.api_client.client_side_validation and ('activity_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['activity_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `activity_id` when calling `call_exec`")  # noqa: E501
          # verify the required parameter 'script' is set
!         if self.api_client.client_side_validation and ('script' not in local_var_params or  # noqa: E501
!                                                         local_var_params['script'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `script` when calling `call_exec`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'activity_id' in local_var_params:
!             path_params['activityId'] = local_var_params['activity_id']  # noqa: E501
  
          query_params = []
  
--- 84,129 ----
  
          local_var_params = locals()
  
!         all_params = ["activity_id", "script"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method call_exec" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'activity_id' is set
!         if self.api_client.client_side_validation and (
!             "activity_id" not in local_var_params
!             or local_var_params["activity_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `activity_id` when calling `call_exec`"
!             )  # noqa: E501
          # verify the required parameter 'script' is set
!         if self.api_client.client_side_validation and (
!             "script" not in local_var_params
!             or local_var_params["script"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `script` when calling `call_exec`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "activity_id" in local_var_params:
!             path_params["activityId"] = local_var_params["activity_id"]  # noqa: E501
  
          query_params = []
  
***************
*** 134,167 ****
          local_var_files = {}
  
          body_params = None
!         if 'script' in local_var_params:
!             body_params = local_var_params['script']
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # HTTP header `Content-Type`
!         header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/activity/{activityId}/exec', 'POST',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='str',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def create_activity(self, agreement_id, **kwargs):  # noqa: E501
          """Creates new Activity based on given Agreement.  # noqa: E501
--- 133,174 ----
          local_var_files = {}
  
          body_params = None
!         if "script" in local_var_params:
!             body_params = local_var_params["script"]
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # HTTP header `Content-Type`
!         header_params[
!             "Content-Type"
!         ] = self.api_client.select_header_content_type(  # noqa: E501
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/activity/{activityId}/exec",
!             "POST",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="str",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def create_activity(self, agreement_id, **kwargs):  # noqa: E501
          """Creates new Activity based on given Agreement.  # noqa: E501
***************
*** 185,191 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
          return self.create_activity_with_http_info(agreement_id, **kwargs)  # noqa: E501
  
      def create_activity_with_http_info(self, agreement_id, **kwargs):  # noqa: E501
--- 192,198 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
          return self.create_activity_with_http_info(agreement_id, **kwargs)  # noqa: E501
  
      def create_activity_with_http_info(self, agreement_id, **kwargs):  # noqa: E501
***************
*** 215,244 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'agreement_id'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method create_activity" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'agreement_id' is set
!         if self.api_client.client_side_validation and ('agreement_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['agreement_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `agreement_id` when calling `create_activity`")  # noqa: E501
  
          collection_formats = {}
  
--- 222,253 ----
  
          local_var_params = locals()
  
!         all_params = ["agreement_id"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method create_activity" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'agreement_id' is set
!         if self.api_client.client_side_validation and (
!             "agreement_id" not in local_var_params
!             or local_var_params["agreement_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `agreement_id` when calling `create_activity`"
!             )  # noqa: E501
  
          collection_formats = {}
  
***************
*** 252,285 ****
          local_var_files = {}
  
          body_params = None
!         if 'agreement_id' in local_var_params:
!             body_params = local_var_params['agreement_id']
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # HTTP header `Content-Type`
!         header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/activity', 'POST',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='str',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def destroy_activity(self, activity_id, **kwargs):  # noqa: E501
          """Destroys given Activity.  # noqa: E501
--- 261,302 ----
          local_var_files = {}
  
          body_params = None
!         if "agreement_id" in local_var_params:
!             body_params = local_var_params["agreement_id"]
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # HTTP header `Content-Type`
!         header_params[
!             "Content-Type"
!         ] = self.api_client.select_header_content_type(  # noqa: E501
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/activity",
!             "POST",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="str",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def destroy_activity(self, activity_id, **kwargs):  # noqa: E501
          """Destroys given Activity.  # noqa: E501
***************
*** 303,309 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
          return self.destroy_activity_with_http_info(activity_id, **kwargs)  # noqa: E501
  
      def destroy_activity_with_http_info(self, activity_id, **kwargs):  # noqa: E501
--- 320,326 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
          return self.destroy_activity_with_http_info(activity_id, **kwargs)  # noqa: E501
  
      def destroy_activity_with_http_info(self, activity_id, **kwargs):  # noqa: E501
***************
*** 333,368 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'activity_id'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method destroy_activity" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'activity_id' is set
!         if self.api_client.client_side_validation and ('activity_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['activity_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `activity_id` when calling `destroy_activity`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'activity_id' in local_var_params:
!             path_params['activityId'] = local_var_params['activity_id']  # noqa: E501
  
          query_params = []
  
--- 350,387 ----
  
          local_var_params = locals()
  
!         all_params = ["activity_id"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method destroy_activity" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'activity_id' is set
!         if self.api_client.client_side_validation and (
!             "activity_id" not in local_var_params
!             or local_var_params["activity_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `activity_id` when calling `destroy_activity`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "activity_id" in local_var_params:
!             path_params["activityId"] = local_var_params["activity_id"]  # noqa: E501
  
          query_params = []
  
***************
*** 373,386 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/activity/{activityId}', 'DELETE',
              path_params,
              query_params,
              header_params,
--- 392,407 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/activity/{activityId}",
!             "DELETE",
              path_params,
              query_params,
              header_params,
***************
*** 389,399 ****
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_exec_batch_results(self, activity_id, batch_id, **kwargs):  # noqa: E501
          """Queries for ExeScript batch results.  # noqa: E501
--- 410,423 ----
              files=local_var_files,
              response_type=None,  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_exec_batch_results(self, activity_id, batch_id, **kwargs):  # noqa: E501
          """Queries for ExeScript batch results.  # noqa: E501
***************
*** 420,429 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.get_exec_batch_results_with_http_info(activity_id, batch_id, **kwargs)  # noqa: E501
! 
!     def get_exec_batch_results_with_http_info(self, activity_id, batch_id, **kwargs):  # noqa: E501
          """Queries for ExeScript batch results.  # noqa: E501
  
          **Note:** This call shall collect ExeScriptCommand result objects received directly from ExeUnit.  # noqa: E501
--- 444,457 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.get_exec_batch_results_with_http_info(
!             activity_id, batch_id, **kwargs
!         )  # noqa: E501
! 
!     def get_exec_batch_results_with_http_info(
!         self, activity_id, batch_id, **kwargs
!     ):  # noqa: E501
          """Queries for ExeScript batch results.  # noqa: E501
  
          **Note:** This call shall collect ExeScriptCommand result objects received directly from ExeUnit.  # noqa: E501
***************
*** 453,507 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'activity_id',
!             'batch_id',
!             'command_index',
!             'timeout'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_exec_batch_results" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'activity_id' is set
!         if self.api_client.client_side_validation and ('activity_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['activity_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `activity_id` when calling `get_exec_batch_results`")  # noqa: E501
          # verify the required parameter 'batch_id' is set
!         if self.api_client.client_side_validation and ('batch_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['batch_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `batch_id` when calling `get_exec_batch_results`")  # noqa: E501
! 
!         if self.api_client.client_side_validation and 'command_index' in local_var_params and local_var_params['command_index'] < 0:  # noqa: E501
!             raise ApiValueError("Invalid value for parameter `command_index` when calling `get_exec_batch_results`, must be a value greater than or equal to `0`")  # noqa: E501
!         if self.api_client.client_side_validation and 'timeout' in local_var_params and local_var_params['timeout'] < 0.0:  # noqa: E501
!             raise ApiValueError("Invalid value for parameter `timeout` when calling `get_exec_batch_results`, must be a value greater than or equal to `0.0`")  # noqa: E501
          collection_formats = {}
  
          path_params = {}
!         if 'activity_id' in local_var_params:
!             path_params['activityId'] = local_var_params['activity_id']  # noqa: E501
!         if 'batch_id' in local_var_params:
!             path_params['batchId'] = local_var_params['batch_id']  # noqa: E501
  
          query_params = []
!         if 'command_index' in local_var_params and local_var_params['command_index'] is not None:  # noqa: E501
!             query_params.append(('commandIndex', local_var_params['command_index']))  # noqa: E501
!         if 'timeout' in local_var_params and local_var_params['timeout'] is not None:  # noqa: E501
!             query_params.append(('timeout', local_var_params['timeout']))  # noqa: E501
  
          header_params = {}
  
--- 481,557 ----
  
          local_var_params = locals()
  
!         all_params = ["activity_id", "batch_id", "command_index", "timeout"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_exec_batch_results" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'activity_id' is set
!         if self.api_client.client_side_validation and (
!             "activity_id" not in local_var_params
!             or local_var_params["activity_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `activity_id` when calling `get_exec_batch_results`"
!             )  # noqa: E501
          # verify the required parameter 'batch_id' is set
!         if self.api_client.client_side_validation and (
!             "batch_id" not in local_var_params
!             or local_var_params["batch_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `batch_id` when calling `get_exec_batch_results`"
!             )  # noqa: E501
! 
!         if (
!             self.api_client.client_side_validation
!             and "command_index" in local_var_params
!             and local_var_params["command_index"] < 0
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Invalid value for parameter `command_index` when calling `get_exec_batch_results`, must be a value greater than or equal to `0`"
!             )  # noqa: E501
!         if (
!             self.api_client.client_side_validation
!             and "timeout" in local_var_params
!             and local_var_params["timeout"] < 0.0
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Invalid value for parameter `timeout` when calling `get_exec_batch_results`, must be a value greater than or equal to `0.0`"
!             )  # noqa: E501
          collection_formats = {}
  
          path_params = {}
!         if "activity_id" in local_var_params:
!             path_params["activityId"] = local_var_params["activity_id"]  # noqa: E501
!         if "batch_id" in local_var_params:
!             path_params["batchId"] = local_var_params["batch_id"]  # noqa: E501
  
          query_params = []
!         if (
!             "command_index" in local_var_params
!             and local_var_params["command_index"] is not None
!         ):  # noqa: E501
!             query_params.append(
!                 ("commandIndex", local_var_params["command_index"])
!             )  # noqa: E501
!         if (
!             "timeout" in local_var_params and local_var_params["timeout"] is not None
!         ):  # noqa: E501
!             query_params.append(("timeout", local_var_params["timeout"]))  # noqa: E501
  
          header_params = {}
  
***************
*** 510,533 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/activity/{activityId}/exec/{batchId}', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='list[ExeScriptCommandResult]',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
--- 560,588 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/activity/{activityId}/exec/{batchId}",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="list[ExeScriptCommandResult]",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
diff -r -c target/ya_activity/api/requestor_state_api.py src/ya_activity/api/requestor_state_api.py
*** target/ya_activity/api/requestor_state_api.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_activity/api/requestor_state_api.py	2020-07-21 16:04:46.000000000 +0200
***************
*** 9,27 ****
      Generated by: https://openapi-generator.tech
  """
  
- 
- from __future__ import absolute_import
- 
  import re  # noqa: F401
  
- # python 2 and python 3 compatibility library
- import six
  
  from ya_activity.api_client import ApiClient
! from ya_activity.exceptions import (  # noqa: F401
!     ApiTypeError,
!     ApiValueError
! )
  
  
  class RequestorStateApi(object):
--- 9,19 ----
      Generated by: https://openapi-generator.tech
  """
  
  import re  # noqa: F401
  
  
  from ya_activity.api_client import ApiClient
! from ya_activity.exceptions import ApiTypeError, ApiValueError  # noqa: F401
  
  
  class RequestorStateApi(object):
***************
*** 57,64 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.get_activity_state_with_http_info(activity_id, **kwargs)  # noqa: E501
  
      def get_activity_state_with_http_info(self, activity_id, **kwargs):  # noqa: E501
          """Get state of specified Activity.  # noqa: E501
--- 49,58 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.get_activity_state_with_http_info(
!             activity_id, **kwargs
!         )  # noqa: E501
  
      def get_activity_state_with_http_info(self, activity_id, **kwargs):  # noqa: E501
          """Get state of specified Activity.  # noqa: E501
***************
*** 86,121 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'activity_id'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_activity_state" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'activity_id' is set
!         if self.api_client.client_side_validation and ('activity_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['activity_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `activity_id` when calling `get_activity_state`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'activity_id' in local_var_params:
!             path_params['activityId'] = local_var_params['activity_id']  # noqa: E501
  
          query_params = []
  
--- 80,117 ----
  
          local_var_params = locals()
  
!         all_params = ["activity_id"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_activity_state" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'activity_id' is set
!         if self.api_client.client_side_validation and (
!             "activity_id" not in local_var_params
!             or local_var_params["activity_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `activity_id` when calling `get_activity_state`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "activity_id" in local_var_params:
!             path_params["activityId"] = local_var_params["activity_id"]  # noqa: E501
  
          query_params = []
  
***************
*** 126,152 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/activity/{activityId}/state', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='ActivityState',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_activity_usage(self, activity_id, **kwargs):  # noqa: E501
          """Get usage of specified Activity.  # noqa: E501
--- 122,153 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/activity/{activityId}/state",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="ActivityState",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_activity_usage(self, activity_id, **kwargs):  # noqa: E501
          """Get usage of specified Activity.  # noqa: E501
***************
*** 169,176 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.get_activity_usage_with_http_info(activity_id, **kwargs)  # noqa: E501
  
      def get_activity_usage_with_http_info(self, activity_id, **kwargs):  # noqa: E501
          """Get usage of specified Activity.  # noqa: E501
--- 170,179 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.get_activity_usage_with_http_info(
!             activity_id, **kwargs
!         )  # noqa: E501
  
      def get_activity_usage_with_http_info(self, activity_id, **kwargs):  # noqa: E501
          """Get usage of specified Activity.  # noqa: E501
***************
*** 198,233 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'activity_id'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_activity_usage" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'activity_id' is set
!         if self.api_client.client_side_validation and ('activity_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['activity_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `activity_id` when calling `get_activity_usage`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'activity_id' in local_var_params:
!             path_params['activityId'] = local_var_params['activity_id']  # noqa: E501
  
          query_params = []
  
--- 201,238 ----
  
          local_var_params = locals()
  
!         all_params = ["activity_id"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_activity_usage" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'activity_id' is set
!         if self.api_client.client_side_validation and (
!             "activity_id" not in local_var_params
!             or local_var_params["activity_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `activity_id` when calling `get_activity_usage`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "activity_id" in local_var_params:
!             path_params["activityId"] = local_var_params["activity_id"]  # noqa: E501
  
          query_params = []
  
***************
*** 238,264 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/activity/{activityId}/usage', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='list[float]',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_running_command(self, activity_id, **kwargs):  # noqa: E501
          """Get running command for a specified Activity.  # noqa: E501
--- 243,274 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/activity/{activityId}/usage",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="list[float]",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_running_command(self, activity_id, **kwargs):  # noqa: E501
          """Get running command for a specified Activity.  # noqa: E501
***************
*** 282,289 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.get_running_command_with_http_info(activity_id, **kwargs)  # noqa: E501
  
      def get_running_command_with_http_info(self, activity_id, **kwargs):  # noqa: E501
          """Get running command for a specified Activity.  # noqa: E501
--- 292,301 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.get_running_command_with_http_info(
!             activity_id, **kwargs
!         )  # noqa: E501
  
      def get_running_command_with_http_info(self, activity_id, **kwargs):  # noqa: E501
          """Get running command for a specified Activity.  # noqa: E501
***************
*** 312,347 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'activity_id'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_running_command" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'activity_id' is set
!         if self.api_client.client_side_validation and ('activity_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['activity_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `activity_id` when calling `get_running_command`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'activity_id' in local_var_params:
!             path_params['activityId'] = local_var_params['activity_id']  # noqa: E501
  
          query_params = []
  
--- 324,361 ----
  
          local_var_params = locals()
  
!         all_params = ["activity_id"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_running_command" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'activity_id' is set
!         if self.api_client.client_side_validation and (
!             "activity_id" not in local_var_params
!             or local_var_params["activity_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `activity_id` when calling `get_running_command`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "activity_id" in local_var_params:
!             path_params["activityId"] = local_var_params["activity_id"]  # noqa: E501
  
          query_params = []
  
***************
*** 352,375 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/activity/{activityId}/command', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='ExeScriptCommandState',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
--- 366,394 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/activity/{activityId}/command",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="ExeScriptCommandState",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
diff -r -c target/ya_activity/api_client.py src/ya_activity/api_client.py
*** target/ya_activity/api_client.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_activity/api_client.py	2020-07-21 16:37:54.000000000 +0200
***************
*** 8,15 ****
      Generated by: https://openapi-generator.tech
  """
  
- from __future__ import absolute_import
- 
  import atexit
  import datetime
  from dateutil.parser import parse
--- 8,13 ----
***************
*** 20,28 ****
  import re
  import tempfile
  
! # python 2 and python 3 compatibility library
! import six
! from six.moves.urllib.parse import quote
  
  from ya_activity.configuration import Configuration
  import ya_activity.models
--- 18,24 ----
  import re
  import tempfile
  
! from urllib.parse import quote
  
  from ya_activity.configuration import Configuration
  import ya_activity.models
***************
*** 52,72 ****
          to the API. More threads means more concurrent API requests.
      """
  
!     PRIMITIVE_TYPES = (float, bool, bytes, six.text_type) + six.integer_types
      NATIVE_TYPES_MAPPING = {
!         'int': int,
!         'long': int, 
!         'float': float,
!         'str': str,
!         'bool': bool,
!         'date': datetime.date,
!         'datetime': datetime.datetime,
!         'object': object,
      }
      _pool = None
  
!     def __init__(self, configuration=None, header_name=None, header_value=None,
!                  cookie=None, pool_threads=1):
          if configuration is None:
              configuration = Configuration.get_default_copy()
          self.configuration = configuration
--- 48,74 ----
          to the API. More threads means more concurrent API requests.
      """
  
!     PRIMITIVE_TYPES = (float, bool, bytes, str, int)
      NATIVE_TYPES_MAPPING = {
!         "int": int,
!         "long": int,
!         "float": float,
!         "str": str,
!         "bool": bool,
!         "date": datetime.date,
!         "datetime": datetime.datetime,
!         "object": object,
      }
      _pool = None
  
!     def __init__(
!         self,
!         configuration=None,
!         header_name=None,
!         header_value=None,
!         cookie=None,
!         pool_threads=1,
!     ):
          if configuration is None:
              configuration = Configuration.get_default_copy()
          self.configuration = configuration
***************
*** 78,84 ****
              self.default_headers[header_name] = header_value
          self.cookie = cookie
          # Set default User-Agent.
!         self.user_agent = 'OpenAPI-Generator//python'
          self.client_side_validation = configuration.client_side_validation
  
      async def __aenter__(self):
--- 80,86 ----
              self.default_headers[header_name] = header_value
          self.cookie = cookie
          # Set default User-Agent.
!         self.user_agent = "OpenAPI-Generator//python"
          self.client_side_validation = configuration.client_side_validation
  
      async def __aenter__(self):
***************
*** 93,99 ****
              self._pool.close()
              self._pool.join()
              self._pool = None
!             if hasattr(atexit, 'unregister'):
                  atexit.unregister(self.close)
  
      @property
--- 95,101 ----
              self._pool.close()
              self._pool.join()
              self._pool = None
!             if hasattr(atexit, "unregister"):
                  atexit.unregister(self.close)
  
      @property
***************
*** 109,129 ****
      @property
      def user_agent(self):
          """User agent for this API client"""
!         return self.default_headers['User-Agent']
  
      @user_agent.setter
      def user_agent(self, value):
!         self.default_headers['User-Agent'] = value
  
      def set_default_header(self, header_name, header_value):
          self.default_headers[header_name] = header_value
  
      async def __call_api(
!             self, resource_path, method, path_params=None,
!             query_params=None, header_params=None, body=None, post_params=None,
!             files=None, response_type=None, auth_settings=None,
!             _return_http_data_only=None, collection_formats=None,
!             _preload_content=True, _request_timeout=None, _host=None):
  
          config = self.configuration
  
--- 111,143 ----
      @property
      def user_agent(self):
          """User agent for this API client"""
!         return self.default_headers["User-Agent"]
  
      @user_agent.setter
      def user_agent(self, value):
!         self.default_headers["User-Agent"] = value
  
      def set_default_header(self, header_name, header_value):
          self.default_headers[header_name] = header_value
  
      async def __call_api(
!         self,
!         resource_path,
!         method,
!         path_params=None,
!         query_params=None,
!         header_params=None,
!         body=None,
!         post_params=None,
!         files=None,
!         response_type=None,
!         auth_settings=None,
!         _return_http_data_only=None,
!         collection_formats=None,
!         _preload_content=True,
!         _request_timeout=None,
!         _host=None,
!     ):
  
          config = self.configuration
  
***************
*** 131,166 ****
          header_params = header_params or {}
          header_params.update(self.default_headers)
          if self.cookie:
!             header_params['Cookie'] = self.cookie
          if header_params:
              header_params = self.sanitize_for_serialization(header_params)
!             header_params = dict(self.parameters_to_tuples(header_params,
!                                                            collection_formats))
  
          # path parameters
          if path_params:
              path_params = self.sanitize_for_serialization(path_params)
!             path_params = self.parameters_to_tuples(path_params,
!                                                     collection_formats)
              for k, v in path_params:
                  # specified safe chars, encode everything
                  resource_path = resource_path.replace(
!                     '{%s}' % k,
!                     quote(str(v), safe=config.safe_chars_for_path_param)
                  )
  
          # query parameters
          if query_params:
              query_params = self.sanitize_for_serialization(query_params)
!             query_params = self.parameters_to_tuples(query_params,
!                                                      collection_formats)
  
          # post parameters
          if post_params or files:
              post_params = post_params if post_params else []
              post_params = self.sanitize_for_serialization(post_params)
!             post_params = self.parameters_to_tuples(post_params,
!                                                     collection_formats)
              post_params.extend(self.files_parameters(files))
  
          # auth setting
--- 145,177 ----
          header_params = header_params or {}
          header_params.update(self.default_headers)
          if self.cookie:
!             header_params["Cookie"] = self.cookie
          if header_params:
              header_params = self.sanitize_for_serialization(header_params)
!             header_params = dict(
!                 self.parameters_to_tuples(header_params, collection_formats)
!             )
  
          # path parameters
          if path_params:
              path_params = self.sanitize_for_serialization(path_params)
!             path_params = self.parameters_to_tuples(path_params, collection_formats)
              for k, v in path_params:
                  # specified safe chars, encode everything
                  resource_path = resource_path.replace(
!                     "{%s}" % k, quote(str(v), safe=config.safe_chars_for_path_param)
                  )
  
          # query parameters
          if query_params:
              query_params = self.sanitize_for_serialization(query_params)
!             query_params = self.parameters_to_tuples(query_params, collection_formats)
  
          # post parameters
          if post_params or files:
              post_params = post_params if post_params else []
              post_params = self.sanitize_for_serialization(post_params)
!             post_params = self.parameters_to_tuples(post_params, collection_formats)
              post_params.extend(self.files_parameters(files))
  
          # auth setting
***************
*** 180,194 ****
          try:
              # perform request and return response
              response_data = await self.request(
!                 method, url, query_params=query_params, headers=header_params,
!                 post_params=post_params, body=body,
                  _preload_content=_preload_content,
!                 _request_timeout=_request_timeout)
          except ApiException as e:
!             e.body = e.body.decode('utf-8') if six.PY3 else e.body
              raise e
  
!         content_type = response_data.getheader('content-type')
  
          self.last_response = response_data
  
--- 191,210 ----
          try:
              # perform request and return response
              response_data = await self.request(
!                 method,
!                 url,
!                 query_params=query_params,
!                 headers=header_params,
!                 post_params=post_params,
!                 body=body,
                  _preload_content=_preload_content,
!                 _request_timeout=_request_timeout,
!             )
          except ApiException as e:
!             e.body = e.body.decode("utf-8")
              raise e
  
!         content_type = response_data.getheader("content-type")
  
          self.last_response = response_data
  
***************
*** 197,203 ****
          if not _preload_content:
              return return_data
  
!         if six.PY3 and response_type not in ["file", "bytes"]:
              match = None
              if content_type is not None:
                  match = re.search(r"charset=([a-zA-Z\-\d]+)[\s\;]?", content_type)
--- 213,219 ----
          if not _preload_content:
              return return_data
  
!         if response_type not in ["file", "bytes"]:
              match = None
              if content_type is not None:
                  match = re.search(r"charset=([a-zA-Z\-\d]+)[\s\;]?", content_type)
***************
*** 211,220 ****
              return_data = None
  
          if _return_http_data_only:
!             return (return_data)
          else:
!             return (return_data, response_data.status,
!                     response_data.getheaders())
  
      def sanitize_for_serialization(self, obj):
          """Builds a JSON POST object.
--- 227,235 ----
              return_data = None
  
          if _return_http_data_only:
!             return return_data
          else:
!             return (return_data, response_data.status, response_data.getheaders())
  
      def sanitize_for_serialization(self, obj):
          """Builds a JSON POST object.
***************
*** 235,245 ****
          elif isinstance(obj, self.PRIMITIVE_TYPES):
              return obj
          elif isinstance(obj, list):
!             return [self.sanitize_for_serialization(sub_obj)
!                     for sub_obj in obj]
          elif isinstance(obj, tuple):
!             return tuple(self.sanitize_for_serialization(sub_obj)
!                          for sub_obj in obj)
          elif isinstance(obj, (datetime.datetime, datetime.date)):
              return obj.isoformat()
  
--- 250,258 ----
          elif isinstance(obj, self.PRIMITIVE_TYPES):
              return obj
          elif isinstance(obj, list):
!             return [self.sanitize_for_serialization(sub_obj) for sub_obj in obj]
          elif isinstance(obj, tuple):
!             return tuple(self.sanitize_for_serialization(sub_obj) for sub_obj in obj)
          elif isinstance(obj, (datetime.datetime, datetime.date)):
              return obj.isoformat()
  
***************
*** 251,262 ****
              # and attributes which value is not None.
              # Convert attribute name to json key in
              # model definition for request.
!             obj_dict = {obj.attribute_map[attr]: getattr(obj, attr)
!                         for attr, _ in six.iteritems(obj.openapi_types)
!                         if getattr(obj, attr) is not None}
! 
!         return {key: self.sanitize_for_serialization(val)
!                 for key, val in six.iteritems(obj_dict)}
  
      def deserialize(self, response, response_type):
          """Deserializes response into an object.
--- 264,278 ----
              # and attributes which value is not None.
              # Convert attribute name to json key in
              # model definition for request.
!             obj_dict = {
!                 obj.attribute_map[attr]: getattr(obj, attr)
!                 for attr, _ in obj.openapi_types.items()
!                 if getattr(obj, attr) is not None
!             }
! 
!         return {
!             key: self.sanitize_for_serialization(val) for key, val in obj_dict.items()
!         }
  
      def deserialize(self, response, response_type):
          """Deserializes response into an object.
***************
*** 292,306 ****
              return None
  
          if type(klass) == str:
!             if klass.startswith('list['):
!                 sub_kls = re.match(r'list\[(.*)\]', klass).group(1)
!                 return [self.__deserialize(sub_data, sub_kls)
!                         for sub_data in data]
! 
!             if klass.startswith('dict('):
!                 sub_kls = re.match(r'dict\(([^,]*), (.*)\)', klass).group(2)
!                 return {k: self.__deserialize(v, sub_kls)
!                         for k, v in six.iteritems(data)}
  
              # convert str to class
              if klass in self.NATIVE_TYPES_MAPPING:
--- 308,320 ----
              return None
  
          if type(klass) == str:
!             if klass.startswith("list["):
!                 sub_kls = re.match(r"list\[(.*)\]", klass).group(1)
!                 return [self.__deserialize(sub_data, sub_kls) for sub_data in data]
! 
!             if klass.startswith("dict("):
!                 sub_kls = re.match(r"dict\(([^,]*), (.*)\)", klass).group(2)
!                 return {k: self.__deserialize(v, sub_kls) for k, v in data.items()}
  
              # convert str to class
              if klass in self.NATIVE_TYPES_MAPPING:
***************
*** 319,330 ****
          else:
              return self.__deserialize_model(data, klass)
  
!     def call_api(self, resource_path, method,
!                  path_params=None, query_params=None, header_params=None,
!                  body=None, post_params=None, files=None,
!                  response_type=None, auth_settings=None, async_req=None,
!                  _return_http_data_only=None, collection_formats=None,
!                  _preload_content=True, _request_timeout=None, _host=None):
          """Makes the HTTP request (synchronous) and returns deserialized data.
  
          To make an async_req request, set the async_req parameter.
--- 333,357 ----
          else:
              return self.__deserialize_model(data, klass)
  
!     def call_api(
!         self,
!         resource_path,
!         method,
!         path_params=None,
!         query_params=None,
!         header_params=None,
!         body=None,
!         post_params=None,
!         files=None,
!         response_type=None,
!         auth_settings=None,
!         async_req=None,
!         _return_http_data_only=None,
!         collection_formats=None,
!         _preload_content=True,
!         _request_timeout=None,
!         _host=None,
!     ):
          """Makes the HTTP request (synchronous) and returns deserialized data.
  
          To make an async_req request, set the async_req parameter.
***************
*** 362,440 ****
              then the method will return the response directly.
          """
          if not async_req:
!             return self.__call_api(resource_path, method,
!                                    path_params, query_params, header_params,
!                                    body, post_params, files,
!                                    response_type, auth_settings,
!                                    _return_http_data_only, collection_formats,
!                                    _preload_content, _request_timeout, _host)
! 
!         return self.pool.apply_async(self.__call_api, (resource_path,
!                                                        method, path_params,
!                                                        query_params,
!                                                        header_params, body,
!                                                        post_params, files,
!                                                        response_type,
!                                                        auth_settings,
!                                                        _return_http_data_only,
!                                                        collection_formats,
!                                                        _preload_content,
!                                                        _request_timeout,
!                                                        _host))
! 
!     def request(self, method, url, query_params=None, headers=None,
!                 post_params=None, body=None, _preload_content=True,
!                 _request_timeout=None):
          """Makes the HTTP request using RESTClient."""
          if method == "GET":
!             return self.rest_client.GET(url,
!                                         query_params=query_params,
!                                         _preload_content=_preload_content,
!                                         _request_timeout=_request_timeout,
!                                         headers=headers)
          elif method == "HEAD":
!             return self.rest_client.HEAD(url,
!                                          query_params=query_params,
!                                          _preload_content=_preload_content,
!                                          _request_timeout=_request_timeout,
!                                          headers=headers)
          elif method == "OPTIONS":
!             return self.rest_client.OPTIONS(url,
!                                             query_params=query_params,
!                                             headers=headers,
!                                             _preload_content=_preload_content,
!                                             _request_timeout=_request_timeout)
          elif method == "POST":
!             return self.rest_client.POST(url,
!                                          query_params=query_params,
!                                          headers=headers,
!                                          post_params=post_params,
!                                          _preload_content=_preload_content,
!                                          _request_timeout=_request_timeout,
!                                          body=body)
          elif method == "PUT":
!             return self.rest_client.PUT(url,
!                                         query_params=query_params,
!                                         headers=headers,
!                                         post_params=post_params,
!                                         _preload_content=_preload_content,
!                                         _request_timeout=_request_timeout,
!                                         body=body)
          elif method == "PATCH":
!             return self.rest_client.PATCH(url,
!                                           query_params=query_params,
!                                           headers=headers,
!                                           post_params=post_params,
!                                           _preload_content=_preload_content,
!                                           _request_timeout=_request_timeout,
!                                           body=body)
          elif method == "DELETE":
!             return self.rest_client.DELETE(url,
!                                            query_params=query_params,
!                                            headers=headers,
!                                            _preload_content=_preload_content,
!                                            _request_timeout=_request_timeout,
!                                            body=body)
          else:
              raise ApiValueError(
                  "http method must be `GET`, `HEAD`, `OPTIONS`,"
--- 389,508 ----
              then the method will return the response directly.
          """
          if not async_req:
!             return self.__call_api(
!                 resource_path,
!                 method,
!                 path_params,
!                 query_params,
!                 header_params,
!                 body,
!                 post_params,
!                 files,
!                 response_type,
!                 auth_settings,
!                 _return_http_data_only,
!                 collection_formats,
!                 _preload_content,
!                 _request_timeout,
!                 _host,
!             )
! 
!         return self.pool.apply_async(
!             self.__call_api,
!             (
!                 resource_path,
!                 method,
!                 path_params,
!                 query_params,
!                 header_params,
!                 body,
!                 post_params,
!                 files,
!                 response_type,
!                 auth_settings,
!                 _return_http_data_only,
!                 collection_formats,
!                 _preload_content,
!                 _request_timeout,
!                 _host,
!             ),
!         )
! 
!     def request(
!         self,
!         method,
!         url,
!         query_params=None,
!         headers=None,
!         post_params=None,
!         body=None,
!         _preload_content=True,
!         _request_timeout=None,
!     ):
          """Makes the HTTP request using RESTClient."""
          if method == "GET":
!             return self.rest_client.GET(
!                 url,
!                 query_params=query_params,
!                 _preload_content=_preload_content,
!                 _request_timeout=_request_timeout,
!                 headers=headers,
!             )
          elif method == "HEAD":
!             return self.rest_client.HEAD(
!                 url,
!                 query_params=query_params,
!                 _preload_content=_preload_content,
!                 _request_timeout=_request_timeout,
!                 headers=headers,
!             )
          elif method == "OPTIONS":
!             return self.rest_client.OPTIONS(
!                 url,
!                 query_params=query_params,
!                 headers=headers,
!                 _preload_content=_preload_content,
!                 _request_timeout=_request_timeout,
!             )
          elif method == "POST":
!             return self.rest_client.POST(
!                 url,
!                 query_params=query_params,
!                 headers=headers,
!                 post_params=post_params,
!                 _preload_content=_preload_content,
!                 _request_timeout=_request_timeout,
!                 body=body,
!             )
          elif method == "PUT":
!             return self.rest_client.PUT(
!                 url,
!                 query_params=query_params,
!                 headers=headers,
!                 post_params=post_params,
!                 _preload_content=_preload_content,
!                 _request_timeout=_request_timeout,
!                 body=body,
!             )
          elif method == "PATCH":
!             return self.rest_client.PATCH(
!                 url,
!                 query_params=query_params,
!                 headers=headers,
!                 post_params=post_params,
!                 _preload_content=_preload_content,
!                 _request_timeout=_request_timeout,
!                 body=body,
!             )
          elif method == "DELETE":
!             return self.rest_client.DELETE(
!                 url,
!                 query_params=query_params,
!                 headers=headers,
!                 _preload_content=_preload_content,
!                 _request_timeout=_request_timeout,
!                 body=body,
!             )
          else:
              raise ApiValueError(
                  "http method must be `GET`, `HEAD`, `OPTIONS`,"
***************
*** 451,472 ****
          new_params = []
          if collection_formats is None:
              collection_formats = {}
!         for k, v in six.iteritems(params) if isinstance(params, dict) else params:  # noqa: E501
              if k in collection_formats:
                  collection_format = collection_formats[k]
!                 if collection_format == 'multi':
                      new_params.extend((k, value) for value in v)
                  else:
!                     if collection_format == 'ssv':
!                         delimiter = ' '
!                     elif collection_format == 'tsv':
!                         delimiter = '\t'
!                     elif collection_format == 'pipes':
!                         delimiter = '|'
                      else:  # csv is the default
!                         delimiter = ','
!                     new_params.append(
!                         (k, delimiter.join(str(value) for value in v)))
              else:
                  new_params.append((k, v))
          return new_params
--- 519,541 ----
          new_params = []
          if collection_formats is None:
              collection_formats = {}
!         for k, v in (
!             params.items() if isinstance(params, dict) else params
!         ):  # noqa: E501
              if k in collection_formats:
                  collection_format = collection_formats[k]
!                 if collection_format == "multi":
                      new_params.extend((k, value) for value in v)
                  else:
!                     if collection_format == "ssv":
!                         delimiter = " "
!                     elif collection_format == "tsv":
!                         delimiter = "\t"
!                     elif collection_format == "pipes":
!                         delimiter = "|"
                      else:  # csv is the default
!                         delimiter = ","
!                     new_params.append((k, delimiter.join(str(value) for value in v)))
              else:
                  new_params.append((k, v))
          return new_params
***************
*** 480,497 ****
          params = []
  
          if files:
!             for k, v in six.iteritems(files):
                  if not v:
                      continue
                  file_names = v if type(v) is list else [v]
                  for n in file_names:
!                     with open(n, 'rb') as f:
                          filename = os.path.basename(f.name)
                          filedata = f.read()
!                         mimetype = (mimetypes.guess_type(filename)[0] or
!                                     'application/octet-stream')
!                         params.append(
!                             tuple([k, tuple([filename, filedata, mimetype])]))
  
          return params
  
--- 549,567 ----
          params = []
  
          if files:
!             for k, v in files.items():
                  if not v:
                      continue
                  file_names = v if type(v) is list else [v]
                  for n in file_names:
!                     with open(n, "rb") as f:
                          filename = os.path.basename(f.name)
                          filedata = f.read()
!                         mimetype = (
!                             mimetypes.guess_type(filename)[0]
!                             or "application/octet-stream"
!                         )
!                         params.append(tuple([k, tuple([filename, filedata, mimetype])]))
  
          return params
  
***************
*** 506,515 ****
  
          accepts = [x.lower() for x in accepts]
  
!         if 'application/json' in accepts:
!             return 'application/json'
          else:
!             return ', '.join(accepts)
  
      def select_header_content_type(self, content_types):
          """Returns `Content-Type` based on an array of content_types provided.
--- 576,585 ----
  
          accepts = [x.lower() for x in accepts]
  
!         if "application/json" in accepts:
!             return "application/json"
          else:
!             return ", ".join(accepts)
  
      def select_header_content_type(self, content_types):
          """Returns `Content-Type` based on an array of content_types provided.
***************
*** 518,529 ****
          :return: Content-Type (e.g. application/json).
          """
          if not content_types:
!             return 'application/json'
  
          content_types = [x.lower() for x in content_types]
  
!         if 'application/json' in content_types or '*/*' in content_types:
!             return 'application/json'
          else:
              return content_types[0]
  
--- 588,599 ----
          :return: Content-Type (e.g. application/json).
          """
          if not content_types:
!             return "application/json"
  
          content_types = [x.lower() for x in content_types]
  
!         if "application/json" in content_types or "*/*" in content_types:
!             return "application/json"
          else:
              return content_types[0]
  
***************
*** 540,554 ****
          for auth in auth_settings:
              auth_setting = self.configuration.auth_settings().get(auth)
              if auth_setting:
!                 if auth_setting['in'] == 'cookie':
!                     headers['Cookie'] = auth_setting['value']
!                 elif auth_setting['in'] == 'header':
!                     headers[auth_setting['key']] = auth_setting['value']
!                 elif auth_setting['in'] == 'query':
!                     querys.append((auth_setting['key'], auth_setting['value']))
                  else:
                      raise ApiValueError(
!                         'Authentication token must be in `query` or `header`'
                      )
  
      def __deserialize_file(self, response):
--- 610,624 ----
          for auth in auth_settings:
              auth_setting = self.configuration.auth_settings().get(auth)
              if auth_setting:
!                 if auth_setting["in"] == "cookie":
!                     headers["Cookie"] = auth_setting["value"]
!                 elif auth_setting["in"] == "header":
!                     headers[auth_setting["key"]] = auth_setting["value"]
!                 elif auth_setting["in"] == "query":
!                     querys.append((auth_setting["key"], auth_setting["value"]))
                  else:
                      raise ApiValueError(
!                         "Authentication token must be in `query` or `header`"
                      )
  
      def __deserialize_file(self, response):
***************
*** 566,573 ****
  
          content_disposition = response.getheader("Content-Disposition")
          if content_disposition:
!             filename = re.search(r'filename=[\'"]?([^\'"\s]+)[\'"]?',
!                                  content_disposition).group(1)
              path = os.path.join(os.path.dirname(path), filename)
  
          with open(path, "wb") as f:
--- 636,644 ----
  
          content_disposition = response.getheader("Content-Disposition")
          if content_disposition:
!             filename = re.search(
!                 r'filename=[\'"]?([^\'"\s]+)[\'"]?', content_disposition
!             ).group(1)
              path = os.path.join(os.path.dirname(path), filename)
  
          with open(path, "wb") as f:
***************
*** 586,592 ****
          try:
              return klass(data)
          except UnicodeEncodeError:
!             return six.text_type(data)
          except TypeError:
              return data
  
--- 657,663 ----
          try:
              return klass(data)
          except UnicodeEncodeError:
!             return str(data)
          except TypeError:
              return data
  
***************
*** 609,616 ****
              return string
          except ValueError:
              raise rest.ApiException(
!                 status=0,
!                 reason="Failed to parse `{0}` as date object".format(string)
              )
  
      def __deserialize_datetime(self, string):
--- 680,686 ----
              return string
          except ValueError:
              raise rest.ApiException(
!                 status=0, reason="Failed to parse `{0}` as date object".format(string)
              )
  
      def __deserialize_datetime(self, string):
***************
*** 628,637 ****
          except ValueError:
              raise rest.ApiException(
                  status=0,
!                 reason=(
!                     "Failed to parse `{0}` as datetime object"
!                     .format(string)
!                 )
              )
  
      def __deserialize_model(self, data, klass):
--- 698,704 ----
          except ValueError:
              raise rest.ApiException(
                  status=0,
!                 reason=("Failed to parse `{0}` as datetime object".format(string)),
              )
  
      def __deserialize_model(self, data, klass):
***************
*** 642,659 ****
          :return: model object.
          """
          has_discriminator = False
!         if (hasattr(klass, 'get_real_child_model')
!                 and klass.discriminator_value_class_map):
              has_discriminator = True
  
          if not klass.openapi_types and has_discriminator is False:
              return data
  
          kwargs = {}
!         if (data is not None and
!                 klass.openapi_types is not None and
!                 isinstance(data, (list, dict))):
!             for attr, attr_type in six.iteritems(klass.openapi_types):
                  if klass.attribute_map[attr] in data:
                      value = data[klass.attribute_map[attr]]
                      kwargs[attr] = self.__deserialize(value, attr_type)
--- 709,730 ----
          :return: model object.
          """
          has_discriminator = False
!         if (
!             hasattr(klass, "get_real_child_model")
!             and klass.discriminator_value_class_map
!         ):
              has_discriminator = True
  
          if not klass.openapi_types and has_discriminator is False:
              return data
  
          kwargs = {}
!         if (
!             data is not None
!             and klass.openapi_types is not None
!             and isinstance(data, (list, dict))
!         ):
!             for attr, attr_type in klass.openapi_types.items():
                  if klass.attribute_map[attr] in data:
                      value = data[klass.attribute_map[attr]]
                      kwargs[attr] = self.__deserialize(value, attr_type)
diff -r -c target/ya_activity/configuration.py src/ya_activity/configuration.py
*** target/ya_activity/configuration.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_activity/configuration.py	2020-07-21 16:03:14.000000000 +0200
***************
*** 9,20 ****
      Generated by: https://openapi-generator.tech
  """
  
! 
! from __future__ import absolute_import
! 
  import copy
  import logging
  import sys
  
  
  class Configuration(object):
--- 9,19 ----
      Generated by: https://openapi-generator.tech
  """
  
! import base64
  import copy
  import logging
  import sys
+ from typing import Callable, Optional
  
  
  class Configuration(object):
***************
*** 50,60 ****
  
      _default = None
  
!     def __init__(self, host="http://localhost/activity-api/v1",
!                  api_key=None, api_key_prefix=None,
!                  username=None, password=None,
!                  discard_unknown_keys=False,
!                  ):
          """Constructor
          """
          self.host = host
--- 49,63 ----
  
      _default = None
  
!     def __init__(
!         self,
!         host="http://localhost/activity-api/v1",
!         api_key=None,
!         api_key_prefix=None,
!         username=None,
!         password=None,
!         discard_unknown_keys=False,
!     ):
          """Constructor
          """
          self.host = host
***************
*** 74,80 ****
              self.api_key_prefix = api_key_prefix
          """dict to store API prefix (e.g. Bearer)
          """
!         self.refresh_api_key_hook = None
          """function hook to refresh API key if expired
          """
          self.username = username
--- 77,83 ----
              self.api_key_prefix = api_key_prefix
          """dict to store API prefix (e.g. Bearer)
          """
!         self.refresh_api_key_hook = Optional[Callable]
          """function hook to refresh API key if expired
          """
          self.username = username
***************
*** 92,98 ****
          """
          self.logger["package_logger"] = logging.getLogger("ya_activity")
          self.logger["urllib3_logger"] = logging.getLogger("urllib3")
!         self.logger_format = '%(asctime)s %(levelname)s %(message)s'
          """Log format
          """
          self.logger_stream_handler = None
--- 95,101 ----
          """
          self.logger["package_logger"] = logging.getLogger("ya_activity")
          self.logger["urllib3_logger"] = logging.getLogger("urllib3")
!         self.logger_format = "%(asctime)s %(levelname)s %(message)s"
          """Log format
          """
          self.logger_stream_handler = None
***************
*** 137,143 ****
          self.proxy_headers = None
          """Proxy headers
          """
!         self.safe_chars_for_path_param = ''
          """Safe chars for path_param
          """
          self.retries = None
--- 140,146 ----
          self.proxy_headers = None
          """Proxy headers
          """
!         self.safe_chars_for_path_param = ""
          """Safe chars for path_param
          """
          self.retries = None
***************
*** 151,157 ****
          result = cls.__new__(cls)
          memo[id(self)] = result
          for k, v in self.__dict__.items():
!             if k not in ('logger', 'logger_file_handler'):
                  setattr(result, k, copy.deepcopy(v, memo))
          # shallow copy of loggers
          result.logger = copy.copy(self.logger)
--- 154,160 ----
          result = cls.__new__(cls)
          memo[id(self)] = result
          for k, v in self.__dict__.items():
!             if k not in ("logger", "logger_file_handler"):
                  setattr(result, k, copy.deepcopy(v, memo))
          # shallow copy of loggers
          result.logger = copy.copy(self.logger)
***************
*** 216,222 ****
              # then add file handler and remove stream handler.
              self.logger_file_handler = logging.FileHandler(self.__logger_file)
              self.logger_file_handler.setFormatter(self.logger_formatter)
!             for _, logger in six.iteritems(self.logger):
                  logger.addHandler(self.logger_file_handler)
  
      @property
--- 219,225 ----
              # then add file handler and remove stream handler.
              self.logger_file_handler = logging.FileHandler(self.__logger_file)
              self.logger_file_handler.setFormatter(self.logger_formatter)
!             for _, logger in self.logger.items():
                  logger.addHandler(self.logger_file_handler)
  
      @property
***************
*** 269,277 ****
          password = ""
          if self.password is not None:
              password = self.password
!         return urllib3.util.make_headers(
!             basic_auth=username + ':' + password
!         ).get('authorization')
  
      def auth_settings(self):
          """Gets Auth Settings dict for api client.
--- 272,279 ----
          password = ""
          if self.password is not None:
              password = self.password
!         credentials = username + ":" + password
!         return base64.b64encode(credentials.encode()).decode()
  
      def auth_settings(self):
          """Gets Auth Settings dict for api client.
***************
*** 280,290 ****
          """
          auth = {}
          if self.access_token is not None:
!             auth['app_key'] = {
!                 'type': 'bearer',
!                 'in': 'header',
!                 'key': 'Authorization',
!                 'value': 'Bearer ' + self.access_token
              }
          return auth
  
--- 282,292 ----
          """
          auth = {}
          if self.access_token is not None:
!             auth["app_key"] = {
!                 "type": "bearer",
!                 "in": "header",
!                 "key": "Authorization",
!                 "value": "Bearer " + self.access_token,
              }
          return auth
  
***************
*** 293,316 ****
  
          :return: The report for debugging.
          """
!         return "Python SDK Debug Report:\n"\
!                "OS: {env}\n"\
!                "Python Version: {pyversion}\n"\
!                "Version of the API: v1\n"\
!                "SDK Package Version: ".\
!                format(env=sys.platform, pyversion=sys.version)
  
      def get_host_settings(self):
          """Gets an array of host settings
  
          :return: An array of host settings
          """
!         return [
!             {
!                 'url': "/activity-api/v1",
!                 'description': "No description provided",
!             }
!         ]
  
      def get_host_from_settings(self, index, variables=None):
          """Gets host URL based on the index and variables
--- 295,314 ----
  
          :return: The report for debugging.
          """
!         return (
!             "Python SDK Debug Report:\n"
!             "OS: {env}\n"
!             "Python Version: {pyversion}\n"
!             "Version of the API: v1\n"
!             "SDK Package Version: ".format(env=sys.platform, pyversion=sys.version)
!         )
  
      def get_host_settings(self):
          """Gets an array of host settings
  
          :return: An array of host settings
          """
!         return [{"url": "/activity-api/v1", "description": "No description provided",}]
  
      def get_host_from_settings(self, index, variables=None):
          """Gets host URL based on the index and variables
***************
*** 326,347 ****
          except IndexError:
              raise ValueError(
                  "Invalid index {0} when selecting the host settings. "
!                 "Must be less than {1}".format(index, len(servers)))
  
!         url = server['url']
  
          # go through variables and replace placeholders
!         for variable_name, variable in server['variables'].items():
!             used_value = variables.get(
!                 variable_name, variable['default_value'])
  
!             if 'enum_values' in variable \
!                     and used_value not in variable['enum_values']:
                  raise ValueError(
                      "The variable `{0}` in the host URL has invalid value "
                      "{1}. Must be {2}.".format(
!                         variable_name, variables[variable_name],
!                         variable['enum_values']))
  
              url = url.replace("{" + variable_name + "}", used_value)
  
--- 324,345 ----
          except IndexError:
              raise ValueError(
                  "Invalid index {0} when selecting the host settings. "
!                 "Must be less than {1}".format(index, len(servers))
!             )
  
!         url = server["url"]
  
          # go through variables and replace placeholders
!         for variable_name, variable in server["variables"].items():
!             used_value = variables.get(variable_name, variable["default_value"])
  
!             if "enum_values" in variable and used_value not in variable["enum_values"]:
                  raise ValueError(
                      "The variable `{0}` in the host URL has invalid value "
                      "{1}. Must be {2}.".format(
!                         variable_name, variables[variable_name], variable["enum_values"]
!                     )
!                 )
  
              url = url.replace("{" + variable_name + "}", used_value)
  
diff -r -c target/ya_activity/exceptions.py src/ya_activity/exceptions.py
*** target/ya_activity/exceptions.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_activity/exceptions.py	2020-07-21 16:03:38.000000000 +0200
***************
*** 10,25 ****
  """
  
  
- import six
- 
- 
  class OpenApiException(Exception):
      """The base exception class for all OpenAPIExceptions"""
  
  
  class ApiTypeError(OpenApiException, TypeError):
!     def __init__(self, msg, path_to_item=None, valid_classes=None,
!                  key_type=None):
          """ Raises an exception for TypeErrors
  
          Args:
--- 10,21 ----
  """
  
  
  class OpenApiException(Exception):
      """The base exception class for all OpenAPIExceptions"""
  
  
  class ApiTypeError(OpenApiException, TypeError):
!     def __init__(self, msg, path_to_item=None, valid_classes=None, key_type=None):
          """ Raises an exception for TypeErrors
  
          Args:
***************
*** 82,88 ****
  
  
  class ApiException(OpenApiException):
- 
      def __init__(self, status=None, reason=None, http_resp=None):
          if http_resp:
              self.status = http_resp.status
--- 78,83 ----
***************
*** 97,107 ****
  
      def __str__(self):
          """Custom error messages for exception"""
!         error_message = "({0})\n"\
!                         "Reason: {1}\n".format(self.status, self.reason)
          if self.headers:
!             error_message += "HTTP response headers: {0}\n".format(
!                 self.headers)
  
          if self.body:
              error_message += "HTTP response body: {0}\n".format(self.body)
--- 92,100 ----
  
      def __str__(self):
          """Custom error messages for exception"""
!         error_message = "({0})\n" "Reason: {1}\n".format(self.status, self.reason)
          if self.headers:
!             error_message += "HTTP response headers: {0}\n".format(self.headers)
  
          if self.body:
              error_message += "HTTP response body: {0}\n".format(self.body)
***************
*** 113,119 ****
      """Returns a string representation of a path"""
      result = ""
      for pth in path_to_item:
!         if isinstance(pth, six.integer_types):
              result += "[{0}]".format(pth)
          else:
              result += "['{0}']".format(pth)
--- 106,112 ----
      """Returns a string representation of a path"""
      result = ""
      for pth in path_to_item:
!         if isinstance(pth, int):
              result += "[{0}]".format(pth)
          else:
              result += "['{0}']".format(pth)
diff -r -c target/ya_activity/models/__init__.py src/ya_activity/models/__init__.py
*** target/ya_activity/models/__init__.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_activity/models/__init__.py	2020-07-21 13:59:44.000000000 +0200
***************
*** 10,18 ****
      Generated by: https://openapi-generator.tech
  """
  
- 
- from __future__ import absolute_import
- 
  # import models into model package
  from ya_activity.models.activity_state import ActivityState
  from ya_activity.models.activity_usage import ActivityUsage
--- 10,15 ----
diff -r -c target/ya_activity/models/activity_state.py src/ya_activity/models/activity_state.py
*** target/ya_activity/models/activity_state.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_activity/models/activity_state.py	2020-07-21 16:04:46.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_activity.configuration import Configuration
  
--- 13,18 ----
***************
*** 32,50 ****
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {
!         'state': 'list[str]',
!         'reason': 'str',
!         'error_message': 'str'
!     }
  
      attribute_map = {
!         'state': 'state',
!         'reason': 'reason',
!         'error_message': 'errorMessage'
      }
  
!     def __init__(self, state=None, reason=None, error_message=None, local_vars_configuration=None):  # noqa: E501
          """ActivityState - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
--- 31,47 ----
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {"state": "list[str]", "reason": "str", "error_message": "str"}
  
      attribute_map = {
!         "state": "state",
!         "reason": "reason",
!         "error_message": "errorMessage",
      }
  
!     def __init__(
!         self, state=None, reason=None, error_message=None, local_vars_configuration=None
!     ):  # noqa: E501
          """ActivityState - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
***************
*** 81,95 ****
          :param state: The state of this ActivityState.  # noqa: E501
          :type: list[str]
          """
!         if self.local_vars_configuration.client_side_validation and state is None:  # noqa: E501
!             raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
!         allowed_values = ["New", "Initialized", "Deployed", "Ready", "Unresponsive", "Terminated"]  # noqa: E501
!         if (self.local_vars_configuration.client_side_validation and
!                 not set(state).issubset(set(allowed_values))):  # noqa: E501
              raise ValueError(
!                 "Invalid values for `state` [{0}], must be a subset of [{1}]"  # noqa: E501
!                 .format(", ".join(map(str, set(state) - set(allowed_values))),  # noqa: E501
!                         ", ".join(map(str, allowed_values)))
              )
  
          self._state = state
--- 78,107 ----
          :param state: The state of this ActivityState.  # noqa: E501
          :type: list[str]
          """
!         if (
!             self.local_vars_configuration.client_side_validation and state is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `state`, must not be `None`"
!             )  # noqa: E501
!         allowed_values = [
!             "New",
!             "Initialized",
!             "Deployed",
!             "Ready",
!             "Unresponsive",
!             "Terminated",
!         ]  # noqa: E501
!         if self.local_vars_configuration.client_side_validation and not set(
!             state
!         ).issubset(
!             set(allowed_values)
!         ):  # noqa: E501
              raise ValueError(
!                 "Invalid values for `state` [{0}], must be a subset of [{1}]".format(  # noqa: E501
!                     ", ".join(map(str, set(state) - set(allowed_values))),  # noqa: E501
!                     ", ".join(map(str, allowed_values)),
!                 )
              )
  
          self._state = state
***************
*** 144,164 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 156,178 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_activity/models/activity_usage.py src/ya_activity/models/activity_usage.py
*** target/ya_activity/models/activity_usage.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_activity/models/activity_usage.py	2020-07-21 16:04:46.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_activity.configuration import Configuration
  
--- 13,18 ----
***************
*** 32,48 ****
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {
!         'current_usage': 'list[float]',
!         'timestamp': 'int'
!     }
! 
!     attribute_map = {
!         'current_usage': 'currentUsage',
!         'timestamp': 'timestamp'
!     }
  
!     def __init__(self, current_usage=None, timestamp=None, local_vars_configuration=None):  # noqa: E501
          """ActivityUsage - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
--- 31,43 ----
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {"current_usage": "list[float]", "timestamp": "int"}
  
!     attribute_map = {"current_usage": "currentUsage", "timestamp": "timestamp"}
! 
!     def __init__(
!         self, current_usage=None, timestamp=None, local_vars_configuration=None
!     ):  # noqa: E501
          """ActivityUsage - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
***************
*** 107,127 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 102,124 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_activity/models/create_activity.py src/ya_activity/models/create_activity.py
*** target/ya_activity/models/create_activity.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_activity/models/create_activity.py	2020-07-21 16:04:46.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_activity.configuration import Configuration
  
--- 13,18 ----
***************
*** 32,44 ****
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {
!         'agreement_id': 'str'
!     }
! 
!     attribute_map = {
!         'agreement_id': 'agreementId'
!     }
  
      def __init__(self, agreement_id=None, local_vars_configuration=None):  # noqa: E501
          """CreateActivity - a model defined in OpenAPI"""  # noqa: E501
--- 31,39 ----
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {"agreement_id": "str"}
! 
!     attribute_map = {"agreement_id": "agreementId"}
  
      def __init__(self, agreement_id=None, local_vars_configuration=None):  # noqa: E501
          """CreateActivity - a model defined in OpenAPI"""  # noqa: E501
***************
*** 69,76 ****
          :param agreement_id: The agreement_id of this CreateActivity.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and agreement_id is None:  # noqa: E501
!             raise ValueError("Invalid value for `agreement_id`, must not be `None`")  # noqa: E501
  
          self._agreement_id = agreement_id
  
--- 64,76 ----
          :param agreement_id: The agreement_id of this CreateActivity.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation
!             and agreement_id is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `agreement_id`, must not be `None`"
!             )  # noqa: E501
  
          self._agreement_id = agreement_id
  
***************
*** 78,98 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 78,100 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_activity/models/create_activity_all_of.py src/ya_activity/models/create_activity_all_of.py
*** target/ya_activity/models/create_activity_all_of.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_activity/models/create_activity_all_of.py	2020-07-21 16:04:46.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_activity.configuration import Configuration
  
--- 13,18 ----
***************
*** 32,44 ****
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {
!         'agreement_id': 'str'
!     }
! 
!     attribute_map = {
!         'agreement_id': 'agreementId'
!     }
  
      def __init__(self, agreement_id=None, local_vars_configuration=None):  # noqa: E501
          """CreateActivityAllOf - a model defined in OpenAPI"""  # noqa: E501
--- 31,39 ----
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {"agreement_id": "str"}
! 
!     attribute_map = {"agreement_id": "agreementId"}
  
      def __init__(self, agreement_id=None, local_vars_configuration=None):  # noqa: E501
          """CreateActivityAllOf - a model defined in OpenAPI"""  # noqa: E501
***************
*** 77,97 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 72,94 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_activity/models/destroy_activity.py src/ya_activity/models/destroy_activity.py
*** target/ya_activity/models/destroy_activity.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_activity/models/destroy_activity.py	2020-07-21 16:04:46.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_activity.configuration import Configuration
  
--- 13,18 ----
***************
*** 32,44 ****
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {
!         'agreement_id': 'str'
!     }
! 
!     attribute_map = {
!         'agreement_id': 'agreementId'
!     }
  
      def __init__(self, agreement_id=None, local_vars_configuration=None):  # noqa: E501
          """DestroyActivity - a model defined in OpenAPI"""  # noqa: E501
--- 31,39 ----
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {"agreement_id": "str"}
! 
!     attribute_map = {"agreement_id": "agreementId"}
  
      def __init__(self, agreement_id=None, local_vars_configuration=None):  # noqa: E501
          """DestroyActivity - a model defined in OpenAPI"""  # noqa: E501
***************
*** 69,76 ****
          :param agreement_id: The agreement_id of this DestroyActivity.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and agreement_id is None:  # noqa: E501
!             raise ValueError("Invalid value for `agreement_id`, must not be `None`")  # noqa: E501
  
          self._agreement_id = agreement_id
  
--- 64,76 ----
          :param agreement_id: The agreement_id of this DestroyActivity.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation
!             and agreement_id is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `agreement_id`, must not be `None`"
!             )  # noqa: E501
  
          self._agreement_id = agreement_id
  
***************
*** 78,98 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 78,100 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_activity/models/error_message.py src/ya_activity/models/error_message.py
*** target/ya_activity/models/error_message.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_activity/models/error_message.py	2020-07-21 16:04:46.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_activity.configuration import Configuration
  
--- 13,18 ----
***************
*** 32,44 ****
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {
!         'message': 'str'
!     }
! 
!     attribute_map = {
!         'message': 'message'
!     }
  
      def __init__(self, message=None, local_vars_configuration=None):  # noqa: E501
          """ErrorMessage - a model defined in OpenAPI"""  # noqa: E501
--- 31,39 ----
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {"message": "str"}
! 
!     attribute_map = {"message": "message"}
  
      def __init__(self, message=None, local_vars_configuration=None):  # noqa: E501
          """ErrorMessage - a model defined in OpenAPI"""  # noqa: E501
***************
*** 77,97 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 72,94 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_activity/models/exe_script_command_result.py src/ya_activity/models/exe_script_command_result.py
*** target/ya_activity/models/exe_script_command_result.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_activity/models/exe_script_command_result.py	2020-07-21 16:04:47.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_activity.configuration import Configuration
  
--- 13,18 ----
***************
*** 33,52 ****
                              and the value is json key in definition.
      """
      openapi_types = {
!         'index': 'int',
!         'result': 'str',
!         'message': 'str',
!         'is_batch_finished': 'bool'
      }
  
      attribute_map = {
!         'index': 'index',
!         'result': 'result',
!         'message': 'message',
!         'is_batch_finished': 'isBatchFinished'
      }
  
!     def __init__(self, index=None, result=None, message=None, is_batch_finished=None, local_vars_configuration=None):  # noqa: E501
          """ExeScriptCommandResult - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
--- 32,58 ----
                              and the value is json key in definition.
      """
      openapi_types = {
!         "index": "int",
!         "result": "str",
!         "message": "str",
!         "is_batch_finished": "bool",
      }
  
      attribute_map = {
!         "index": "index",
!         "result": "result",
!         "message": "message",
!         "is_batch_finished": "isBatchFinished",
      }
  
!     def __init__(
!         self,
!         index=None,
!         result=None,
!         message=None,
!         is_batch_finished=None,
!         local_vars_configuration=None,
!     ):  # noqa: E501
          """ExeScriptCommandResult - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
***************
*** 83,93 ****
          :param index: The index of this ExeScriptCommandResult.  # noqa: E501
          :type: int
          """
!         if self.local_vars_configuration.client_side_validation and index is None:  # noqa: E501
!             raise ValueError("Invalid value for `index`, must not be `None`")  # noqa: E501
!         if (self.local_vars_configuration.client_side_validation and
!                 index is not None and index < 0):  # noqa: E501
!             raise ValueError("Invalid value for `index`, must be a value greater than or equal to `0`")  # noqa: E501
  
          self._index = index
  
--- 89,108 ----
          :param index: The index of this ExeScriptCommandResult.  # noqa: E501
          :type: int
          """
!         if (
!             self.local_vars_configuration.client_side_validation and index is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `index`, must not be `None`"
!             )  # noqa: E501
!         if (
!             self.local_vars_configuration.client_side_validation
!             and index is not None
!             and index < 0
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `index`, must be a value greater than or equal to `0`"
!             )  # noqa: E501
  
          self._index = index
  
***************
*** 109,121 ****
          :param result: The result of this ExeScriptCommandResult.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and result is None:  # noqa: E501
!             raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501
          allowed_values = ["Ok", "Error"]  # noqa: E501
!         if self.local_vars_configuration.client_side_validation and result not in allowed_values:  # noqa: E501
              raise ValueError(
!                 "Invalid value for `result` ({0}), must be one of {1}"  # noqa: E501
!                 .format(result, allowed_values)
              )
  
          self._result = result
--- 124,144 ----
          :param result: The result of this ExeScriptCommandResult.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation and result is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `result`, must not be `None`"
!             )  # noqa: E501
          allowed_values = ["Ok", "Error"]  # noqa: E501
!         if (
!             self.local_vars_configuration.client_side_validation
!             and result not in allowed_values
!         ):  # noqa: E501
              raise ValueError(
!                 "Invalid value for `result` ({0}), must be one of {1}".format(  # noqa: E501
!                     result, allowed_values
!                 )
              )
  
          self._result = result
***************
*** 166,186 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 189,211 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_activity/models/exe_script_command_state.py src/ya_activity/models/exe_script_command_state.py
*** target/ya_activity/models/exe_script_command_state.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_activity/models/exe_script_command_state.py	2020-07-21 16:04:47.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_activity.configuration import Configuration
  
--- 13,18 ----
***************
*** 32,50 ****
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {
!         'command': 'str',
!         'progress': 'str',
!         'params': 'list[str]'
!     }
! 
!     attribute_map = {
!         'command': 'command',
!         'progress': 'progress',
!         'params': 'params'
!     }
  
!     def __init__(self, command=None, progress=None, params=None, local_vars_configuration=None):  # noqa: E501
          """ExeScriptCommandState - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
--- 31,43 ----
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {"command": "str", "progress": "str", "params": "list[str]"}
  
!     attribute_map = {"command": "command", "progress": "progress", "params": "params"}
! 
!     def __init__(
!         self, command=None, progress=None, params=None, local_vars_configuration=None
!     ):  # noqa: E501
          """ExeScriptCommandState - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
***************
*** 79,86 ****
          :param command: The command of this ExeScriptCommandState.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and command is None:  # noqa: E501
!             raise ValueError("Invalid value for `command`, must not be `None`")  # noqa: E501
  
          self._command = command
  
--- 72,83 ----
          :param command: The command of this ExeScriptCommandState.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation and command is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `command`, must not be `None`"
!             )  # noqa: E501
  
          self._command = command
  
***************
*** 130,150 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 127,149 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_activity/models/exe_script_request.py src/ya_activity/models/exe_script_request.py
*** target/ya_activity/models/exe_script_request.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_activity/models/exe_script_request.py	2020-07-21 16:04:47.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_activity.configuration import Configuration
  
--- 13,18 ----
***************
*** 32,44 ****
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {
!         'text': 'str'
!     }
! 
!     attribute_map = {
!         'text': 'text'
!     }
  
      def __init__(self, text=None, local_vars_configuration=None):  # noqa: E501
          """ExeScriptRequest - a model defined in OpenAPI"""  # noqa: E501
--- 31,39 ----
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {"text": "str"}
! 
!     attribute_map = {"text": "text"}
  
      def __init__(self, text=None, local_vars_configuration=None):  # noqa: E501
          """ExeScriptRequest - a model defined in OpenAPI"""  # noqa: E501
***************
*** 69,76 ****
          :param text: The text of this ExeScriptRequest.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and text is None:  # noqa: E501
!             raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501
  
          self._text = text
  
--- 64,75 ----
          :param text: The text of this ExeScriptRequest.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation and text is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `text`, must not be `None`"
!             )  # noqa: E501
  
          self._text = text
  
***************
*** 78,98 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 77,99 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_activity/models/get_activity_state.py src/ya_activity/models/get_activity_state.py
*** target/ya_activity/models/get_activity_state.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_activity/models/get_activity_state.py	2020-07-21 16:04:47.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_activity.configuration import Configuration
  
--- 13,18 ----
***************
*** 32,42 ****
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {
!     }
  
!     attribute_map = {
!     }
  
      def __init__(self, local_vars_configuration=None):  # noqa: E501
          """GetActivityState - a model defined in OpenAPI"""  # noqa: E501
--- 31,39 ----
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {}
  
!     attribute_map = {}
  
      def __init__(self, local_vars_configuration=None):  # noqa: E501
          """GetActivityState - a model defined in OpenAPI"""  # noqa: E501
***************
*** 49,69 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 46,68 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_activity/models/get_activity_usage.py src/ya_activity/models/get_activity_usage.py
*** target/ya_activity/models/get_activity_usage.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_activity/models/get_activity_usage.py	2020-07-21 16:04:47.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_activity.configuration import Configuration
  
--- 13,18 ----
***************
*** 32,42 ****
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {
!     }
  
!     attribute_map = {
!     }
  
      def __init__(self, local_vars_configuration=None):  # noqa: E501
          """GetActivityUsage - a model defined in OpenAPI"""  # noqa: E501
--- 31,39 ----
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {}
  
!     attribute_map = {}
  
      def __init__(self, local_vars_configuration=None):  # noqa: E501
          """GetActivityUsage - a model defined in OpenAPI"""  # noqa: E501
***************
*** 49,69 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 46,68 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_activity/models/provider_event.py src/ya_activity/models/provider_event.py
*** target/ya_activity/models/provider_event.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_activity/models/provider_event.py	2020-07-21 16:04:47.000000000 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_activity.configuration import Configuration
  
--- 13,18 ----
***************
*** 32,55 ****
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {
!         'event_type': 'str',
!         'activity_id': 'str'
!     }
  
!     attribute_map = {
!         'event_type': 'eventType',
!         'activity_id': 'activityId'
!     }
  
      discriminator_value_class_map = {
!         'GetActivityState': 'GetActivityState',
!         'GetActivityUsage': 'GetActivityUsage',
!         'CreateActivity': 'CreateActivity',
!         'DestroyActivity': 'DestroyActivity'
      }
  
!     def __init__(self, event_type=None, activity_id=None, local_vars_configuration=None):  # noqa: E501
          """ProviderEvent - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
--- 31,50 ----
        attribute_map (dict): The key is attribute name
                              and the value is json key in definition.
      """
!     openapi_types = {"event_type": "str", "activity_id": "str"}
  
!     attribute_map = {"event_type": "eventType", "activity_id": "activityId"}
  
      discriminator_value_class_map = {
!         "GetActivityState": "GetActivityState",
!         "GetActivityUsage": "GetActivityUsage",
!         "CreateActivity": "CreateActivity",
!         "DestroyActivity": "DestroyActivity",
      }
  
!     def __init__(
!         self, event_type=None, activity_id=None, local_vars_configuration=None
!     ):  # noqa: E501
          """ProviderEvent - a model defined in OpenAPI"""  # noqa: E501
          if local_vars_configuration is None:
              local_vars_configuration = Configuration()
***************
*** 57,63 ****
  
          self._event_type = None
          self._activity_id = None
!         self.discriminator = 'event_type'
  
          self.event_type = event_type
          self.activity_id = activity_id
--- 52,58 ----
  
          self._event_type = None
          self._activity_id = None
!         self.discriminator = "event_type"
  
          self.event_type = event_type
          self.activity_id = activity_id
***************
*** 80,87 ****
          :param event_type: The event_type of this ProviderEvent.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and event_type is None:  # noqa: E501
!             raise ValueError("Invalid value for `event_type`, must not be `None`")  # noqa: E501
  
          self._event_type = event_type
  
--- 75,86 ----
          :param event_type: The event_type of this ProviderEvent.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation and event_type is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `event_type`, must not be `None`"
!             )  # noqa: E501
  
          self._event_type = event_type
  
***************
*** 103,110 ****
          :param activity_id: The activity_id of this ProviderEvent.  # noqa: E501
          :type: str
          """
!         if self.local_vars_configuration.client_side_validation and activity_id is None:  # noqa: E501
!             raise ValueError("Invalid value for `activity_id`, must not be `None`")  # noqa: E501
  
          self._activity_id = activity_id
  
--- 102,113 ----
          :param activity_id: The activity_id of this ProviderEvent.  # noqa: E501
          :type: str
          """
!         if (
!             self.local_vars_configuration.client_side_validation and activity_id is None
!         ):  # noqa: E501
!             raise ValueError(
!                 "Invalid value for `activity_id`, must not be `None`"
!             )  # noqa: E501
  
          self._activity_id = activity_id
  
***************
*** 118,138 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(map(
!                     lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
!                     value
!                 ))
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(map(
!                     lambda item: (item[0], item[1].to_dict())
!                     if hasattr(item[1], "to_dict") else item,
!                     value.items()
!                 ))
              else:
                  result[attr] = value
  
--- 121,143 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in self.openapi_types.items():
              value = getattr(self, attr)
              if isinstance(value, list):
!                 result[attr] = list(
!                     map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
!                 )
              elif hasattr(value, "to_dict"):
                  result[attr] = value.to_dict()
              elif isinstance(value, dict):
!                 result[attr] = dict(
!                     map(
!                         lambda item: (item[0], item[1].to_dict())
!                         if hasattr(item[1], "to_dict")
!                         else item,
!                         value.items(),
!                     )
!                 )
              else:
                  result[attr] = value
  
diff -r -c target/ya_activity/rest.py src/ya_activity/rest.py
*** target/ya_activity/rest.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_activity/rest.py	2020-07-21 16:04:48.000000000 +0200
***************
*** 25,31 ****
  
  
  class RESTResponse(io.IOBase):
- 
      def __init__(self, resp, data):
          self.aiohttp_response = resp
          self.status = resp.status
--- 25,30 ----
***************
*** 42,48 ****
  
  
  class RESTClientObject(object):
- 
      def __init__(self, configuration, pools_size=4, maxsize=None):
  
          # maxsize is number of requests to host that are allowed in parallel
--- 41,46 ----
***************
*** 54,59 ****
--- 52,58 ----
              ca_certs = configuration.ssl_ca_cert
          else:
              import certifi
+ 
              # if not set certificate file, use Mozilla's root certificates.
              ca_certs = certifi.where()
  
***************
*** 67,91 ****
              ssl_context.check_hostname = False
              ssl_context.verify_mode = ssl.CERT_NONE
  
!         connector = aiohttp.TCPConnector(
!             limit=maxsize,
!             ssl=ssl_context
!         )
  
          self.proxy = configuration.proxy
          self.proxy_headers = configuration.proxy_headers
  
          # https pool manager
!         self.pool_manager = aiohttp.ClientSession(
!             connector=connector
!         )
  
      async def close(self):
          await self.pool_manager.close()
  
!     async def request(self, method, url, query_params=None, headers=None,
!                       body=None, post_params=None, _preload_content=True,
!                       _request_timeout=None):
          """Execute request
  
          :param method: http request method
--- 66,93 ----
              ssl_context.check_hostname = False
              ssl_context.verify_mode = ssl.CERT_NONE
  
!         connector = aiohttp.TCPConnector(limit=maxsize, ssl=ssl_context)
  
          self.proxy = configuration.proxy
          self.proxy_headers = configuration.proxy_headers
  
          # https pool manager
!         self.pool_manager = aiohttp.ClientSession(connector=connector)
  
      async def close(self):
          await self.pool_manager.close()
  
!     async def request(
!         self,
!         method,
!         url,
!         query_params=None,
!         headers=None,
!         body=None,
!         post_params=None,
!         _preload_content=True,
!         _request_timeout=None,
!     ):
          """Execute request
  
          :param method: http request method
***************
*** 104,111 ****
                                   (connection, read) timeouts.
          """
          method = method.upper()
!         assert method in ['GET', 'HEAD', 'DELETE', 'POST', 'PUT',
!                           'PATCH', 'OPTIONS']
  
          if post_params and body:
              raise ApiValueError(
--- 106,112 ----
                                   (connection, read) timeouts.
          """
          method = method.upper()
!         assert method in ["GET", "HEAD", "DELETE", "POST", "PUT", "PATCH", "OPTIONS"]
  
          if post_params and body:
              raise ApiValueError(
***************
*** 116,130 ****
          headers = headers or {}
          timeout = _request_timeout or 5 * 60
  
!         if 'Content-Type' not in headers:
!             headers['Content-Type'] = 'application/json'
  
!         args = {
!             "method": method,
!             "url": url,
!             "timeout": timeout,
!             "headers": headers
!         }
  
          if self.proxy:
              args["proxy"] = self.proxy
--- 117,126 ----
          headers = headers or {}
          timeout = _request_timeout or 5 * 60
  
!         if "Content-Type" not in headers:
!             headers["Content-Type"] = "application/json"
  
!         args = {"method": method, "url": url, "timeout": timeout, "headers": headers}
  
          if self.proxy:
              args["proxy"] = self.proxy
***************
*** 132,159 ****
              args["proxy_headers"] = self.proxy_headers
  
          if query_params:
!             args["url"] += '?' + urlencode(query_params)
  
          # For `POST`, `PUT`, `PATCH`, `OPTIONS`, `DELETE`
!         if method in ['POST', 'PUT', 'PATCH', 'OPTIONS', 'DELETE']:
!             if re.search('json', headers['Content-Type'], re.IGNORECASE):
                  if body is not None:
                      body = json.dumps(body)
                  args["data"] = body
!             elif headers['Content-Type'] == 'application/x-www-form-urlencoded':  # noqa: E501
                  args["data"] = aiohttp.FormData(post_params)
!             elif headers['Content-Type'] == 'multipart/form-data':
                  # must del headers['Content-Type'], or the correct
                  # Content-Type which generated by aiohttp
!                 del headers['Content-Type']
                  data = aiohttp.FormData()
                  for param in post_params:
                      k, v = param
                      if isinstance(v, tuple) and len(v) == 3:
!                         data.add_field(k,
!                                        value=v[1],
!                                        filename=v[0],
!                                        content_type=v[2])
                      else:
                          data.add_field(k, v)
                  args["data"] = data
--- 128,154 ----
              args["proxy_headers"] = self.proxy_headers
  
          if query_params:
!             args["url"] += "?" + urlencode(query_params)
  
          # For `POST`, `PUT`, `PATCH`, `OPTIONS`, `DELETE`
!         if method in ["POST", "PUT", "PATCH", "OPTIONS", "DELETE"]:
!             if re.search("json", headers["Content-Type"], re.IGNORECASE):
                  if body is not None:
                      body = json.dumps(body)
                  args["data"] = body
!             elif (
!                 headers["Content-Type"] == "application/x-www-form-urlencoded"
!             ):  # noqa: E501
                  args["data"] = aiohttp.FormData(post_params)
!             elif headers["Content-Type"] == "multipart/form-data":
                  # must del headers['Content-Type'], or the correct
                  # Content-Type which generated by aiohttp
!                 del headers["Content-Type"]
                  data = aiohttp.FormData()
                  for param in post_params:
                      k, v = param
                      if isinstance(v, tuple) and len(v) == 3:
!                         data.add_field(k, value=v[1], filename=v[0], content_type=v[2])
                      else:
                          data.add_field(k, v)
                  args["data"] = data
***************
*** 184,253 ****
  
          return r
  
!     async def GET(self, url, headers=None, query_params=None,
!                   _preload_content=True, _request_timeout=None):
!         return (await self.request("GET", url,
!                                    headers=headers,
!                                    _preload_content=_preload_content,
!                                    _request_timeout=_request_timeout,
!                                    query_params=query_params))
! 
!     async def HEAD(self, url, headers=None, query_params=None,
!                    _preload_content=True, _request_timeout=None):
!         return (await self.request("HEAD", url,
!                                    headers=headers,
!                                    _preload_content=_preload_content,
!                                    _request_timeout=_request_timeout,
!                                    query_params=query_params))
! 
!     async def OPTIONS(self, url, headers=None, query_params=None,
!                       post_params=None, body=None, _preload_content=True,
!                       _request_timeout=None):
!         return (await self.request("OPTIONS", url,
!                                    headers=headers,
!                                    query_params=query_params,
!                                    post_params=post_params,
!                                    _preload_content=_preload_content,
!                                    _request_timeout=_request_timeout,
!                                    body=body))
! 
!     async def DELETE(self, url, headers=None, query_params=None, body=None,
!                      _preload_content=True, _request_timeout=None):
!         return (await self.request("DELETE", url,
!                                    headers=headers,
!                                    query_params=query_params,
!                                    _preload_content=_preload_content,
!                                    _request_timeout=_request_timeout,
!                                    body=body))
! 
!     async def POST(self, url, headers=None, query_params=None,
!                    post_params=None, body=None, _preload_content=True,
!                    _request_timeout=None):
!         return (await self.request("POST", url,
!                                    headers=headers,
!                                    query_params=query_params,
!                                    post_params=post_params,
!                                    _preload_content=_preload_content,
!                                    _request_timeout=_request_timeout,
!                                    body=body))
! 
!     async def PUT(self, url, headers=None, query_params=None, post_params=None,
!                   body=None, _preload_content=True, _request_timeout=None):
!         return (await self.request("PUT", url,
!                                    headers=headers,
!                                    query_params=query_params,
!                                    post_params=post_params,
!                                    _preload_content=_preload_content,
!                                    _request_timeout=_request_timeout,
!                                    body=body))
! 
!     async def PATCH(self, url, headers=None, query_params=None,
!                     post_params=None, body=None, _preload_content=True,
!                     _request_timeout=None):
!         return (await self.request("PATCH", url,
!                                    headers=headers,
!                                    query_params=query_params,
!                                    post_params=post_params,
!                                    _preload_content=_preload_content,
!                                    _request_timeout=_request_timeout,
!                                    body=body))
--- 179,317 ----
  
          return r
  
!     async def GET(
!         self,
!         url,
!         headers=None,
!         query_params=None,
!         _preload_content=True,
!         _request_timeout=None,
!     ):
!         return await self.request(
!             "GET",
!             url,
!             headers=headers,
!             _preload_content=_preload_content,
!             _request_timeout=_request_timeout,
!             query_params=query_params,
!         )
! 
!     async def HEAD(
!         self,
!         url,
!         headers=None,
!         query_params=None,
!         _preload_content=True,
!         _request_timeout=None,
!     ):
!         return await self.request(
!             "HEAD",
!             url,
!             headers=headers,
!             _preload_content=_preload_content,
!             _request_timeout=_request_timeout,
!             query_params=query_params,
!         )
! 
!     async def OPTIONS(
!         self,
!         url,
!         headers=None,
!         query_params=None,
!         post_params=None,
!         body=None,
!         _preload_content=True,
!         _request_timeout=None,
!     ):
!         return await self.request(
!             "OPTIONS",
!             url,
!             headers=headers,
!             query_params=query_params,
!             post_params=post_params,
!             _preload_content=_preload_content,
!             _request_timeout=_request_timeout,
!             body=body,
!         )
! 
!     async def DELETE(
!         self,
!         url,
!         headers=None,
!         query_params=None,
!         body=None,
!         _preload_content=True,
!         _request_timeout=None,
!     ):
!         return await self.request(
!             "DELETE",
!             url,
!             headers=headers,
!             query_params=query_params,
!             _preload_content=_preload_content,
!             _request_timeout=_request_timeout,
!             body=body,
!         )
! 
!     async def POST(
!         self,
!         url,
!         headers=None,
!         query_params=None,
!         post_params=None,
!         body=None,
!         _preload_content=True,
!         _request_timeout=None,
!     ):
!         return await self.request(
!             "POST",
!             url,
!             headers=headers,
!             query_params=query_params,
!             post_params=post_params,
!             _preload_content=_preload_content,
!             _request_timeout=_request_timeout,
!             body=body,
!         )
! 
!     async def PUT(
!         self,
!         url,
!         headers=None,
!         query_params=None,
!         post_params=None,
!         body=None,
!         _preload_content=True,
!         _request_timeout=None,
!     ):
!         return await self.request(
!             "PUT",
!             url,
!             headers=headers,
!             query_params=query_params,
!             post_params=post_params,
!             _preload_content=_preload_content,
!             _request_timeout=_request_timeout,
!             body=body,
!         )
! 
!     async def PATCH(
!         self,
!         url,
!         headers=None,
!         query_params=None,
!         post_params=None,
!         body=None,
!         _preload_content=True,
!         _request_timeout=None,
!     ):
!         return await self.request(
!             "PATCH",
!             url,
!             headers=headers,
!             query_params=query_params,
!             post_params=post_params,
!             _preload_content=_preload_content,
!             _request_timeout=_request_timeout,
!             body=body,
!         )
diff -r -c target/ya_activity/test/test_activity_state.py src/ya_activity/test/test_activity_state.py
*** target/ya_activity/test/test_activity_state.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_activity/test/test_activity_state.py	2020-07-21 16:04:47.000000000 +0200
***************
*** 9,17 ****
      Generated by: https://openapi-generator.tech
  """
  
- 
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 9,14 ----
***************
*** 19,24 ****
--- 16,22 ----
  from ya_activity.models.activity_state import ActivityState  # noqa: E501
  from ya_activity.rest import ApiException
  
+ 
  class TestActivityState(unittest.TestCase):
      """ActivityState unit test stubs"""
  
***************
*** 34,53 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_activity.models.activity_state.ActivityState()  # noqa: E501
!         if include_optional :
!             return ActivityState(
!                 state = [
!                     'New'
!                     ], 
!                 reason = '0', 
!                 error_message = '0'
!             )
!         else :
!             return ActivityState(
!                 state = [
!                     'New'
!                     ],
!         )
  
      def testActivityState(self):
          """Test ActivityState"""
--- 32,41 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_activity.models.activity_state.ActivityState()  # noqa: E501
!         if include_optional:
!             return ActivityState(state=["New"], reason="0", error_message="0")
!         else:
!             return ActivityState(state=["New"],)
  
      def testActivityState(self):
          """Test ActivityState"""
***************
*** 55,59 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 43,47 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_activity/test/test_activity_usage.py src/ya_activity/test/test_activity_usage.py
*** target/ya_activity/test/test_activity_usage.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_activity/test/test_activity_usage.py	2020-07-21 16:04:47.000000000 +0200
***************
*** 9,17 ****
      Generated by: https://openapi-generator.tech
  """
  
- 
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 9,14 ----
***************
*** 19,24 ****
--- 16,22 ----
  from ya_activity.models.activity_usage import ActivityUsage  # noqa: E501
  from ya_activity.rest import ApiException
  
+ 
  class TestActivityUsage(unittest.TestCase):
      """ActivityUsage unit test stubs"""
  
***************
*** 34,49 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_activity.models.activity_usage.ActivityUsage()  # noqa: E501
!         if include_optional :
!             return ActivityUsage(
!                 current_usage = [
!                     1.337
!                     ], 
!                 timestamp = 56
!             )
!         else :
!             return ActivityUsage(
!         )
  
      def testActivityUsage(self):
          """Test ActivityUsage"""
--- 32,41 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_activity.models.activity_usage.ActivityUsage()  # noqa: E501
!         if include_optional:
!             return ActivityUsage(current_usage=[1.337], timestamp=56)
!         else:
!             return ActivityUsage()
  
      def testActivityUsage(self):
          """Test ActivityUsage"""
***************
*** 51,55 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 43,47 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_activity/test/test_create_activity.py src/ya_activity/test/test_create_activity.py
*** target/ya_activity/test/test_create_activity.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_activity/test/test_create_activity.py	2020-07-21 16:04:47.000000000 +0200
***************
*** 9,17 ****
      Generated by: https://openapi-generator.tech
  """
  
- 
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 9,14 ----
***************
*** 19,24 ****
--- 16,22 ----
  from ya_activity.models.create_activity import CreateActivity  # noqa: E501
  from ya_activity.rest import ApiException
  
+ 
  class TestCreateActivity(unittest.TestCase):
      """CreateActivity unit test stubs"""
  
***************
*** 34,47 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_activity.models.create_activity.CreateActivity()  # noqa: E501
!         if include_optional :
!             return CreateActivity(
!                 agreement_id = '0'
!             )
!         else :
!             return CreateActivity(
!                 agreement_id = '0',
!         )
  
      def testCreateActivity(self):
          """Test CreateActivity"""
--- 32,41 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_activity.models.create_activity.CreateActivity()  # noqa: E501
!         if include_optional:
!             return CreateActivity(agreement_id="0")
!         else:
!             return CreateActivity(agreement_id="0",)
  
      def testCreateActivity(self):
          """Test CreateActivity"""
***************
*** 49,53 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 43,47 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_activity/test/test_create_activity_all_of.py src/ya_activity/test/test_create_activity_all_of.py
*** target/ya_activity/test/test_create_activity_all_of.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_activity/test/test_create_activity_all_of.py	2020-07-21 16:04:47.000000000 +0200
***************
*** 9,17 ****
      Generated by: https://openapi-generator.tech
  """
  
- 
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 9,14 ----
***************
*** 19,24 ****
--- 16,22 ----
  from ya_activity.models.create_activity_all_of import CreateActivityAllOf  # noqa: E501
  from ya_activity.rest import ApiException
  
+ 
  class TestCreateActivityAllOf(unittest.TestCase):
      """CreateActivityAllOf unit test stubs"""
  
***************
*** 34,46 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_activity.models.create_activity_all_of.CreateActivityAllOf()  # noqa: E501
!         if include_optional :
!             return CreateActivityAllOf(
!                 agreement_id = '0'
!             )
!         else :
!             return CreateActivityAllOf(
!         )
  
      def testCreateActivityAllOf(self):
          """Test CreateActivityAllOf"""
--- 32,41 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_activity.models.create_activity_all_of.CreateActivityAllOf()  # noqa: E501
!         if include_optional:
!             return CreateActivityAllOf(agreement_id="0")
!         else:
!             return CreateActivityAllOf()
  
      def testCreateActivityAllOf(self):
          """Test CreateActivityAllOf"""
***************
*** 48,52 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 43,47 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_activity/test/test_destroy_activity.py src/ya_activity/test/test_destroy_activity.py
*** target/ya_activity/test/test_destroy_activity.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_activity/test/test_destroy_activity.py	2020-07-21 16:04:47.000000000 +0200
***************
*** 9,17 ****
      Generated by: https://openapi-generator.tech
  """
  
- 
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 9,14 ----
***************
*** 19,24 ****
--- 16,22 ----
  from ya_activity.models.destroy_activity import DestroyActivity  # noqa: E501
  from ya_activity.rest import ApiException
  
+ 
  class TestDestroyActivity(unittest.TestCase):
      """DestroyActivity unit test stubs"""
  
***************
*** 34,47 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_activity.models.destroy_activity.DestroyActivity()  # noqa: E501
!         if include_optional :
!             return DestroyActivity(
!                 agreement_id = '0'
!             )
!         else :
!             return DestroyActivity(
!                 agreement_id = '0',
!         )
  
      def testDestroyActivity(self):
          """Test DestroyActivity"""
--- 32,41 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_activity.models.destroy_activity.DestroyActivity()  # noqa: E501
!         if include_optional:
!             return DestroyActivity(agreement_id="0")
!         else:
!             return DestroyActivity(agreement_id="0",)
  
      def testDestroyActivity(self):
          """Test DestroyActivity"""
***************
*** 49,53 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 43,47 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_activity/test/test_error_message.py src/ya_activity/test/test_error_message.py
*** target/ya_activity/test/test_error_message.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_activity/test/test_error_message.py	2020-07-21 16:04:47.000000000 +0200
***************
*** 9,17 ****
      Generated by: https://openapi-generator.tech
  """
  
- 
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 9,14 ----
***************
*** 19,24 ****
--- 16,22 ----
  from ya_activity.models.error_message import ErrorMessage  # noqa: E501
  from ya_activity.rest import ApiException
  
+ 
  class TestErrorMessage(unittest.TestCase):
      """ErrorMessage unit test stubs"""
  
***************
*** 34,46 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_activity.models.error_message.ErrorMessage()  # noqa: E501
!         if include_optional :
!             return ErrorMessage(
!                 message = '0'
!             )
!         else :
!             return ErrorMessage(
!         )
  
      def testErrorMessage(self):
          """Test ErrorMessage"""
--- 32,41 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_activity.models.error_message.ErrorMessage()  # noqa: E501
!         if include_optional:
!             return ErrorMessage(message="0")
!         else:
!             return ErrorMessage()
  
      def testErrorMessage(self):
          """Test ErrorMessage"""
***************
*** 48,52 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 43,47 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_activity/test/test_exe_script_command_result.py src/ya_activity/test/test_exe_script_command_result.py
*** target/ya_activity/test/test_exe_script_command_result.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_activity/test/test_exe_script_command_result.py	2020-07-21 16:04:47.000000000 +0200
***************
*** 9,24 ****
      Generated by: https://openapi-generator.tech
  """
  
- 
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
  import ya_activity
! from ya_activity.models.exe_script_command_result import ExeScriptCommandResult  # noqa: E501
  from ya_activity.rest import ApiException
  
  class TestExeScriptCommandResult(unittest.TestCase):
      """ExeScriptCommandResult unit test stubs"""
  
--- 9,24 ----
      Generated by: https://openapi-generator.tech
  """
  
  import unittest
  import datetime
  
  import ya_activity
! from ya_activity.models.exe_script_command_result import (
!     ExeScriptCommandResult,
! )  # noqa: E501
  from ya_activity.rest import ApiException
  
+ 
  class TestExeScriptCommandResult(unittest.TestCase):
      """ExeScriptCommandResult unit test stubs"""
  
***************
*** 34,51 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_activity.models.exe_script_command_result.ExeScriptCommandResult()  # noqa: E501
!         if include_optional :
              return ExeScriptCommandResult(
!                 index = 0, 
!                 result = 'Ok', 
!                 message = '0', 
!                 is_batch_finished = True
              )
!         else :
!             return ExeScriptCommandResult(
!                 index = 0,
!                 result = 'Ok',
!         )
  
      def testExeScriptCommandResult(self):
          """Test ExeScriptCommandResult"""
--- 34,45 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_activity.models.exe_script_command_result.ExeScriptCommandResult()  # noqa: E501
!         if include_optional:
              return ExeScriptCommandResult(
!                 index=0, result="Ok", message="0", is_batch_finished=True
              )
!         else:
!             return ExeScriptCommandResult(index=0, result="Ok",)
  
      def testExeScriptCommandResult(self):
          """Test ExeScriptCommandResult"""
***************
*** 53,57 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 47,51 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_activity/test/test_exe_script_command_state.py src/ya_activity/test/test_exe_script_command_state.py
*** target/ya_activity/test/test_exe_script_command_state.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_activity/test/test_exe_script_command_state.py	2020-07-21 16:04:47.000000000 +0200
***************
*** 9,24 ****
      Generated by: https://openapi-generator.tech
  """
  
- 
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
  import ya_activity
! from ya_activity.models.exe_script_command_state import ExeScriptCommandState  # noqa: E501
  from ya_activity.rest import ApiException
  
  class TestExeScriptCommandState(unittest.TestCase):
      """ExeScriptCommandState unit test stubs"""
  
--- 9,24 ----
      Generated by: https://openapi-generator.tech
  """
  
  import unittest
  import datetime
  
  import ya_activity
! from ya_activity.models.exe_script_command_state import (
!     ExeScriptCommandState,
! )  # noqa: E501
  from ya_activity.rest import ApiException
  
+ 
  class TestExeScriptCommandState(unittest.TestCase):
      """ExeScriptCommandState unit test stubs"""
  
***************
*** 34,51 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_activity.models.exe_script_command_state.ExeScriptCommandState()  # noqa: E501
!         if include_optional :
!             return ExeScriptCommandState(
!                 command = '0', 
!                 progress = '0', 
!                 params = [
!                     '0'
!                     ]
!             )
!         else :
!             return ExeScriptCommandState(
!                 command = '0',
!         )
  
      def testExeScriptCommandState(self):
          """Test ExeScriptCommandState"""
--- 34,43 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_activity.models.exe_script_command_state.ExeScriptCommandState()  # noqa: E501
!         if include_optional:
!             return ExeScriptCommandState(command="0", progress="0", params=["0"])
!         else:
!             return ExeScriptCommandState(command="0",)
  
      def testExeScriptCommandState(self):
          """Test ExeScriptCommandState"""
***************
*** 53,57 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 45,49 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_activity/test/test_exe_script_request.py src/ya_activity/test/test_exe_script_request.py
*** target/ya_activity/test/test_exe_script_request.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_activity/test/test_exe_script_request.py	2020-07-21 16:04:47.000000000 +0200
***************
*** 9,17 ****
      Generated by: https://openapi-generator.tech
  """
  
- 
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 9,14 ----
***************
*** 19,24 ****
--- 16,22 ----
  from ya_activity.models.exe_script_request import ExeScriptRequest  # noqa: E501
  from ya_activity.rest import ApiException
  
+ 
  class TestExeScriptRequest(unittest.TestCase):
      """ExeScriptRequest unit test stubs"""
  
***************
*** 34,47 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_activity.models.exe_script_request.ExeScriptRequest()  # noqa: E501
!         if include_optional :
!             return ExeScriptRequest(
!                 text = '0'
!             )
!         else :
!             return ExeScriptRequest(
!                 text = '0',
!         )
  
      def testExeScriptRequest(self):
          """Test ExeScriptRequest"""
--- 32,41 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_activity.models.exe_script_request.ExeScriptRequest()  # noqa: E501
!         if include_optional:
!             return ExeScriptRequest(text="0")
!         else:
!             return ExeScriptRequest(text="0",)
  
      def testExeScriptRequest(self):
          """Test ExeScriptRequest"""
***************
*** 49,53 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 43,47 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_activity/test/test_get_activity_state.py src/ya_activity/test/test_get_activity_state.py
*** target/ya_activity/test/test_get_activity_state.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_activity/test/test_get_activity_state.py	2020-07-21 16:04:47.000000000 +0200
***************
*** 9,17 ****
      Generated by: https://openapi-generator.tech
  """
  
- 
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 9,14 ----
***************
*** 19,24 ****
--- 16,22 ----
  from ya_activity.models.get_activity_state import GetActivityState  # noqa: E501
  from ya_activity.rest import ApiException
  
+ 
  class TestGetActivityState(unittest.TestCase):
      """GetActivityState unit test stubs"""
  
***************
*** 34,45 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_activity.models.get_activity_state.GetActivityState()  # noqa: E501
!         if include_optional :
!             return GetActivityState(
!             )
!         else :
!             return GetActivityState(
!         )
  
      def testGetActivityState(self):
          """Test GetActivityState"""
--- 32,41 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_activity.models.get_activity_state.GetActivityState()  # noqa: E501
!         if include_optional:
!             return GetActivityState()
!         else:
!             return GetActivityState()
  
      def testGetActivityState(self):
          """Test GetActivityState"""
***************
*** 47,51 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 43,47 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_activity/test/test_get_activity_usage.py src/ya_activity/test/test_get_activity_usage.py
*** target/ya_activity/test/test_get_activity_usage.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_activity/test/test_get_activity_usage.py	2020-07-21 16:04:47.000000000 +0200
***************
*** 9,17 ****
      Generated by: https://openapi-generator.tech
  """
  
- 
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 9,14 ----
***************
*** 19,24 ****
--- 16,22 ----
  from ya_activity.models.get_activity_usage import GetActivityUsage  # noqa: E501
  from ya_activity.rest import ApiException
  
+ 
  class TestGetActivityUsage(unittest.TestCase):
      """GetActivityUsage unit test stubs"""
  
***************
*** 34,45 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_activity.models.get_activity_usage.GetActivityUsage()  # noqa: E501
!         if include_optional :
!             return GetActivityUsage(
!             )
!         else :
!             return GetActivityUsage(
!         )
  
      def testGetActivityUsage(self):
          """Test GetActivityUsage"""
--- 32,41 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_activity.models.get_activity_usage.GetActivityUsage()  # noqa: E501
!         if include_optional:
!             return GetActivityUsage()
!         else:
!             return GetActivityUsage()
  
      def testGetActivityUsage(self):
          """Test GetActivityUsage"""
***************
*** 47,51 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 43,47 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_activity/test/test_provider_api.py src/ya_activity/test/test_provider_api.py
*** target/ya_activity/test/test_provider_api.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_activity/test/test_provider_api.py	2020-07-21 16:04:47.000000000 +0200
***************
*** 9,17 ****
      Generated by: https://openapi-generator.tech
  """
  
- 
- from __future__ import absolute_import
- 
  import unittest
  
  import ya_activity
--- 9,14 ----
***************
*** 57,61 ****
          pass
  
  
! if __name__ == '__main__':
      unittest.main()
--- 54,58 ----
          pass
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_activity/test/test_provider_event.py src/ya_activity/test/test_provider_event.py
*** target/ya_activity/test/test_provider_event.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_activity/test/test_provider_event.py	2020-07-21 16:04:47.000000000 +0200
***************
*** 9,17 ****
      Generated by: https://openapi-generator.tech
  """
  
- 
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 9,14 ----
***************
*** 19,24 ****
--- 16,22 ----
  from ya_activity.models.provider_event import ProviderEvent  # noqa: E501
  from ya_activity.rest import ApiException
  
+ 
  class TestProviderEvent(unittest.TestCase):
      """ProviderEvent unit test stubs"""
  
***************
*** 34,49 ****
              params are included, when True both required and
              optional params are included """
          # model = ya_activity.models.provider_event.ProviderEvent()  # noqa: E501
!         if include_optional :
!             return ProviderEvent(
!                 event_type = '0', 
!                 activity_id = '0'
!             )
!         else :
!             return ProviderEvent(
!                 event_type = '0',
!                 activity_id = '0',
!         )
  
      def testProviderEvent(self):
          """Test ProviderEvent"""
--- 32,41 ----
              params are included, when True both required and
              optional params are included """
          # model = ya_activity.models.provider_event.ProviderEvent()  # noqa: E501
!         if include_optional:
!             return ProviderEvent(event_type="0", activity_id="0")
!         else:
!             return ProviderEvent(event_type="0", activity_id="0",)
  
      def testProviderEvent(self):
          """Test ProviderEvent"""
***************
*** 51,55 ****
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == '__main__':
      unittest.main()
--- 43,47 ----
          inst_req_and_optional = self.make_instance(include_optional=True)
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_activity/test/test_requestor_control_api.py src/ya_activity/test/test_requestor_control_api.py
*** target/ya_activity/test/test_requestor_control_api.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_activity/test/test_requestor_control_api.py	2020-07-21 16:04:47.000000000 +0200
***************
*** 9,17 ****
      Generated by: https://openapi-generator.tech
  """
  
- 
- from __future__ import absolute_import
- 
  import unittest
  
  import ya_activity
--- 9,14 ----
***************
*** 23,29 ****
      """RequestorControlApi unit test stubs"""
  
      def setUp(self):
!         self.api = ya_activity.api.requestor_control_api.RequestorControlApi()  # noqa: E501
  
      def tearDown(self):
          pass
--- 20,28 ----
      """RequestorControlApi unit test stubs"""
  
      def setUp(self):
!         self.api = (
!             ya_activity.api.requestor_control_api.RequestorControlApi()
!         )  # noqa: E501
  
      def tearDown(self):
          pass
***************
*** 57,61 ****
          pass
  
  
! if __name__ == '__main__':
      unittest.main()
--- 56,60 ----
          pass
  
  
! if __name__ == "__main__":
      unittest.main()
diff -r -c target/ya_activity/test/test_requestor_state_api.py src/ya_activity/test/test_requestor_state_api.py
*** target/ya_activity/test/test_requestor_state_api.py	2020-07-21 19:59:05.000000000 +0200
--- src/ya_activity/test/test_requestor_state_api.py	2020-07-21 16:04:47.000000000 +0200
***************
*** 9,17 ****
      Generated by: https://openapi-generator.tech
  """
  
- 
- from __future__ import absolute_import
- 
  import unittest
  
  import ya_activity
--- 9,14 ----
***************
*** 50,54 ****
          pass
  
  
! if __name__ == '__main__':
      unittest.main()
--- 47,51 ----
          pass
  
  
! if __name__ == "__main__":
      unittest.main()
