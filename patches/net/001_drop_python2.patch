diff -r -c target/ya_net/api/__init__.py src/ya_net/api/__init__.py
*** target/ya_net/api/__init__.py	2021-04-20 14:31:38.280000000 +0200
--- src/ya_net/api/__init__.py	2021-04-20 14:52:26.285128699 +0200
***************
*** 1,5 ****
- from __future__ import absolute_import
- 
  # flake8: noqa
  
  # import apis into api package
--- 1,3 ----
Only in src/ya_net/api: __pycache__
diff -r -c target/ya_net/api/requestor_api.py src/ya_net/api/requestor_api.py
*** target/ya_net/api/requestor_api.py	2021-04-20 14:31:38.280000000 +0200
--- src/ya_net/api/requestor_api.py	2021-04-20 14:56:52.509862396 +0200
***************
*** 10,21 ****
  """
  
  
- from __future__ import absolute_import
- 
  import re  # noqa: F401
  
  # python 2 and python 3 compatibility library
- import six
  
  from ya_net.api_client import ApiClient
  from ya_net.exceptions import (  # noqa: F401
--- 10,18 ----
***************
*** 101,107 ****
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
--- 98,104 ----
              ]
          )
  
!         for key, val in local_var_params['kwargs'].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
***************
*** 226,232 ****
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
--- 223,229 ----
              ]
          )
  
!         for key, val in local_var_params['kwargs'].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
***************
*** 348,354 ****
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
--- 345,351 ----
              ]
          )
  
!         for key, val in local_var_params['kwargs'].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
***************
*** 461,467 ****
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
--- 458,464 ----
              ]
          )
  
!         for key, val in local_var_params['kwargs'].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
diff -r -c target/ya_net/api_client.py src/ya_net/api_client.py
*** target/ya_net/api_client.py	2021-04-20 14:58:44.740484674 +0200
--- src/ya_net/api_client.py	2021-04-20 15:06:22.898032395 +0200
***************
*** 8,15 ****
      Generated by: https://openapi-generator.tech
  """
  
- from __future__ import absolute_import
- 
  import atexit
  import datetime
  from dateutil.parser import parse
--- 8,13 ----
***************
*** 21,28 ****
  import tempfile
  
  # python 2 and python 3 compatibility library
! import six
! from six.moves.urllib.parse import quote
  
  from ya_net.configuration import Configuration
  import ya_net.models
--- 19,25 ----
  import tempfile
  
  # python 2 and python 3 compatibility library
! from urllib.parse import quote
  
  from ya_net.configuration import Configuration
  import ya_net.models
***************
*** 52,58 ****
          to the API. More threads means more concurrent API requests.
      """
  
!     PRIMITIVE_TYPES = (float, bool, bytes, six.text_type) + six.integer_types
      NATIVE_TYPES_MAPPING = {
          'int': int,
          'long': int, 
--- 49,55 ----
          to the API. More threads means more concurrent API requests.
      """
  
!     PRIMITIVE_TYPES = (float, bool, bytes, str, int)
      NATIVE_TYPES_MAPPING = {
          'int': int,
          'long': int, 
***************
*** 180,191 ****
          try:
              # perform request and return response
              response_data = await self.request(
!                 method, url, query_params=query_params, headers=header_params,
!                 post_params=post_params, body=body,
                  _preload_content=_preload_content,
!                 _request_timeout=_request_timeout)
          except ApiException as e:
!             e.body = e.body.decode('utf-8') if six.PY3 else e.body
              raise e
  
          content_type = response_data.getheader('content-type')
--- 177,193 ----
          try:
              # perform request and return response
              response_data = await self.request(
!                 method,
!                 url,
!                 query_params=query_params,
!                 headers=header_params,
!                 post_params=post_params,
!                 body=body,
                  _preload_content=_preload_content,
!                 _request_timeout=_request_timeout,
!             )
          except ApiException as e:
!             e.body = e.body.decode("utf-8")
              raise e
  
          content_type = response_data.getheader('content-type')
***************
*** 197,203 ****
          if not _preload_content:
              return return_data
  
!         if six.PY3 and response_type not in ["file", "bytes"]:
              match = None
              if content_type is not None:
                  match = re.search(r"charset=([a-zA-Z\-\d]+)[\s\;]?", content_type)
--- 199,205 ----
          if not _preload_content:
              return return_data
  
!         if response_type not in ["file", "bytes"]:
              match = None
              if content_type is not None:
                  match = re.search(r"charset=([a-zA-Z\-\d]+)[\s\;]?", content_type)
***************
*** 252,262 ****
              # Convert attribute name to json key in
              # model definition for request.
              obj_dict = {obj.attribute_map[attr]: getattr(obj, attr)
!                         for attr, _ in six.iteritems(obj.openapi_types)
                          if getattr(obj, attr) is not None}
  
          return {key: self.sanitize_for_serialization(val)
!                 for key, val in six.iteritems(obj_dict)}
  
      def deserialize(self, response, response_type):
          """Deserializes response into an object.
--- 254,264 ----
              # Convert attribute name to json key in
              # model definition for request.
              obj_dict = {obj.attribute_map[attr]: getattr(obj, attr)
!                         for attr in obj.openapi_types
                          if getattr(obj, attr) is not None}
  
          return {key: self.sanitize_for_serialization(val)
!                 for key, val in obj_dict.items()}
  
      def deserialize(self, response, response_type):
          """Deserializes response into an object.
***************
*** 300,306 ****
              if klass.startswith('dict('):
                  sub_kls = re.match(r'dict\(([^,]*), (.*)\)', klass).group(2)
                  return {k: self.__deserialize(v, sub_kls)
!                         for k, v in six.iteritems(data)}
  
              # convert str to class
              if klass in self.NATIVE_TYPES_MAPPING:
--- 302,308 ----
              if klass.startswith('dict('):
                  sub_kls = re.match(r'dict\(([^,]*), (.*)\)', klass).group(2)
                  return {k: self.__deserialize(v, sub_kls)
!                         for k, v in data.items()}
  
              # convert str to class
              if klass in self.NATIVE_TYPES_MAPPING:
***************
*** 451,457 ****
          new_params = []
          if collection_formats is None:
              collection_formats = {}
!         for k, v in six.iteritems(params) if isinstance(params, dict) else params:  # noqa: E501
              if k in collection_formats:
                  collection_format = collection_formats[k]
                  if collection_format == 'multi':
--- 453,459 ----
          new_params = []
          if collection_formats is None:
              collection_formats = {}
!         for k, v in params.items() if isinstance(params, dict) else params:  # noqa: E501
              if k in collection_formats:
                  collection_format = collection_formats[k]
                  if collection_format == 'multi':
***************
*** 480,486 ****
          params = []
  
          if files:
!             for k, v in six.iteritems(files):
                  if not v:
                      continue
                  file_names = v if type(v) is list else [v]
--- 482,488 ----
          params = []
  
          if files:
!             for k, v in files.items():
                  if not v:
                      continue
                  file_names = v if type(v) is list else [v]
***************
*** 586,592 ****
          try:
              return klass(data)
          except UnicodeEncodeError:
!             return six.text_type(data)
          except TypeError:
              return data
  
--- 588,594 ----
          try:
              return klass(data)
          except UnicodeEncodeError:
!             return str(data)
          except TypeError:
              return data
  
***************
*** 653,659 ****
          if (data is not None and
                  klass.openapi_types is not None and
                  isinstance(data, (list, dict))):
!             for attr, attr_type in six.iteritems(klass.openapi_types):
                  if klass.attribute_map[attr] in data:
                      value = data[klass.attribute_map[attr]]
                      kwargs[attr] = self.__deserialize(value, attr_type)
--- 655,661 ----
          if (data is not None and
                  klass.openapi_types is not None and
                  isinstance(data, (list, dict))):
!             for attr, attr_type in klass.openapi_types.items():
                  if klass.attribute_map[attr] in data:
                      value = data[klass.attribute_map[attr]]
                      kwargs[attr] = self.__deserialize(value, attr_type)
diff -r -c target/ya_net/configuration.py src/ya_net/configuration.py
*** target/ya_net/configuration.py	2021-04-20 14:31:38.284000000 +0200
--- src/ya_net/configuration.py	2021-04-20 14:49:23.671367023 +0200
***************
*** 9,20 ****
      Generated by: https://openapi-generator.tech
  """
  
! 
! from __future__ import absolute_import
! 
  import copy
  import logging
  import sys
  
  
  class Configuration(object):
--- 9,19 ----
      Generated by: https://openapi-generator.tech
  """
  
! import base64
  import copy
  import logging
  import sys
+ from typing import Callable, Optional
  
  
  class Configuration(object):
***************
*** 74,80 ****
              self.api_key_prefix = api_key_prefix
          """dict to store API prefix (e.g. Bearer)
          """
!         self.refresh_api_key_hook = None
          """function hook to refresh API key if expired
          """
          self.username = username
--- 73,79 ----
              self.api_key_prefix = api_key_prefix
          """dict to store API prefix (e.g. Bearer)
          """
!         self.refresh_api_key_hook = Optional[Callable]
          """function hook to refresh API key if expired
          """
          self.username = username
***************
*** 216,222 ****
              # then add file handler and remove stream handler.
              self.logger_file_handler = logging.FileHandler(self.__logger_file)
              self.logger_file_handler.setFormatter(self.logger_formatter)
!             for _, logger in six.iteritems(self.logger):
                  logger.addHandler(self.logger_file_handler)
  
      @property
--- 215,221 ----
              # then add file handler and remove stream handler.
              self.logger_file_handler = logging.FileHandler(self.__logger_file)
              self.logger_file_handler.setFormatter(self.logger_formatter)
!             for _, logger in self.logger.items():
                  logger.addHandler(self.logger_file_handler)
  
      @property
***************
*** 269,277 ****
          password = ""
          if self.password is not None:
              password = self.password
!         return urllib3.util.make_headers(
!             basic_auth=username + ':' + password
!         ).get('authorization')
  
      def auth_settings(self):
          """Gets Auth Settings dict for api client.
--- 268,275 ----
          password = ""
          if self.password is not None:
              password = self.password
!         credentials = username + ":" + password
!         return base64.b64encode(credentials.encode()).decode()
  
      def auth_settings(self):
          """Gets Auth Settings dict for api client.
diff -r -c target/ya_net/exceptions.py src/ya_net/exceptions.py
*** target/ya_net/exceptions.py	2021-04-20 14:31:38.276000000 +0200
--- src/ya_net/exceptions.py	2021-04-20 15:03:57.836261646 +0200
***************
*** 10,16 ****
  """
  
  
- import six
  
  
  class OpenApiException(Exception):
--- 10,15 ----
***************
*** 113,119 ****
      """Returns a string representation of a path"""
      result = ""
      for pth in path_to_item:
!         if isinstance(pth, six.integer_types):
              result += "[{0}]".format(pth)
          else:
              result += "['{0}']".format(pth)
--- 112,118 ----
      """Returns a string representation of a path"""
      result = ""
      for pth in path_to_item:
!         if isinstance(pth, int):
              result += "[{0}]".format(pth)
          else:
              result += "['{0}']".format(pth)
diff -r -c target/ya_net/__init__.py src/ya_net/__init__.py
*** target/ya_net/__init__.py	2021-04-20 14:31:38.276000000 +0200
--- src/ya_net/__init__.py	2021-04-20 14:52:04.725393068 +0200
***************
*** 12,19 ****
  """
  
  
- from __future__ import absolute_import
- 
  __version__ = ""
  
  # import apis into sdk package
--- 12,17 ----
diff -r -c target/ya_net/models/address.py src/ya_net/models/address.py
*** target/ya_net/models/address.py	2021-04-20 14:31:38.280000000 +0200
--- src/ya_net/models/address.py	2021-04-20 15:03:26.740753486 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_net.configuration import Configuration
  
--- 13,18 ----
***************
*** 78,84 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
                  result[attr] = list(map(
--- 77,83 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr in self.openapi_types:
              value = getattr(self, attr)
              if isinstance(value, list):
                  result[attr] = list(map(
diff -r -c target/ya_net/models/connection.py src/ya_net/models/connection.py
*** target/ya_net/models/connection.py	2021-04-20 14:31:38.280000000 +0200
--- src/ya_net/models/connection.py	2021-04-20 15:05:17.343027464 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_net.configuration import Configuration
  
--- 13,18 ----
***************
*** 186,192 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
                  result[attr] = list(map(
--- 185,191 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr in self.openapi_types:
              value = getattr(self, attr)
              if isinstance(value, list):
                  result[attr] = list(map(
diff -r -c target/ya_net/models/error_message.py src/ya_net/models/error_message.py
*** target/ya_net/models/error_message.py	2021-04-20 14:31:38.280000000 +0200
--- src/ya_net/models/error_message.py	2021-04-20 15:02:42.741459129 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_net.configuration import Configuration
  
--- 13,18 ----
***************
*** 77,83 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
                  result[attr] = list(map(
--- 76,82 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr in self.openapi_types:
              value = getattr(self, attr)
              if isinstance(value, list):
                  result[attr] = list(map(
diff -r -c target/ya_net/models/__init__.py src/ya_net/models/__init__.py
*** target/ya_net/models/__init__.py	2021-04-20 14:31:38.280000000 +0200
--- src/ya_net/models/__init__.py	2021-04-20 14:52:26.265128943 +0200
***************
*** 11,18 ****
  """
  
  
- from __future__ import absolute_import
- 
  # import models into model package
  from ya_net.models.address import Address
  from ya_net.models.connection import Connection
--- 11,16 ----
diff -r -c target/ya_net/models/network.py src/ya_net/models/network.py
*** target/ya_net/models/network.py	2021-04-20 14:31:38.280000000 +0200
--- src/ya_net/models/network.py	2021-04-20 15:03:38.380568736 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_net.configuration import Configuration
  
--- 13,18 ----
***************
*** 157,163 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
                  result[attr] = list(map(
--- 156,162 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr in self.openapi_types:
              value = getattr(self, attr)
              if isinstance(value, list):
                  result[attr] = list(map(
diff -r -c target/ya_net/models/node.py src/ya_net/models/node.py
*** target/ya_net/models/node.py	2021-04-20 14:31:38.280000000 +0200
--- src/ya_net/models/node.py	2021-04-20 15:03:12.864974756 +0200
***************
*** 13,19 ****
  import pprint
  import re  # noqa: F401
  
- import six
  
  from ya_net.configuration import Configuration
  
--- 13,18 ----
***************
*** 105,111 ****
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr, _ in six.iteritems(self.openapi_types):
              value = getattr(self, attr)
              if isinstance(value, list):
                  result[attr] = list(map(
--- 104,110 ----
          """Returns the model properties as a dict"""
          result = {}
  
!         for attr in self.openapi_types:
              value = getattr(self, attr)
              if isinstance(value, list):
                  result[attr] = list(map(
Only in src/ya_net/models: __pycache__
Only in src/ya_net: __pycache__
Only in target/ya_net: rest.py.orig
Only in src/ya_net/test: __pycache__
diff -r -c target/ya_net/test/test_address.py src/ya_net/test/test_address.py
*** target/ya_net/test/test_address.py	2021-04-20 14:31:38.280000000 +0200
--- src/ya_net/test/test_address.py	2021-04-20 14:52:26.277128796 +0200
***************
*** 10,17 ****
  """
  
  
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 10,15 ----
diff -r -c target/ya_net/test/test_connection.py src/ya_net/test/test_connection.py
*** target/ya_net/test/test_connection.py	2021-04-20 14:31:38.280000000 +0200
--- src/ya_net/test/test_connection.py	2021-04-20 14:52:26.293128600 +0200
***************
*** 10,17 ****
  """
  
  
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 10,15 ----
diff -r -c target/ya_net/test/test_error_message.py src/ya_net/test/test_error_message.py
*** target/ya_net/test/test_error_message.py	2021-04-20 14:31:38.280000000 +0200
--- src/ya_net/test/test_error_message.py	2021-04-20 14:52:26.241129238 +0200
***************
*** 10,17 ****
  """
  
  
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 10,15 ----
diff -r -c target/ya_net/test/test_network.py src/ya_net/test/test_network.py
*** target/ya_net/test/test_network.py	2021-04-20 14:31:38.280000000 +0200
--- src/ya_net/test/test_network.py	2021-04-20 14:52:26.273128846 +0200
***************
*** 10,17 ****
  """
  
  
- from __future__ import absolute_import
- 
  import unittest
  import datetime
  
--- 10,15 ----
diff -r -c target/ya_net/test/test_node.py src/ya_net/test/test_node.py
*** target/ya_net/test/test_node.py	2021-04-20 14:31:38.280000000 +0200
--- src/ya_net/test/test_node.py	2021-04-20 14:51:50.289570069 +0200
***************
*** 10,23 ****
  """
  
  
- from __future__ import absolute_import
- 
  import unittest
- import datetime
  
- import ya_net
  from ya_net.models.node import Node  # noqa: E501
! from ya_net.rest import ApiException
  
  class TestNode(unittest.TestCase):
      """Node unit test stubs"""
--- 10,19 ----
  """
  
  
  import unittest
  
  from ya_net.models.node import Node  # noqa: E501
! 
  
  class TestNode(unittest.TestCase):
      """Node unit test stubs"""
diff -r -c target/ya_net/test/test_requestor_api.py src/ya_net/test/test_requestor_api.py
*** target/ya_net/test/test_requestor_api.py	2021-04-20 14:31:38.280000000 +0200
--- src/ya_net/test/test_requestor_api.py	2021-04-20 14:52:26.261128993 +0200
***************
*** 10,17 ****
  """
  
  
- from __future__ import absolute_import
- 
  import unittest
  
  import ya_net
--- 10,15 ----
diff -r -c target/ya_net/api/requestor_api.py src/ya_net/api/requestor_api.py
*** target/ya_net/api/requestor_api.py	2021-07-12 13:06:16.848000000 +0200
--- src/ya_net/api/requestor_api.py	2021-07-12 13:11:42.761189596 +0200
***************
*** 573,579 ****
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
--- 573,579 ----
              ]
          )
  
!         for key, val in local_var_params['kwargs'].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
***************
*** 685,691 ****
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
--- 685,691 ----
              ]
          )
  
!         for key, val in local_var_params['kwargs'].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
***************
*** 794,800 ****
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
--- 794,800 ----
              ]
          )
  
!         for key, val in local_var_params['kwargs'].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
***************
*** 900,906 ****
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
--- 900,906 ----
              ]
          )
  
!         for key, val in local_var_params['kwargs'].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
***************
*** 1012,1018 ****
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
--- 1012,1018 ----
              ]
          )
  
!         for key, val in local_var_params['kwargs'].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
***************
*** 1127,1133 ****
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
--- 1127,1133 ----
              ]
          )
  
!         for key, val in local_var_params['kwargs'].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
